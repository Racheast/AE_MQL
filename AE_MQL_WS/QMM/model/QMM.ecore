<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="qmm" nsURI="/QMM/model/QMM.ecore" nsPrefix="qmm">
  <eClassifiers xsi:type="ecore:EDataType" name="AttributeDataType" instanceClassName="java.lang.String"/>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeFamily" eSuperTypes="//Attribute //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeNameMapping" eSuperTypes="//CAEXBasicObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int roleAttribute_upperBound = 1;&#xA;int nr_nonTransitive_roleAttribute = 0;&#xA;if(this.roleAttribute != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.roleAttribute) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_roleAttribute++;&#xA;}&#xA;if(nr_nonTransitive_roleAttribute > roleAttribute_upperBound &amp;&amp; roleAttribute_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;AttributeNameMapping contains &quot; + nr_nonTransitive_roleAttribute + &quot; non-transitive, non-negated and non-generalized roleAttribute(s). Only &quot; + roleAttribute_upperBound + &quot; non-transitive, non-negated and non-generalized roleAttribute(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int systemUnitAttribute_upperBound = 1;&#xA;int nr_nonTransitive_systemUnitAttribute = 0;&#xA;if(this.systemUnitAttribute != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.systemUnitAttribute) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_systemUnitAttribute++;&#xA;}&#xA;if(nr_nonTransitive_systemUnitAttribute > systemUnitAttribute_upperBound &amp;&amp; systemUnitAttribute_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;AttributeNameMapping contains &quot; + nr_nonTransitive_systemUnitAttribute + &quot; non-transitive, non-negated and non-generalized systemUnitAttribute(s). Only &quot; + systemUnitAttribute_upperBound + &quot; non-transitive, non-negated and non-generalized systemUnitAttribute(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int roleAttributeName_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_roleAttributeName_AttrEClass = 0;&#xA;if(this.roleAttributeName_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.roleAttributeName_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_roleAttributeName_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_roleAttributeName_AttrEClass > roleAttributeName_AttrEClass_upperBound &amp;&amp; roleAttributeName_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;AttributeNameMapping contains &quot; + nr_nonGeneralized_roleAttributeName_AttrEClass + &quot; non-generalized and non-negated roleAttributeName(s). Only &quot; + roleAttributeName_AttrEClass_upperBound + &quot; non-generalized and non-negated roleAttributeName(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int systemUnitAttributeName_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_systemUnitAttributeName_AttrEClass = 0;&#xA;if(this.systemUnitAttributeName_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.systemUnitAttributeName_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_systemUnitAttributeName_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_systemUnitAttributeName_AttrEClass > systemUnitAttributeName_AttrEClass_upperBound &amp;&amp; systemUnitAttributeName_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;AttributeNameMapping contains &quot; + nr_nonGeneralized_systemUnitAttributeName_AttrEClass + &quot; non-generalized and non-negated systemUnitAttributeName(s). Only &quot; + systemUnitAttributeName_AttrEClass_upperBound + &quot; non-generalized and non-negated systemUnitAttributeName(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="roleAttribute" upperBound="-1" eType="//Attribute_Reference_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="systemUnitAttribute" upperBound="-1" eType="//Attribute_Reference_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="roleAttributeName_AttrEClass" upperBound="-1" eType="//AttributeNameMapping_roleAttributeName_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="systemUnitAttributeName_AttrEClass" upperBound="-1" eType="//AttributeNameMapping_systemUnitAttributeName_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Attribute" eSuperTypes="//CAEXObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int refSemantic_upperBound = -1;&#xA;int nr_nonTransitive_refSemantic = 0;&#xA;if(this.refSemantic != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.refSemantic) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_refSemantic++;&#xA;}&#xA;if(nr_nonTransitive_refSemantic > refSemantic_upperBound &amp;&amp; refSemantic_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Attribute contains &quot; + nr_nonTransitive_refSemantic + &quot; non-transitive, non-negated and non-generalized refSemantic(s). Only &quot; + refSemantic_upperBound + &quot; non-transitive, non-negated and non-generalized refSemantic(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int constraint_upperBound = -1;&#xA;int nr_nonTransitive_constraint = 0;&#xA;if(this.constraint != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.constraint) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_constraint++;&#xA;}&#xA;if(nr_nonTransitive_constraint > constraint_upperBound &amp;&amp; constraint_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Attribute contains &quot; + nr_nonTransitive_constraint + &quot; non-transitive, non-negated and non-generalized constraint(s). Only &quot; + constraint_upperBound + &quot; non-transitive, non-negated and non-generalized constraint(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int attribute_upperBound = -1;&#xA;int nr_nonTransitive_attribute = 0;&#xA;if(this.attribute != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.attribute) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_attribute++;&#xA;}&#xA;if(nr_nonTransitive_attribute > attribute_upperBound &amp;&amp; attribute_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Attribute contains &quot; + nr_nonTransitive_attribute + &quot; non-transitive, non-negated and non-generalized attribute(s). Only &quot; + attribute_upperBound + &quot; non-transitive, non-negated and non-generalized attribute(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int defaultValue_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_defaultValue_AttrEClass = 0;&#xA;if(this.defaultValue_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.defaultValue_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_defaultValue_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_defaultValue_AttrEClass > defaultValue_AttrEClass_upperBound &amp;&amp; defaultValue_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Attribute contains &quot; + nr_nonGeneralized_defaultValue_AttrEClass + &quot; non-generalized and non-negated defaultValue(s). Only &quot; + defaultValue_AttrEClass_upperBound + &quot; non-generalized and non-negated defaultValue(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int value_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_value_AttrEClass = 0;&#xA;if(this.value_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.value_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_value_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_value_AttrEClass > value_AttrEClass_upperBound &amp;&amp; value_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Attribute contains &quot; + nr_nonGeneralized_value_AttrEClass + &quot; non-generalized and non-negated value(s). Only &quot; + value_AttrEClass_upperBound + &quot; non-generalized and non-negated value(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int attributeDataType_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_attributeDataType_AttrEClass = 0;&#xA;if(this.attributeDataType_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.attributeDataType_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_attributeDataType_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_attributeDataType_AttrEClass > attributeDataType_AttrEClass_upperBound &amp;&amp; attributeDataType_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Attribute contains &quot; + nr_nonGeneralized_attributeDataType_AttrEClass + &quot; non-generalized and non-negated attributeDataType(s). Only &quot; + attributeDataType_AttrEClass_upperBound + &quot; non-generalized and non-negated attributeDataType(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int refAttributeType_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_refAttributeType_AttrEClass = 0;&#xA;if(this.refAttributeType_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.refAttributeType_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_refAttributeType_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_refAttributeType_AttrEClass > refAttributeType_AttrEClass_upperBound &amp;&amp; refAttributeType_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Attribute contains &quot; + nr_nonGeneralized_refAttributeType_AttrEClass + &quot; non-generalized and non-negated refAttributeType(s). Only &quot; + refAttributeType_AttrEClass_upperBound + &quot; non-generalized and non-negated refAttributeType(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int unit_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_unit_AttrEClass = 0;&#xA;if(this.unit_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.unit_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_unit_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_unit_AttrEClass > unit_AttrEClass_upperBound &amp;&amp; unit_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Attribute contains &quot; + nr_nonGeneralized_unit_AttrEClass + &quot; non-generalized and non-negated unit(s). Only &quot; + unit_AttrEClass_upperBound + &quot; non-generalized and non-negated unit(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="refSemantic" upperBound="-1" eType="//RefSemantic_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="constraint" upperBound="-1" eType="//AttributeValueRequirement_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="attribute" upperBound="-1" eType="//Attribute_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="defaultValue_AttrEClass" upperBound="-1" eType="//Attribute_defaultValue_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="value_AttrEClass" upperBound="-1" eType="//Attribute_value_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="attributeDataType_AttrEClass" upperBound="-1" eType="//Attribute_attributeDataType_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="refAttributeType_AttrEClass" upperBound="-1" eType="//Attribute_refAttributeType_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="unit_AttrEClass" upperBound="-1" eType="//Attribute_unit_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeLib" eSuperTypes="//CAEXObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int attributeType_upperBound = -1;&#xA;int nr_nonTransitive_attributeType = 0;&#xA;if(this.attributeType != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.attributeType) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_attributeType++;&#xA;}&#xA;if(nr_nonTransitive_attributeType > attributeType_upperBound &amp;&amp; attributeType_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;AttributeLib contains &quot; + nr_nonTransitive_attributeType + &quot; non-transitive, non-negated and non-generalized attributeType(s). Only &quot; + attributeType_upperBound + &quot; non-transitive, non-negated and non-generalized attributeType(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="attributeType" upperBound="-1" eType="//Attribute_Containment_OrGroup" containment="true" resolveProxies="false"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeValueRequirement" eSuperTypes="//CAEXBasicObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int ordinalScaledType_upperBound = 1;&#xA;int nr_nonTransitive_ordinalScaledType = 0;&#xA;if(this.ordinalScaledType != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.ordinalScaledType) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_ordinalScaledType++;&#xA;}&#xA;if(nr_nonTransitive_ordinalScaledType > ordinalScaledType_upperBound &amp;&amp; ordinalScaledType_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;AttributeValueRequirement contains &quot; + nr_nonTransitive_ordinalScaledType + &quot; non-transitive, non-negated and non-generalized ordinalScaledType(s). Only &quot; + ordinalScaledType_upperBound + &quot; non-transitive, non-negated and non-generalized ordinalScaledType(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int nominalScaledType_upperBound = 1;&#xA;int nr_nonTransitive_nominalScaledType = 0;&#xA;if(this.nominalScaledType != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.nominalScaledType) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_nominalScaledType++;&#xA;}&#xA;if(nr_nonTransitive_nominalScaledType > nominalScaledType_upperBound &amp;&amp; nominalScaledType_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;AttributeValueRequirement contains &quot; + nr_nonTransitive_nominalScaledType + &quot; non-transitive, non-negated and non-generalized nominalScaledType(s). Only &quot; + nominalScaledType_upperBound + &quot; non-transitive, non-negated and non-generalized nominalScaledType(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int unknownType_upperBound = 1;&#xA;int nr_nonTransitive_unknownType = 0;&#xA;if(this.unknownType != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.unknownType) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_unknownType++;&#xA;}&#xA;if(nr_nonTransitive_unknownType > unknownType_upperBound &amp;&amp; unknownType_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;AttributeValueRequirement contains &quot; + nr_nonTransitive_unknownType + &quot; non-transitive, non-negated and non-generalized unknownType(s). Only &quot; + unknownType_upperBound + &quot; non-transitive, non-negated and non-generalized unknownType(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int name_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_name_AttrEClass = 0;&#xA;if(this.name_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.name_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_name_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_name_AttrEClass > name_AttrEClass_upperBound &amp;&amp; name_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;AttributeValueRequirement contains &quot; + nr_nonGeneralized_name_AttrEClass + &quot; non-generalized and non-negated name(s). Only &quot; + name_AttrEClass_upperBound + &quot; non-generalized and non-negated name(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ordinalScaledType" upperBound="-1" eType="//OrdinalScaledType_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="nominalScaledType" upperBound="-1" eType="//NominalScaledType_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="unknownType" upperBound="-1" eType="//UnknownType_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="name_AttrEClass" upperBound="-1" eType="//AttributeValueRequirement_name_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CAEXBasicObject" eSuperTypes="//RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int description_upperBound = 1;&#xA;int nr_nonTransitive_description = 0;&#xA;if(this.description != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.description) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_description++;&#xA;}&#xA;if(nr_nonTransitive_description > description_upperBound &amp;&amp; description_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;CAEXBasicObject contains &quot; + nr_nonTransitive_description + &quot; non-transitive, non-negated and non-generalized description(s). Only &quot; + description_upperBound + &quot; non-transitive, non-negated and non-generalized description(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int version_upperBound = 1;&#xA;int nr_nonTransitive_version = 0;&#xA;if(this.version != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.version) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_version++;&#xA;}&#xA;if(nr_nonTransitive_version > version_upperBound &amp;&amp; version_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;CAEXBasicObject contains &quot; + nr_nonTransitive_version + &quot; non-transitive, non-negated and non-generalized version(s). Only &quot; + version_upperBound + &quot; non-transitive, non-negated and non-generalized version(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int revision_upperBound = -1;&#xA;int nr_nonTransitive_revision = 0;&#xA;if(this.revision != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.revision) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_revision++;&#xA;}&#xA;if(nr_nonTransitive_revision > revision_upperBound &amp;&amp; revision_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;CAEXBasicObject contains &quot; + nr_nonTransitive_revision + &quot; non-transitive, non-negated and non-generalized revision(s). Only &quot; + revision_upperBound + &quot; non-transitive, non-negated and non-generalized revision(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int copyright_upperBound = 1;&#xA;int nr_nonTransitive_copyright = 0;&#xA;if(this.copyright != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.copyright) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_copyright++;&#xA;}&#xA;if(nr_nonTransitive_copyright > copyright_upperBound &amp;&amp; copyright_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;CAEXBasicObject contains &quot; + nr_nonTransitive_copyright + &quot; non-transitive, non-negated and non-generalized copyright(s). Only &quot; + copyright_upperBound + &quot; non-transitive, non-negated and non-generalized copyright(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int additionalInformation_upperBound = 1;&#xA;int nr_nonTransitive_additionalInformation = 0;&#xA;if(this.additionalInformation != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.additionalInformation) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_additionalInformation++;&#xA;}&#xA;if(nr_nonTransitive_additionalInformation > additionalInformation_upperBound &amp;&amp; additionalInformation_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;CAEXBasicObject contains &quot; + nr_nonTransitive_additionalInformation + &quot; non-transitive, non-negated and non-generalized additionalInformation(s). Only &quot; + additionalInformation_upperBound + &quot; non-transitive, non-negated and non-generalized additionalInformation(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="description" upperBound="-1" eType="//Description_Reference_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="version" upperBound="-1" eType="//Version_Reference_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="revision" upperBound="-1" eType="//Revision_Reference_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="copyright" upperBound="-1" eType="//Copyright_Reference_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="additionalInformation" upperBound="-1" eType="//AdditionalInformation_Reference_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="changeMode_AttrEClass" eType="//CAEXBasicObject_changeMode_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CAEXFile" eSuperTypes="//CAEXBasicObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int sourceDocumentInformation_upperBound = -1;&#xA;int nr_nonTransitive_sourceDocumentInformation = 0;&#xA;if(this.sourceDocumentInformation != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.sourceDocumentInformation) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_sourceDocumentInformation++;&#xA;}&#xA;if(nr_nonTransitive_sourceDocumentInformation > sourceDocumentInformation_upperBound &amp;&amp; sourceDocumentInformation_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;CAEXFile contains &quot; + nr_nonTransitive_sourceDocumentInformation + &quot; non-transitive, non-negated and non-generalized sourceDocumentInformation(s). Only &quot; + sourceDocumentInformation_upperBound + &quot; non-transitive, non-negated and non-generalized sourceDocumentInformation(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int externalReference_upperBound = -1;&#xA;int nr_nonTransitive_externalReference = 0;&#xA;if(this.externalReference != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.externalReference) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_externalReference++;&#xA;}&#xA;if(nr_nonTransitive_externalReference > externalReference_upperBound &amp;&amp; externalReference_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;CAEXFile contains &quot; + nr_nonTransitive_externalReference + &quot; non-transitive, non-negated and non-generalized externalReference(s). Only &quot; + externalReference_upperBound + &quot; non-transitive, non-negated and non-generalized externalReference(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int instanceHierarchy_upperBound = -1;&#xA;int nr_nonTransitive_instanceHierarchy = 0;&#xA;if(this.instanceHierarchy != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.instanceHierarchy) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_instanceHierarchy++;&#xA;}&#xA;if(nr_nonTransitive_instanceHierarchy > instanceHierarchy_upperBound &amp;&amp; instanceHierarchy_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;CAEXFile contains &quot; + nr_nonTransitive_instanceHierarchy + &quot; non-transitive, non-negated and non-generalized instanceHierarchy(s). Only &quot; + instanceHierarchy_upperBound + &quot; non-transitive, non-negated and non-generalized instanceHierarchy(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int interfaceClassLib_upperBound = -1;&#xA;int nr_nonTransitive_interfaceClassLib = 0;&#xA;if(this.interfaceClassLib != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.interfaceClassLib) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_interfaceClassLib++;&#xA;}&#xA;if(nr_nonTransitive_interfaceClassLib > interfaceClassLib_upperBound &amp;&amp; interfaceClassLib_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;CAEXFile contains &quot; + nr_nonTransitive_interfaceClassLib + &quot; non-transitive, non-negated and non-generalized interfaceClassLib(s). Only &quot; + interfaceClassLib_upperBound + &quot; non-transitive, non-negated and non-generalized interfaceClassLib(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int roleClassLib_upperBound = -1;&#xA;int nr_nonTransitive_roleClassLib = 0;&#xA;if(this.roleClassLib != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.roleClassLib) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_roleClassLib++;&#xA;}&#xA;if(nr_nonTransitive_roleClassLib > roleClassLib_upperBound &amp;&amp; roleClassLib_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;CAEXFile contains &quot; + nr_nonTransitive_roleClassLib + &quot; non-transitive, non-negated and non-generalized roleClassLib(s). Only &quot; + roleClassLib_upperBound + &quot; non-transitive, non-negated and non-generalized roleClassLib(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int systemUnitClassLib_upperBound = -1;&#xA;int nr_nonTransitive_systemUnitClassLib = 0;&#xA;if(this.systemUnitClassLib != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.systemUnitClassLib) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_systemUnitClassLib++;&#xA;}&#xA;if(nr_nonTransitive_systemUnitClassLib > systemUnitClassLib_upperBound &amp;&amp; systemUnitClassLib_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;CAEXFile contains &quot; + nr_nonTransitive_systemUnitClassLib + &quot; non-transitive, non-negated and non-generalized systemUnitClassLib(s). Only &quot; + systemUnitClassLib_upperBound + &quot; non-transitive, non-negated and non-generalized systemUnitClassLib(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int attributeTypeLib_upperBound = -1;&#xA;int nr_nonTransitive_attributeTypeLib = 0;&#xA;if(this.attributeTypeLib != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.attributeTypeLib) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_attributeTypeLib++;&#xA;}&#xA;if(nr_nonTransitive_attributeTypeLib > attributeTypeLib_upperBound &amp;&amp; attributeTypeLib_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;CAEXFile contains &quot; + nr_nonTransitive_attributeTypeLib + &quot; non-transitive, non-negated and non-generalized attributeTypeLib(s). Only &quot; + attributeTypeLib_upperBound + &quot; non-transitive, non-negated and non-generalized attributeTypeLib(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int superiorStandardVersion_AttrEClass_upperBound = -1;&#xA;int nr_nonGeneralized_superiorStandardVersion_AttrEClass = 0;&#xA;if(this.superiorStandardVersion_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.superiorStandardVersion_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_superiorStandardVersion_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_superiorStandardVersion_AttrEClass > superiorStandardVersion_AttrEClass_upperBound &amp;&amp; superiorStandardVersion_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;CAEXFile contains &quot; + nr_nonGeneralized_superiorStandardVersion_AttrEClass + &quot; non-generalized and non-negated superiorStandardVersion(s). Only &quot; + superiorStandardVersion_AttrEClass_upperBound + &quot; non-generalized and non-negated superiorStandardVersion(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int fileName_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_fileName_AttrEClass = 0;&#xA;if(this.fileName_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.fileName_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_fileName_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_fileName_AttrEClass > fileName_AttrEClass_upperBound &amp;&amp; fileName_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;CAEXFile contains &quot; + nr_nonGeneralized_fileName_AttrEClass + &quot; non-generalized and non-negated fileName(s). Only &quot; + fileName_AttrEClass_upperBound + &quot; non-generalized and non-negated fileName(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int schemaVersion_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_schemaVersion_AttrEClass = 0;&#xA;if(this.schemaVersion_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.schemaVersion_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_schemaVersion_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_schemaVersion_AttrEClass > schemaVersion_AttrEClass_upperBound &amp;&amp; schemaVersion_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;CAEXFile contains &quot; + nr_nonGeneralized_schemaVersion_AttrEClass + &quot; non-generalized and non-negated schemaVersion(s). Only &quot; + schemaVersion_AttrEClass_upperBound + &quot; non-generalized and non-negated schemaVersion(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sourceDocumentInformation" upperBound="-1" eType="//SourceDocumentInformation_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="externalReference" upperBound="-1" eType="//ExternalReferenceType_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="instanceHierarchy" upperBound="-1" eType="//InstanceHierarchy_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="interfaceClassLib" upperBound="-1" eType="//InterfaceClassLib_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="roleClassLib" upperBound="-1" eType="//RoleClassLib_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="systemUnitClassLib" upperBound="-1" eType="//SystemUnitClassLib_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="attributeTypeLib" upperBound="-1" eType="//AttributeLib_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="superiorStandardVersion_AttrEClass" upperBound="-1" eType="//CAEXFile_superiorStandardVersion_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="fileName_AttrEClass" upperBound="-1" eType="//CAEXFile_fileName_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="schemaVersion_AttrEClass" upperBound="-1" eType="//CAEXFile_schemaVersion_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CAEXObject" eSuperTypes="//CAEXBasicObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int iD_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_iD_AttrEClass = 0;&#xA;if(this.iD_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.iD_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_iD_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_iD_AttrEClass > iD_AttrEClass_upperBound &amp;&amp; iD_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;CAEXObject contains &quot; + nr_nonGeneralized_iD_AttrEClass + &quot; non-generalized and non-negated iD(s). Only &quot; + iD_AttrEClass_upperBound + &quot; non-generalized and non-negated iD(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int name_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_name_AttrEClass = 0;&#xA;if(this.name_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.name_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_name_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_name_AttrEClass > name_AttrEClass_upperBound &amp;&amp; name_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;CAEXObject contains &quot; + nr_nonGeneralized_name_AttrEClass + &quot; non-generalized and non-negated name(s). Only &quot; + name_AttrEClass_upperBound + &quot; non-generalized and non-negated name(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="iD_AttrEClass" upperBound="-1" eType="//CAEXObject_iD_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="name_AttrEClass" upperBound="-1" eType="//CAEXObject_name_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="ChangeMode">
    <eLiterals name="state"/>
    <eLiterals name="create" value="1"/>
    <eLiterals name="delete" value="2"/>
    <eLiterals name="change" value="3"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="ChangeModeObject" instanceClassName="org.eclipse.emf.common.util.Enumerator"/>
  <eClassifiers xsi:type="ecore:EClass" name="DocumentRoot" eSuperTypes="//RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int mixed_AttrEClass_upperBound = -1;&#xA;int nr_nonGeneralized_mixed_AttrEClass = 0;&#xA;if(this.mixed_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.mixed_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_mixed_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_mixed_AttrEClass > mixed_AttrEClass_upperBound &amp;&amp; mixed_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;DocumentRoot contains &quot; + nr_nonGeneralized_mixed_AttrEClass + &quot; non-generalized and non-negated mixed(s). Only &quot; + mixed_AttrEClass_upperBound + &quot; non-generalized and non-negated mixed(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="xMLNSPrefixMap" upperBound="-1" transient="true" containment="true" resolveProxies="false">
      <eType xsi:type="ecore:EClass" href="http://www.eclipse.org/emf/2002/Ecore#//EStringToStringMapEntry"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="xSISchemaLocation" upperBound="-1" transient="true" containment="true" resolveProxies="false">
      <eType xsi:type="ecore:EClass" href="http://www.eclipse.org/emf/2002/Ecore#//EStringToStringMapEntry"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="cAEXFile" upperBound="-1" eType="//CAEXFile_Containment_OrGroup" volatile="true" transient="true" derived="true" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="mixed_AttrEClass" upperBound="-1" eType="//DocumentRoot_mixed_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExternalInterface" eSuperTypes="//InterfaceClass //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int externalInterface_upperBound = -1;&#xA;int nr_nonTransitive_externalInterface = 0;&#xA;if(this.externalInterface != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.externalInterface) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_externalInterface++;&#xA;}&#xA;if(nr_nonTransitive_externalInterface > externalInterface_upperBound &amp;&amp; externalInterface_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;ExternalInterface contains &quot; + nr_nonTransitive_externalInterface + &quot; non-transitive, non-negated and non-generalized externalInterface(s). Only &quot; + externalInterface_upperBound + &quot; non-transitive, non-negated and non-generalized externalInterface(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="externalInterface" upperBound="-1" eType="//InterfaceClass_Containment_OrGroup" containment="true" resolveProxies="false"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExternalReferenceType" eSuperTypes="//CAEXBasicObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int alias_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_alias_AttrEClass = 0;&#xA;if(this.alias_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.alias_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_alias_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_alias_AttrEClass > alias_AttrEClass_upperBound &amp;&amp; alias_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;ExternalReferenceType contains &quot; + nr_nonGeneralized_alias_AttrEClass + &quot; non-generalized and non-negated alias(s). Only &quot; + alias_AttrEClass_upperBound + &quot; non-generalized and non-negated alias(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int path_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_path_AttrEClass = 0;&#xA;if(this.path_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.path_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_path_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_path_AttrEClass > path_AttrEClass_upperBound &amp;&amp; path_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;ExternalReferenceType contains &quot; + nr_nonGeneralized_path_AttrEClass + &quot; non-generalized and non-negated path(s). Only &quot; + path_AttrEClass_upperBound + &quot; non-generalized and non-negated path(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="alias_AttrEClass" upperBound="-1" eType="//ExternalReferenceType_alias_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="path_AttrEClass" upperBound="-1" eType="//ExternalReferenceType_path_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InstanceHierarchy" eSuperTypes="//CAEXObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int internalElement_upperBound = -1;&#xA;int nr_nonTransitive_internalElement = 0;&#xA;if(this.internalElement != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.internalElement) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_internalElement++;&#xA;}&#xA;if(nr_nonTransitive_internalElement > internalElement_upperBound &amp;&amp; internalElement_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;InstanceHierarchy contains &quot; + nr_nonTransitive_internalElement + &quot; non-transitive, non-negated and non-generalized internalElement(s). Only &quot; + internalElement_upperBound + &quot; non-transitive, non-negated and non-generalized internalElement(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="internalElement" upperBound="-1" eType="//InternalElement_Containment_OrGroup" containment="true" resolveProxies="false"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InterfaceClassLib" eSuperTypes="//CAEXObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int interfaceClass_upperBound = -1;&#xA;int nr_nonTransitive_interfaceClass = 0;&#xA;if(this.interfaceClass != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.interfaceClass) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_interfaceClass++;&#xA;}&#xA;if(nr_nonTransitive_interfaceClass > interfaceClass_upperBound &amp;&amp; interfaceClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;InterfaceClassLib contains &quot; + nr_nonTransitive_interfaceClass + &quot; non-transitive, non-negated and non-generalized interfaceClass(s). Only &quot; + interfaceClass_upperBound + &quot; non-transitive, non-negated and non-generalized interfaceClass(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="interfaceClass" upperBound="-1" eType="//InterfaceClass_Containment_OrGroup" containment="true" resolveProxies="false"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InterfaceClass" eSuperTypes="//CAEXObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int attribute_upperBound = -1;&#xA;int nr_nonTransitive_attribute = 0;&#xA;if(this.attribute != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.attribute) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_attribute++;&#xA;}&#xA;if(nr_nonTransitive_attribute > attribute_upperBound &amp;&amp; attribute_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;InterfaceClass contains &quot; + nr_nonTransitive_attribute + &quot; non-transitive, non-negated and non-generalized attribute(s). Only &quot; + attribute_upperBound + &quot; non-transitive, non-negated and non-generalized attribute(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int baseClass_upperBound = 1;&#xA;int nr_nonTransitive_baseClass = 0;&#xA;if(this.baseClass != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.baseClass) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_baseClass++;&#xA;}&#xA;if(nr_nonTransitive_baseClass > baseClass_upperBound &amp;&amp; baseClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;InterfaceClass contains &quot; + nr_nonTransitive_baseClass + &quot; non-transitive, non-negated and non-generalized baseClass(s). Only &quot; + baseClass_upperBound + &quot; non-transitive, non-negated and non-generalized baseClass(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int interfaceClass_upperBound = -1;&#xA;int nr_nonTransitive_interfaceClass = 0;&#xA;if(this.interfaceClass != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.interfaceClass) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_interfaceClass++;&#xA;}&#xA;if(nr_nonTransitive_interfaceClass > interfaceClass_upperBound &amp;&amp; interfaceClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;InterfaceClass contains &quot; + nr_nonTransitive_interfaceClass + &quot; non-transitive, non-negated and non-generalized interfaceClass(s). Only &quot; + interfaceClass_upperBound + &quot; non-transitive, non-negated and non-generalized interfaceClass(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int refBaseClassPath_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_refBaseClassPath_AttrEClass = 0;&#xA;if(this.refBaseClassPath_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.refBaseClassPath_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_refBaseClassPath_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_refBaseClassPath_AttrEClass > refBaseClassPath_AttrEClass_upperBound &amp;&amp; refBaseClassPath_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;InterfaceClass contains &quot; + nr_nonGeneralized_refBaseClassPath_AttrEClass + &quot; non-generalized and non-negated refBaseClassPath(s). Only &quot; + refBaseClassPath_AttrEClass_upperBound + &quot; non-generalized and non-negated refBaseClassPath(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="attribute" upperBound="-1" eType="//Attribute_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="baseClass" upperBound="-1" eType="//InterfaceClass_Reference_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="interfaceClass" upperBound="-1" eType="//InterfaceClass_Containment_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="refBaseClassPath_AttrEClass" upperBound="-1" eType="//InterfaceClass_refBaseClassPath_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InterfaceFamily" eSuperTypes="//InterfaceClass //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InterfaceIDMapping" eSuperTypes="//CAEXBasicObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int roleInterface_upperBound = 1;&#xA;int nr_nonTransitive_roleInterface = 0;&#xA;if(this.roleInterface != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.roleInterface) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_roleInterface++;&#xA;}&#xA;if(nr_nonTransitive_roleInterface > roleInterface_upperBound &amp;&amp; roleInterface_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;InterfaceIDMapping contains &quot; + nr_nonTransitive_roleInterface + &quot; non-transitive, non-negated and non-generalized roleInterface(s). Only &quot; + roleInterface_upperBound + &quot; non-transitive, non-negated and non-generalized roleInterface(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int systemUnitInterface_upperBound = 1;&#xA;int nr_nonTransitive_systemUnitInterface = 0;&#xA;if(this.systemUnitInterface != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.systemUnitInterface) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_systemUnitInterface++;&#xA;}&#xA;if(nr_nonTransitive_systemUnitInterface > systemUnitInterface_upperBound &amp;&amp; systemUnitInterface_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;InterfaceIDMapping contains &quot; + nr_nonTransitive_systemUnitInterface + &quot; non-transitive, non-negated and non-generalized systemUnitInterface(s). Only &quot; + systemUnitInterface_upperBound + &quot; non-transitive, non-negated and non-generalized systemUnitInterface(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int roleInterfaceID_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_roleInterfaceID_AttrEClass = 0;&#xA;if(this.roleInterfaceID_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.roleInterfaceID_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_roleInterfaceID_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_roleInterfaceID_AttrEClass > roleInterfaceID_AttrEClass_upperBound &amp;&amp; roleInterfaceID_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;InterfaceIDMapping contains &quot; + nr_nonGeneralized_roleInterfaceID_AttrEClass + &quot; non-generalized and non-negated roleInterfaceID(s). Only &quot; + roleInterfaceID_AttrEClass_upperBound + &quot; non-generalized and non-negated roleInterfaceID(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int systemUnitInterfaceID_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_systemUnitInterfaceID_AttrEClass = 0;&#xA;if(this.systemUnitInterfaceID_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.systemUnitInterfaceID_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_systemUnitInterfaceID_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_systemUnitInterfaceID_AttrEClass > systemUnitInterfaceID_AttrEClass_upperBound &amp;&amp; systemUnitInterfaceID_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;InterfaceIDMapping contains &quot; + nr_nonGeneralized_systemUnitInterfaceID_AttrEClass + &quot; non-generalized and non-negated systemUnitInterfaceID(s). Only &quot; + systemUnitInterfaceID_AttrEClass_upperBound + &quot; non-generalized and non-negated systemUnitInterfaceID(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="roleInterface" upperBound="-1" eType="//ExternalInterface_Reference_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="systemUnitInterface" upperBound="-1" eType="//ExternalInterface_Reference_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="roleInterfaceID_AttrEClass" upperBound="-1" eType="//InterfaceIDMapping_roleInterfaceID_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="systemUnitInterfaceID_AttrEClass" upperBound="-1" eType="//InterfaceIDMapping_systemUnitInterfaceID_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InternalElement" eSuperTypes="//SystemUnitClass //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int roleRequirements_upperBound = -1;&#xA;int nr_nonTransitive_roleRequirements = 0;&#xA;if(this.roleRequirements != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.roleRequirements) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_roleRequirements++;&#xA;}&#xA;if(nr_nonTransitive_roleRequirements > roleRequirements_upperBound &amp;&amp; roleRequirements_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;InternalElement contains &quot; + nr_nonTransitive_roleRequirements + &quot; non-transitive, non-negated and non-generalized roleRequirements(s). Only &quot; + roleRequirements_upperBound + &quot; non-transitive, non-negated and non-generalized roleRequirements(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int baseSystemUnit_upperBound = 1;&#xA;int nr_nonTransitive_baseSystemUnit = 0;&#xA;if(this.baseSystemUnit != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.baseSystemUnit) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_baseSystemUnit++;&#xA;}&#xA;if(nr_nonTransitive_baseSystemUnit > baseSystemUnit_upperBound &amp;&amp; baseSystemUnit_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;InternalElement contains &quot; + nr_nonTransitive_baseSystemUnit + &quot; non-transitive, non-negated and non-generalized baseSystemUnit(s). Only &quot; + baseSystemUnit_upperBound + &quot; non-transitive, non-negated and non-generalized baseSystemUnit(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int refBaseSystemUnitPath_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_refBaseSystemUnitPath_AttrEClass = 0;&#xA;if(this.refBaseSystemUnitPath_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.refBaseSystemUnitPath_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_refBaseSystemUnitPath_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_refBaseSystemUnitPath_AttrEClass > refBaseSystemUnitPath_AttrEClass_upperBound &amp;&amp; refBaseSystemUnitPath_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;InternalElement contains &quot; + nr_nonGeneralized_refBaseSystemUnitPath_AttrEClass + &quot; non-generalized and non-negated refBaseSystemUnitPath(s). Only &quot; + refBaseSystemUnitPath_AttrEClass_upperBound + &quot; non-generalized and non-negated refBaseSystemUnitPath(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="roleRequirements" upperBound="-1" eType="//RoleRequirements_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="baseSystemUnit" upperBound="-1" eType="//SystemUnitClass_Reference_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="refBaseSystemUnitPath_AttrEClass" upperBound="-1" eType="//InternalElement_refBaseSystemUnitPath_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InternalLink" eSuperTypes="//CAEXObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int partnerSideA_upperBound = 1;&#xA;int nr_nonTransitive_partnerSideA = 0;&#xA;if(this.partnerSideA != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.partnerSideA) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_partnerSideA++;&#xA;}&#xA;if(nr_nonTransitive_partnerSideA > partnerSideA_upperBound &amp;&amp; partnerSideA_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;InternalLink contains &quot; + nr_nonTransitive_partnerSideA + &quot; non-transitive, non-negated and non-generalized partnerSideA(s). Only &quot; + partnerSideA_upperBound + &quot; non-transitive, non-negated and non-generalized partnerSideA(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int partnerSideB_upperBound = 1;&#xA;int nr_nonTransitive_partnerSideB = 0;&#xA;if(this.partnerSideB != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.partnerSideB) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_partnerSideB++;&#xA;}&#xA;if(nr_nonTransitive_partnerSideB > partnerSideB_upperBound &amp;&amp; partnerSideB_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;InternalLink contains &quot; + nr_nonTransitive_partnerSideB + &quot; non-transitive, non-negated and non-generalized partnerSideB(s). Only &quot; + partnerSideB_upperBound + &quot; non-transitive, non-negated and non-generalized partnerSideB(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int refPartnerSideA_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_refPartnerSideA_AttrEClass = 0;&#xA;if(this.refPartnerSideA_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.refPartnerSideA_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_refPartnerSideA_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_refPartnerSideA_AttrEClass > refPartnerSideA_AttrEClass_upperBound &amp;&amp; refPartnerSideA_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;InternalLink contains &quot; + nr_nonGeneralized_refPartnerSideA_AttrEClass + &quot; non-generalized and non-negated refPartnerSideA(s). Only &quot; + refPartnerSideA_AttrEClass_upperBound + &quot; non-generalized and non-negated refPartnerSideA(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int refPartnerSideB_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_refPartnerSideB_AttrEClass = 0;&#xA;if(this.refPartnerSideB_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.refPartnerSideB_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_refPartnerSideB_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_refPartnerSideB_AttrEClass > refPartnerSideB_AttrEClass_upperBound &amp;&amp; refPartnerSideB_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;InternalLink contains &quot; + nr_nonGeneralized_refPartnerSideB_AttrEClass + &quot; non-generalized and non-negated refPartnerSideB(s). Only &quot; + refPartnerSideB_AttrEClass_upperBound + &quot; non-generalized and non-negated refPartnerSideB(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="partnerSideA" upperBound="-1" eType="//ExternalInterface_Reference_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="partnerSideB" upperBound="-1" eType="//ExternalInterface_Reference_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="refPartnerSideA_AttrEClass" upperBound="-1" eType="//InternalLink_refPartnerSideA_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="refPartnerSideB_AttrEClass" upperBound="-1" eType="//InternalLink_refPartnerSideB_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Mapping" eSuperTypes="//CAEXBasicObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int attributeNameMapping_upperBound = -1;&#xA;int nr_nonTransitive_attributeNameMapping = 0;&#xA;if(this.attributeNameMapping != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.attributeNameMapping) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_attributeNameMapping++;&#xA;}&#xA;if(nr_nonTransitive_attributeNameMapping > attributeNameMapping_upperBound &amp;&amp; attributeNameMapping_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Mapping contains &quot; + nr_nonTransitive_attributeNameMapping + &quot; non-transitive, non-negated and non-generalized attributeNameMapping(s). Only &quot; + attributeNameMapping_upperBound + &quot; non-transitive, non-negated and non-generalized attributeNameMapping(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int interfaceIDMapping_upperBound = -1;&#xA;int nr_nonTransitive_interfaceIDMapping = 0;&#xA;if(this.interfaceIDMapping != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.interfaceIDMapping) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_interfaceIDMapping++;&#xA;}&#xA;if(nr_nonTransitive_interfaceIDMapping > interfaceIDMapping_upperBound &amp;&amp; interfaceIDMapping_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Mapping contains &quot; + nr_nonTransitive_interfaceIDMapping + &quot; non-transitive, non-negated and non-generalized interfaceIDMapping(s). Only &quot; + interfaceIDMapping_upperBound + &quot; non-transitive, non-negated and non-generalized interfaceIDMapping(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="attributeNameMapping" upperBound="-1" eType="//AttributeNameMapping_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="interfaceIDMapping" upperBound="-1" eType="//InterfaceIDMapping_Containment_OrGroup" containment="true" resolveProxies="false"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NominalScaledType" eSuperTypes="//RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int requiredValue_AttrEClass_upperBound = -1;&#xA;int nr_nonGeneralized_requiredValue_AttrEClass = 0;&#xA;if(this.requiredValue_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.requiredValue_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_requiredValue_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_requiredValue_AttrEClass > requiredValue_AttrEClass_upperBound &amp;&amp; requiredValue_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;NominalScaledType contains &quot; + nr_nonGeneralized_requiredValue_AttrEClass + &quot; non-generalized and non-negated requiredValue(s). Only &quot; + requiredValue_AttrEClass_upperBound + &quot; non-generalized and non-negated requiredValue(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="requiredValue_AttrEClass" upperBound="-1" eType="//NominalScaledType_requiredValue_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OrdinalScaledType" eSuperTypes="//RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int requiredMaxValue_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_requiredMaxValue_AttrEClass = 0;&#xA;if(this.requiredMaxValue_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.requiredMaxValue_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_requiredMaxValue_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_requiredMaxValue_AttrEClass > requiredMaxValue_AttrEClass_upperBound &amp;&amp; requiredMaxValue_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;OrdinalScaledType contains &quot; + nr_nonGeneralized_requiredMaxValue_AttrEClass + &quot; non-generalized and non-negated requiredMaxValue(s). Only &quot; + requiredMaxValue_AttrEClass_upperBound + &quot; non-generalized and non-negated requiredMaxValue(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int requiredValue_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_requiredValue_AttrEClass = 0;&#xA;if(this.requiredValue_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.requiredValue_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_requiredValue_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_requiredValue_AttrEClass > requiredValue_AttrEClass_upperBound &amp;&amp; requiredValue_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;OrdinalScaledType contains &quot; + nr_nonGeneralized_requiredValue_AttrEClass + &quot; non-generalized and non-negated requiredValue(s). Only &quot; + requiredValue_AttrEClass_upperBound + &quot; non-generalized and non-negated requiredValue(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int requiredMinValue_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_requiredMinValue_AttrEClass = 0;&#xA;if(this.requiredMinValue_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.requiredMinValue_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_requiredMinValue_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_requiredMinValue_AttrEClass > requiredMinValue_AttrEClass_upperBound &amp;&amp; requiredMinValue_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;OrdinalScaledType contains &quot; + nr_nonGeneralized_requiredMinValue_AttrEClass + &quot; non-generalized and non-negated requiredMinValue(s). Only &quot; + requiredMinValue_AttrEClass_upperBound + &quot; non-generalized and non-negated requiredMinValue(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="requiredMaxValue_AttrEClass" upperBound="-1" eType="//OrdinalScaledType_requiredMaxValue_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="requiredValue_AttrEClass" upperBound="-1" eType="//OrdinalScaledType_requiredValue_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="requiredMinValue_AttrEClass" upperBound="-1" eType="//OrdinalScaledType_requiredMinValue_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RefSemantic" eSuperTypes="//CAEXBasicObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int correspondingAttributePath_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_correspondingAttributePath_AttrEClass = 0;&#xA;if(this.correspondingAttributePath_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.correspondingAttributePath_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_correspondingAttributePath_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_correspondingAttributePath_AttrEClass > correspondingAttributePath_AttrEClass_upperBound &amp;&amp; correspondingAttributePath_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;RefSemantic contains &quot; + nr_nonGeneralized_correspondingAttributePath_AttrEClass + &quot; non-generalized and non-negated correspondingAttributePath(s). Only &quot; + correspondingAttributePath_AttrEClass_upperBound + &quot; non-generalized and non-negated correspondingAttributePath(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="correspondingAttributePath_AttrEClass" upperBound="-1" eType="//RefSemantic_correspondingAttributePath_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RoleClassLib" eSuperTypes="//CAEXObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int roleClass_upperBound = -1;&#xA;int nr_nonTransitive_roleClass = 0;&#xA;if(this.roleClass != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.roleClass) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_roleClass++;&#xA;}&#xA;if(nr_nonTransitive_roleClass > roleClass_upperBound &amp;&amp; roleClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;RoleClassLib contains &quot; + nr_nonTransitive_roleClass + &quot; non-transitive, non-negated and non-generalized roleClass(s). Only &quot; + roleClass_upperBound + &quot; non-transitive, non-negated and non-generalized roleClass(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="roleClass" upperBound="-1" eType="//RoleClass_Containment_OrGroup" containment="true" resolveProxies="false"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RoleClass" eSuperTypes="//CAEXObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int attribute_upperBound = -1;&#xA;int nr_nonTransitive_attribute = 0;&#xA;if(this.attribute != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.attribute) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_attribute++;&#xA;}&#xA;if(nr_nonTransitive_attribute > attribute_upperBound &amp;&amp; attribute_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;RoleClass contains &quot; + nr_nonTransitive_attribute + &quot; non-transitive, non-negated and non-generalized attribute(s). Only &quot; + attribute_upperBound + &quot; non-transitive, non-negated and non-generalized attribute(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int externalInterface_upperBound = -1;&#xA;int nr_nonTransitive_externalInterface = 0;&#xA;if(this.externalInterface != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.externalInterface) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_externalInterface++;&#xA;}&#xA;if(nr_nonTransitive_externalInterface > externalInterface_upperBound &amp;&amp; externalInterface_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;RoleClass contains &quot; + nr_nonTransitive_externalInterface + &quot; non-transitive, non-negated and non-generalized externalInterface(s). Only &quot; + externalInterface_upperBound + &quot; non-transitive, non-negated and non-generalized externalInterface(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int baseClass_upperBound = 1;&#xA;int nr_nonTransitive_baseClass = 0;&#xA;if(this.baseClass != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.baseClass) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_baseClass++;&#xA;}&#xA;if(nr_nonTransitive_baseClass > baseClass_upperBound &amp;&amp; baseClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;RoleClass contains &quot; + nr_nonTransitive_baseClass + &quot; non-transitive, non-negated and non-generalized baseClass(s). Only &quot; + baseClass_upperBound + &quot; non-transitive, non-negated and non-generalized baseClass(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int roleClass_upperBound = -1;&#xA;int nr_nonTransitive_roleClass = 0;&#xA;if(this.roleClass != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.roleClass) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_roleClass++;&#xA;}&#xA;if(nr_nonTransitive_roleClass > roleClass_upperBound &amp;&amp; roleClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;RoleClass contains &quot; + nr_nonTransitive_roleClass + &quot; non-transitive, non-negated and non-generalized roleClass(s). Only &quot; + roleClass_upperBound + &quot; non-transitive, non-negated and non-generalized roleClass(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int refBaseClassPath_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_refBaseClassPath_AttrEClass = 0;&#xA;if(this.refBaseClassPath_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.refBaseClassPath_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_refBaseClassPath_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_refBaseClassPath_AttrEClass > refBaseClassPath_AttrEClass_upperBound &amp;&amp; refBaseClassPath_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;RoleClass contains &quot; + nr_nonGeneralized_refBaseClassPath_AttrEClass + &quot; non-generalized and non-negated refBaseClassPath(s). Only &quot; + refBaseClassPath_AttrEClass_upperBound + &quot; non-generalized and non-negated refBaseClassPath(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="attribute" upperBound="-1" eType="//Attribute_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="externalInterface" upperBound="-1" eType="//ExternalInterface_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="baseClass" upperBound="-1" eType="//RoleClass_Reference_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="roleClass" upperBound="-1" eType="//RoleClass_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="refBaseClassPath_AttrEClass" upperBound="-1" eType="//RoleClass_refBaseClassPath_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RoleFamily" eSuperTypes="//RoleClass //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RoleRequirements" eSuperTypes="//CAEXBasicObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int attribute_upperBound = -1;&#xA;int nr_nonTransitive_attribute = 0;&#xA;if(this.attribute != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.attribute) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_attribute++;&#xA;}&#xA;if(nr_nonTransitive_attribute > attribute_upperBound &amp;&amp; attribute_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;RoleRequirements contains &quot; + nr_nonTransitive_attribute + &quot; non-transitive, non-negated and non-generalized attribute(s). Only &quot; + attribute_upperBound + &quot; non-transitive, non-negated and non-generalized attribute(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int externalInterface_upperBound = -1;&#xA;int nr_nonTransitive_externalInterface = 0;&#xA;if(this.externalInterface != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.externalInterface) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_externalInterface++;&#xA;}&#xA;if(nr_nonTransitive_externalInterface > externalInterface_upperBound &amp;&amp; externalInterface_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;RoleRequirements contains &quot; + nr_nonTransitive_externalInterface + &quot; non-transitive, non-negated and non-generalized externalInterface(s). Only &quot; + externalInterface_upperBound + &quot; non-transitive, non-negated and non-generalized externalInterface(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int mappingObject_upperBound = 1;&#xA;int nr_nonTransitive_mappingObject = 0;&#xA;if(this.mappingObject != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.mappingObject) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_mappingObject++;&#xA;}&#xA;if(nr_nonTransitive_mappingObject > mappingObject_upperBound &amp;&amp; mappingObject_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;RoleRequirements contains &quot; + nr_nonTransitive_mappingObject + &quot; non-transitive, non-negated and non-generalized mappingObject(s). Only &quot; + mappingObject_upperBound + &quot; non-transitive, non-negated and non-generalized mappingObject(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int roleClass_upperBound = 1;&#xA;int nr_nonTransitive_roleClass = 0;&#xA;if(this.roleClass != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.roleClass) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_roleClass++;&#xA;}&#xA;if(nr_nonTransitive_roleClass > roleClass_upperBound &amp;&amp; roleClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;RoleRequirements contains &quot; + nr_nonTransitive_roleClass + &quot; non-transitive, non-negated and non-generalized roleClass(s). Only &quot; + roleClass_upperBound + &quot; non-transitive, non-negated and non-generalized roleClass(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="attribute" upperBound="-1" eType="//Attribute_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="externalInterface" upperBound="-1" eType="//InterfaceClass_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="mappingObject" upperBound="-1" eType="//Mapping_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="roleClass" upperBound="-1" eType="//RoleClass_Reference_OrGroup" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SourceDocumentInformation" eSuperTypes="//RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int lastWritingDateTime_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_lastWritingDateTime_AttrEClass = 0;&#xA;if(this.lastWritingDateTime_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.lastWritingDateTime_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_lastWritingDateTime_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_lastWritingDateTime_AttrEClass > lastWritingDateTime_AttrEClass_upperBound &amp;&amp; lastWritingDateTime_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SourceDocumentInformation contains &quot; + nr_nonGeneralized_lastWritingDateTime_AttrEClass + &quot; non-generalized and non-negated lastWritingDateTime(s). Only &quot; + lastWritingDateTime_AttrEClass_upperBound + &quot; non-generalized and non-negated lastWritingDateTime(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int originID_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_originID_AttrEClass = 0;&#xA;if(this.originID_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.originID_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_originID_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_originID_AttrEClass > originID_AttrEClass_upperBound &amp;&amp; originID_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SourceDocumentInformation contains &quot; + nr_nonGeneralized_originID_AttrEClass + &quot; non-generalized and non-negated originID(s). Only &quot; + originID_AttrEClass_upperBound + &quot; non-generalized and non-negated originID(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int originName_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_originName_AttrEClass = 0;&#xA;if(this.originName_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.originName_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_originName_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_originName_AttrEClass > originName_AttrEClass_upperBound &amp;&amp; originName_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SourceDocumentInformation contains &quot; + nr_nonGeneralized_originName_AttrEClass + &quot; non-generalized and non-negated originName(s). Only &quot; + originName_AttrEClass_upperBound + &quot; non-generalized and non-negated originName(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int originProjectID_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_originProjectID_AttrEClass = 0;&#xA;if(this.originProjectID_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.originProjectID_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_originProjectID_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_originProjectID_AttrEClass > originProjectID_AttrEClass_upperBound &amp;&amp; originProjectID_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SourceDocumentInformation contains &quot; + nr_nonGeneralized_originProjectID_AttrEClass + &quot; non-generalized and non-negated originProjectID(s). Only &quot; + originProjectID_AttrEClass_upperBound + &quot; non-generalized and non-negated originProjectID(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int originProjectTitle_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_originProjectTitle_AttrEClass = 0;&#xA;if(this.originProjectTitle_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.originProjectTitle_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_originProjectTitle_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_originProjectTitle_AttrEClass > originProjectTitle_AttrEClass_upperBound &amp;&amp; originProjectTitle_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SourceDocumentInformation contains &quot; + nr_nonGeneralized_originProjectTitle_AttrEClass + &quot; non-generalized and non-negated originProjectTitle(s). Only &quot; + originProjectTitle_AttrEClass_upperBound + &quot; non-generalized and non-negated originProjectTitle(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int originRelease_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_originRelease_AttrEClass = 0;&#xA;if(this.originRelease_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.originRelease_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_originRelease_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_originRelease_AttrEClass > originRelease_AttrEClass_upperBound &amp;&amp; originRelease_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SourceDocumentInformation contains &quot; + nr_nonGeneralized_originRelease_AttrEClass + &quot; non-generalized and non-negated originRelease(s). Only &quot; + originRelease_AttrEClass_upperBound + &quot; non-generalized and non-negated originRelease(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int originVendor_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_originVendor_AttrEClass = 0;&#xA;if(this.originVendor_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.originVendor_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_originVendor_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_originVendor_AttrEClass > originVendor_AttrEClass_upperBound &amp;&amp; originVendor_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SourceDocumentInformation contains &quot; + nr_nonGeneralized_originVendor_AttrEClass + &quot; non-generalized and non-negated originVendor(s). Only &quot; + originVendor_AttrEClass_upperBound + &quot; non-generalized and non-negated originVendor(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int originVendorURL_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_originVendorURL_AttrEClass = 0;&#xA;if(this.originVendorURL_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.originVendorURL_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_originVendorURL_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_originVendorURL_AttrEClass > originVendorURL_AttrEClass_upperBound &amp;&amp; originVendorURL_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SourceDocumentInformation contains &quot; + nr_nonGeneralized_originVendorURL_AttrEClass + &quot; non-generalized and non-negated originVendorURL(s). Only &quot; + originVendorURL_AttrEClass_upperBound + &quot; non-generalized and non-negated originVendorURL(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int originVersion_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_originVersion_AttrEClass = 0;&#xA;if(this.originVersion_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.originVersion_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_originVersion_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_originVersion_AttrEClass > originVersion_AttrEClass_upperBound &amp;&amp; originVersion_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SourceDocumentInformation contains &quot; + nr_nonGeneralized_originVersion_AttrEClass + &quot; non-generalized and non-negated originVersion(s). Only &quot; + originVersion_AttrEClass_upperBound + &quot; non-generalized and non-negated originVersion(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="lastWritingDateTime_AttrEClass" upperBound="-1" eType="//SourceDocumentInformation_lastWritingDateTime_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="originID_AttrEClass" upperBound="-1" eType="//SourceDocumentInformation_originID_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="originName_AttrEClass" upperBound="-1" eType="//SourceDocumentInformation_originName_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="originProjectID_AttrEClass" upperBound="-1" eType="//SourceDocumentInformation_originProjectID_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="originProjectTitle_AttrEClass" upperBound="-1" eType="//SourceDocumentInformation_originProjectTitle_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="originRelease_AttrEClass" upperBound="-1" eType="//SourceDocumentInformation_originRelease_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="originVendor_AttrEClass" upperBound="-1" eType="//SourceDocumentInformation_originVendor_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="originVendorURL_AttrEClass" upperBound="-1" eType="//SourceDocumentInformation_originVendorURL_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="originVersion_AttrEClass" upperBound="-1" eType="//SourceDocumentInformation_originVersion_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SupportedRoleClass" eSuperTypes="//CAEXBasicObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int mappingObject_upperBound = 1;&#xA;int nr_nonTransitive_mappingObject = 0;&#xA;if(this.mappingObject != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.mappingObject) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_mappingObject++;&#xA;}&#xA;if(nr_nonTransitive_mappingObject > mappingObject_upperBound &amp;&amp; mappingObject_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SupportedRoleClass contains &quot; + nr_nonTransitive_mappingObject + &quot; non-transitive, non-negated and non-generalized mappingObject(s). Only &quot; + mappingObject_upperBound + &quot; non-transitive, non-negated and non-generalized mappingObject(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int roleClass_upperBound = 1;&#xA;int nr_nonTransitive_roleClass = 0;&#xA;if(this.roleClass != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.roleClass) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_roleClass++;&#xA;}&#xA;if(nr_nonTransitive_roleClass > roleClass_upperBound &amp;&amp; roleClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SupportedRoleClass contains &quot; + nr_nonTransitive_roleClass + &quot; non-transitive, non-negated and non-generalized roleClass(s). Only &quot; + roleClass_upperBound + &quot; non-transitive, non-negated and non-generalized roleClass(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int refRoleClassPath_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_refRoleClassPath_AttrEClass = 0;&#xA;if(this.refRoleClassPath_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.refRoleClassPath_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_refRoleClassPath_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_refRoleClassPath_AttrEClass > refRoleClassPath_AttrEClass_upperBound &amp;&amp; refRoleClassPath_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SupportedRoleClass contains &quot; + nr_nonGeneralized_refRoleClassPath_AttrEClass + &quot; non-generalized and non-negated refRoleClassPath(s). Only &quot; + refRoleClassPath_AttrEClass_upperBound + &quot; non-generalized and non-negated refRoleClassPath(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="mappingObject" upperBound="-1" eType="//Mapping_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="roleClass" upperBound="-1" eType="//RoleClass_Reference_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="refRoleClassPath_AttrEClass" upperBound="-1" eType="//SupportedRoleClass_refRoleClassPath_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SystemUnitClassLib" eSuperTypes="//CAEXObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int systemUnitClass_upperBound = -1;&#xA;int nr_nonTransitive_systemUnitClass = 0;&#xA;if(this.systemUnitClass != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.systemUnitClass) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_systemUnitClass++;&#xA;}&#xA;if(nr_nonTransitive_systemUnitClass > systemUnitClass_upperBound &amp;&amp; systemUnitClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SystemUnitClassLib contains &quot; + nr_nonTransitive_systemUnitClass + &quot; non-transitive, non-negated and non-generalized systemUnitClass(s). Only &quot; + systemUnitClass_upperBound + &quot; non-transitive, non-negated and non-generalized systemUnitClass(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="systemUnitClass" upperBound="-1" eType="//SystemUnitClass_Containment_OrGroup" containment="true" resolveProxies="false"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SystemUnitClass" eSuperTypes="//CAEXObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int attribute_upperBound = -1;&#xA;int nr_nonTransitive_attribute = 0;&#xA;if(this.attribute != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.attribute) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_attribute++;&#xA;}&#xA;if(nr_nonTransitive_attribute > attribute_upperBound &amp;&amp; attribute_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SystemUnitClass contains &quot; + nr_nonTransitive_attribute + &quot; non-transitive, non-negated and non-generalized attribute(s). Only &quot; + attribute_upperBound + &quot; non-transitive, non-negated and non-generalized attribute(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int externalInterface_upperBound = -1;&#xA;int nr_nonTransitive_externalInterface = 0;&#xA;if(this.externalInterface != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.externalInterface) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_externalInterface++;&#xA;}&#xA;if(nr_nonTransitive_externalInterface > externalInterface_upperBound &amp;&amp; externalInterface_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SystemUnitClass contains &quot; + nr_nonTransitive_externalInterface + &quot; non-transitive, non-negated and non-generalized externalInterface(s). Only &quot; + externalInterface_upperBound + &quot; non-transitive, non-negated and non-generalized externalInterface(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int internalElement_upperBound = -1;&#xA;int nr_nonTransitive_internalElement = 0;&#xA;if(this.internalElement != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.internalElement) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_internalElement++;&#xA;}&#xA;if(nr_nonTransitive_internalElement > internalElement_upperBound &amp;&amp; internalElement_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SystemUnitClass contains &quot; + nr_nonTransitive_internalElement + &quot; non-transitive, non-negated and non-generalized internalElement(s). Only &quot; + internalElement_upperBound + &quot; non-transitive, non-negated and non-generalized internalElement(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int supportedRoleClass_upperBound = -1;&#xA;int nr_nonTransitive_supportedRoleClass = 0;&#xA;if(this.supportedRoleClass != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.supportedRoleClass) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_supportedRoleClass++;&#xA;}&#xA;if(nr_nonTransitive_supportedRoleClass > supportedRoleClass_upperBound &amp;&amp; supportedRoleClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SystemUnitClass contains &quot; + nr_nonTransitive_supportedRoleClass + &quot; non-transitive, non-negated and non-generalized supportedRoleClass(s). Only &quot; + supportedRoleClass_upperBound + &quot; non-transitive, non-negated and non-generalized supportedRoleClass(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int internalLink_upperBound = -1;&#xA;int nr_nonTransitive_internalLink = 0;&#xA;if(this.internalLink != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.internalLink) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_internalLink++;&#xA;}&#xA;if(nr_nonTransitive_internalLink > internalLink_upperBound &amp;&amp; internalLink_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SystemUnitClass contains &quot; + nr_nonTransitive_internalLink + &quot; non-transitive, non-negated and non-generalized internalLink(s). Only &quot; + internalLink_upperBound + &quot; non-transitive, non-negated and non-generalized internalLink(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int baseClass_upperBound = 1;&#xA;int nr_nonTransitive_baseClass = 0;&#xA;if(this.baseClass != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.baseClass) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_baseClass++;&#xA;}&#xA;if(nr_nonTransitive_baseClass > baseClass_upperBound &amp;&amp; baseClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SystemUnitClass contains &quot; + nr_nonTransitive_baseClass + &quot; non-transitive, non-negated and non-generalized baseClass(s). Only &quot; + baseClass_upperBound + &quot; non-transitive, non-negated and non-generalized baseClass(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int systemUnitClass_upperBound = -1;&#xA;int nr_nonTransitive_systemUnitClass = 0;&#xA;if(this.systemUnitClass != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.systemUnitClass) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_systemUnitClass++;&#xA;}&#xA;if(nr_nonTransitive_systemUnitClass > systemUnitClass_upperBound &amp;&amp; systemUnitClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SystemUnitClass contains &quot; + nr_nonTransitive_systemUnitClass + &quot; non-transitive, non-negated and non-generalized systemUnitClass(s). Only &quot; + systemUnitClass_upperBound + &quot; non-transitive, non-negated and non-generalized systemUnitClass(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int refBaseClassPath_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_refBaseClassPath_AttrEClass = 0;&#xA;if(this.refBaseClassPath_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.refBaseClassPath_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_refBaseClassPath_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_refBaseClassPath_AttrEClass > refBaseClassPath_AttrEClass_upperBound &amp;&amp; refBaseClassPath_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;SystemUnitClass contains &quot; + nr_nonGeneralized_refBaseClassPath_AttrEClass + &quot; non-generalized and non-negated refBaseClassPath(s). Only &quot; + refBaseClassPath_AttrEClass_upperBound + &quot; non-generalized and non-negated refBaseClassPath(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="attribute" upperBound="-1" eType="//Attribute_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="externalInterface" upperBound="-1" eType="//InterfaceClass_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="internalElement" upperBound="-1" eType="//InternalElement_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="supportedRoleClass" upperBound="-1" eType="//SupportedRoleClass_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="internalLink" upperBound="-1" eType="//InternalLink_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="baseClass" upperBound="-1" eType="//SystemUnitClass_Reference_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="systemUnitClass" upperBound="-1" eType="//SystemUnitClass_Containment_OrGroup" containment="true" resolveProxies="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="refBaseClassPath_AttrEClass" upperBound="-1" eType="//SystemUnitClass_refBaseClassPath_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SystemUnitFamily" eSuperTypes="//SystemUnitClass //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="UnknownType" eSuperTypes="//RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int requirements_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_requirements_AttrEClass = 0;&#xA;if(this.requirements_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.requirements_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_requirements_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_requirements_AttrEClass > requirements_AttrEClass_upperBound &amp;&amp; requirements_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;UnknownType contains &quot; + nr_nonGeneralized_requirements_AttrEClass + &quot; non-generalized and non-negated requirements(s). Only &quot; + requirements_AttrEClass_upperBound + &quot; non-generalized and non-negated requirements(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="requirements_AttrEClass" upperBound="-1" eType="//UnknownType_requirements_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Copyright" eSuperTypes="//RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int value_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_value_AttrEClass = 0;&#xA;if(this.value_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.value_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_value_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_value_AttrEClass > value_AttrEClass_upperBound &amp;&amp; value_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Copyright contains &quot; + nr_nonGeneralized_value_AttrEClass + &quot; non-generalized and non-negated value(s). Only &quot; + value_AttrEClass_upperBound + &quot; non-generalized and non-negated value(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="value_AttrEClass" upperBound="-1" eType="//Copyright_value_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="changeMode_AttrEClass" eType="//Copyright_changeMode_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Description" eSuperTypes="//RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int value_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_value_AttrEClass = 0;&#xA;if(this.value_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.value_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_value_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_value_AttrEClass > value_AttrEClass_upperBound &amp;&amp; value_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Description contains &quot; + nr_nonGeneralized_value_AttrEClass + &quot; non-generalized and non-negated value(s). Only &quot; + value_AttrEClass_upperBound + &quot; non-generalized and non-negated value(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="value_AttrEClass" upperBound="-1" eType="//Description_value_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="changeMode_AttrEClass" eType="//Description_changeMode_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Revision" eSuperTypes="//CAEXBasicObject //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int revisionDate_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_revisionDate_AttrEClass = 0;&#xA;if(this.revisionDate_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.revisionDate_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_revisionDate_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_revisionDate_AttrEClass > revisionDate_AttrEClass_upperBound &amp;&amp; revisionDate_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Revision contains &quot; + nr_nonGeneralized_revisionDate_AttrEClass + &quot; non-generalized and non-negated revisionDate(s). Only &quot; + revisionDate_AttrEClass_upperBound + &quot; non-generalized and non-negated revisionDate(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int oldVersion_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_oldVersion_AttrEClass = 0;&#xA;if(this.oldVersion_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.oldVersion_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_oldVersion_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_oldVersion_AttrEClass > oldVersion_AttrEClass_upperBound &amp;&amp; oldVersion_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Revision contains &quot; + nr_nonGeneralized_oldVersion_AttrEClass + &quot; non-generalized and non-negated oldVersion(s). Only &quot; + oldVersion_AttrEClass_upperBound + &quot; non-generalized and non-negated oldVersion(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int newVersion_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_newVersion_AttrEClass = 0;&#xA;if(this.newVersion_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.newVersion_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_newVersion_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_newVersion_AttrEClass > newVersion_AttrEClass_upperBound &amp;&amp; newVersion_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Revision contains &quot; + nr_nonGeneralized_newVersion_AttrEClass + &quot; non-generalized and non-negated newVersion(s). Only &quot; + newVersion_AttrEClass_upperBound + &quot; non-generalized and non-negated newVersion(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int authorName_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_authorName_AttrEClass = 0;&#xA;if(this.authorName_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.authorName_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_authorName_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_authorName_AttrEClass > authorName_AttrEClass_upperBound &amp;&amp; authorName_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Revision contains &quot; + nr_nonGeneralized_authorName_AttrEClass + &quot; non-generalized and non-negated authorName(s). Only &quot; + authorName_AttrEClass_upperBound + &quot; non-generalized and non-negated authorName(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int comment_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_comment_AttrEClass = 0;&#xA;if(this.comment_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.comment_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_comment_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_comment_AttrEClass > comment_AttrEClass_upperBound &amp;&amp; comment_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Revision contains &quot; + nr_nonGeneralized_comment_AttrEClass + &quot; non-generalized and non-negated comment(s). Only &quot; + comment_AttrEClass_upperBound + &quot; non-generalized and non-negated comment(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="revisionDate_AttrEClass" upperBound="-1" eType="//Revision_revisionDate_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="oldVersion_AttrEClass" upperBound="-1" eType="//Revision_oldVersion_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="newVersion_AttrEClass" upperBound="-1" eType="//Revision_newVersion_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="authorName_AttrEClass" upperBound="-1" eType="//Revision_authorName_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="comment_AttrEClass" upperBound="-1" eType="//Revision_comment_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Version" eSuperTypes="//RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int value_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_value_AttrEClass = 0;&#xA;if(this.value_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.value_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_value_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_value_AttrEClass > value_AttrEClass_upperBound &amp;&amp; value_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Version contains &quot; + nr_nonGeneralized_value_AttrEClass + &quot; non-generalized and non-negated value(s). Only &quot; + value_AttrEClass_upperBound + &quot; non-generalized and non-negated value(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="value_AttrEClass" upperBound="-1" eType="//Version_value_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="changeMode_AttrEClass" eType="//Version_changeMode_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AdditionalInformation" eSuperTypes="//GenericElement //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Element" eSuperTypes="//RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int name_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_name_AttrEClass = 0;&#xA;if(this.name_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.name_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_name_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_name_AttrEClass > name_AttrEClass_upperBound &amp;&amp; name_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Element contains &quot; + nr_nonGeneralized_name_AttrEClass + &quot; non-generalized and non-negated name(s). Only &quot; + name_AttrEClass_upperBound + &quot; non-generalized and non-negated name(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int value_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_value_AttrEClass = 0;&#xA;if(this.value_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.value_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_value_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_value_AttrEClass > value_AttrEClass_upperBound &amp;&amp; value_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Element contains &quot; + nr_nonGeneralized_value_AttrEClass + &quot; non-generalized and non-negated value(s). Only &quot; + value_AttrEClass_upperBound + &quot; non-generalized and non-negated value(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="name_AttrEClass" upperBound="-1" eType="//Element_name_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="value_AttrEClass" upperBound="-1" eType="//Element_value_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="GenericElement" eSuperTypes="//Element //RootClass">
    <eAnnotations source="http:///org/eclipse/emf/ecore/util/ExtendedMetaData">
      <details key="kind" value="empty"/>
    </eAnnotations>
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int nestedElements_upperBound = -1;&#xA;int nr_nonTransitive_nestedElements = 0;&#xA;if(this.nestedElements != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.nestedElements) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_nestedElements++;&#xA;}&#xA;if(nr_nonTransitive_nestedElements > nestedElements_upperBound &amp;&amp; nestedElements_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;GenericElement contains &quot; + nr_nonTransitive_nestedElements + &quot; non-transitive, non-negated and non-generalized nestedElements(s). Only &quot; + nestedElements_upperBound + &quot; non-transitive, non-negated and non-generalized nestedElements(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int attributes_upperBound = -1;&#xA;int nr_nonTransitive_attributes = 0;&#xA;if(this.attributes != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.attributes) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_attributes++;&#xA;}&#xA;if(nr_nonTransitive_attributes > attributes_upperBound &amp;&amp; attributes_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;GenericElement contains &quot; + nr_nonTransitive_attributes + &quot; non-transitive, non-negated and non-generalized attributes(s). Only &quot; + attributes_upperBound + &quot; non-transitive, non-negated and non-generalized attributes(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int elementFeatureMap_AttrEClass_upperBound = -1;&#xA;int nr_nonGeneralized_elementFeatureMap_AttrEClass = 0;&#xA;if(this.elementFeatureMap_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.elementFeatureMap_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_elementFeatureMap_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_elementFeatureMap_AttrEClass > elementFeatureMap_AttrEClass_upperBound &amp;&amp; elementFeatureMap_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;GenericElement contains &quot; + nr_nonGeneralized_elementFeatureMap_AttrEClass + &quot; non-generalized and non-negated elementFeatureMap(s). Only &quot; + elementFeatureMap_AttrEClass_upperBound + &quot; non-generalized and non-negated elementFeatureMap(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int attributeFeatureMap_AttrEClass_upperBound = -1;&#xA;int nr_nonGeneralized_attributeFeatureMap_AttrEClass = 0;&#xA;if(this.attributeFeatureMap_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.attributeFeatureMap_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_attributeFeatureMap_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_attributeFeatureMap_AttrEClass > attributeFeatureMap_AttrEClass_upperBound &amp;&amp; attributeFeatureMap_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;GenericElement contains &quot; + nr_nonGeneralized_attributeFeatureMap_AttrEClass + &quot; non-generalized and non-negated attributeFeatureMap(s). Only &quot; + attributeFeatureMap_AttrEClass_upperBound + &quot; non-generalized and non-negated attributeFeatureMap(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="nestedElements" upperBound="-1" eType="//GenericElement_Containment_OrGroup" containment="true">
      <eAnnotations source="http:///org/eclipse/emf/ecore/util/ExtendedMetaData">
        <details key="kind" value="empty"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="attributes" upperBound="-1" eType="//GenericAttribute_Containment_OrGroup" containment="true">
      <eAnnotations source="http:///org/eclipse/emf/ecore/util/ExtendedMetaData">
        <details key="kind" value="empty"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="elementFeatureMap_AttrEClass" upperBound="-1" eType="//GenericElement_elementFeatureMap_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="attributeFeatureMap_AttrEClass" upperBound="-1" eType="//GenericElement_attributeFeatureMap_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="GenericAttribute" eSuperTypes="//Element //RootClass">
    <eAnnotations source="http:///org/eclipse/emf/ecore/util/ExtendedMetaData">
      <details key="kind" value="empty"/>
    </eAnnotations>
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NominalScaledType_requiredValue_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_BitOperator" abstract="true" eSuperTypes="//Integer_ExpressionOperator //BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Integer"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//Integer_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_Type" abstract="true" eSuperTypes="//Type //Object_Type">
    <eAnnotations source="information">
      <details key="type" value="CharSequence"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Copyright_value_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="equalsIgnoreCase_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="equalsIgnoreCase"/>
      <details key="literal" value=".equalsIgnoreCase"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.equalsIgnoreCase&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(anotherString);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="anotherString" lowerBound="1" eType="//String_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Count_AggregationOperator" eSuperTypes="//CountingAggregationOperator //Integer_EvaluationOperation_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Integer"/>
      <details key="literal" value="count"/>
      <details key="operatorXTextLiteral" value="count"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;count&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Sum_AggregationOperator_Double" eSuperTypes="//CalculatingAggregationOperator //Double_EvaluationOperation_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Double"/>
      <details key="literal" value="sum"/>
      <details key="operatorXTextLiteral" value="sum_Double"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;sum&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(calculateable);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="calculateable" lowerBound="1" eType="//Double_CalculateableParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Double_smallerThan_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Double_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="smallerThan"/>
      <details key="literal" value="&lt;"/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&lt;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RoleClassLib_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//RoleClassLib" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_Argument" abstract="true" eSuperTypes="//FunctionalArgument //String_FunctionalType"/>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_PrimitiveArgument" eSuperTypes="//Boolean_Argument //PrimitiveArgument">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="//Boolean"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SupportedRoleClass_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//SupportedRoleClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeDataType_CalculateableParameter" eSuperTypes="//AttributeDataType_Type //CalculateableParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Boolean_hashCode_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_Boolean_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="hashCode"/>
      <details key="literal" value=".hashCode"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.hashCode&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Character_Type" abstract="true" eSuperTypes="//Type //Object_Type">
    <eAnnotations source="information">
      <details key="type" value="Character"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="SystemUnitClass_refBaseClassPath_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="toUpperCase_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="toUpperCase"/>
      <details key="literal" value=".toUpperCase"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.toUpperCase&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_Type" abstract="true" eSuperTypes="//Type //CharSequence_Type">
    <eAnnotations source="information">
      <details key="type" value="String"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InternalLink_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//InternalLink"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExternalInterface_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//ExternalInterface" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PrimitiveArgument" abstract="true" eSuperTypes="//FunctionalArgument"/>
  <eClassifiers xsi:type="ecore:EClass" name="EnumerationAttributeEClass" abstract="true" eSuperTypes="//AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="SourceDocumentInformation_originProjectID_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="indexOfChar_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="indexOfChar"/>
      <details key="literal" value=".indexOf"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.indexOf&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(ch);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ch" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_FunctionalType" abstract="true" eSuperTypes="//Boolean_Type //FunctionalType //NegatableElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//Boolean_FunctionalOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FunctionalOperator" abstract="true" eSuperTypes="//ExpressionOperator //TypedElement">
    <eOperations name="getLastOperator" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="qmm.FunctionalOperator operator = this;&#xA;while(operator.eGet(operator.eClass().getEStructuralFeature(&quot;operator&quot;)) != null){&#xA;    operator = (qmm.FunctionalOperator) operator.eGet(operator.eClass().getEStructuralFeature(&quot;operator&quot;));&#xA;}&#xA;return operator;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_ExpressionOperator" abstract="true" eSuperTypes="//ExpressionOperator //CharSequence_Operator">
    <eAnnotations source="information">
      <details key="type" value="CharSequence"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="GenericElement_elementFeatureMap_AttrEClass" eSuperTypes="//EFeatureMapEntry_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Or_BitOperator" eSuperTypes="//Object_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Object"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_AttributeEClass" abstract="true" eSuperTypes="//RegularAttributeEClass //String_CalculateableElement">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.operator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateCheckExpression(this.operator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//String_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeValueRequirement_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//AttributeValueRequirement" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_FunctionalOperator" abstract="true" eSuperTypes="//Operator //ExpressionOperator //Integer_Operator //Integer_ExpressionOperator //TypedElement //FunctionalOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="CountingAggregationOperator" abstract="true" eSuperTypes="//AggregationOperator">
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(countable);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="countable" lowerBound="1" eType="//CountableReferenceParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Element_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//Element" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CAEXObject_name_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Character_FunctionalParameter" eSuperTypes="//Character_Type //FunctionalParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_Or_BitOperator" eSuperTypes="//Integer_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Integer"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_FunctionalType" abstract="true" eSuperTypes="//Number_Type //FunctionalType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//Number_FunctionalOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ChangeMode_CalculateableElement" abstract="true" eSuperTypes="//ChangeMode_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="Copyright_changeMode_AttrEClass" eSuperTypes="//ChangeMode_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Double_And_BitOperator" eSuperTypes="//Double_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Double"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Boolean_equals_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_Boolean_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="equals"/>
      <details key="literal" value=".equals"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.equals&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(obj);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="obj" lowerBound="1" eType="//Object_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FunctionalParameter" abstract="true" eSuperTypes="//Parameter">
    <eStructuralFeatures xsi:type="ecore:EReference" name="argument" lowerBound="1" eType="//FunctionalArgument" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Element_value_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeDataType_FunctionalParameter" eSuperTypes="//AttributeDataType_Type //FunctionalParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Revision_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//Revision"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Or_BitOperator" eSuperTypes="//Number_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Number"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_CharSequence_toString_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_CharSequence_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="toString"/>
      <details key="literal" value=".toString"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.toString&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EFeatureMapEntry_CalculateableElementReferenceArgument" eSuperTypes="//CalculateableElement_ReferenceArgument //EFeatureMapEntry_FunctionalType">
    <eAnnotations source="information">
      <details key="functionalType" value="EFeatureMapEntry"/>
    </eAnnotations>
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="qmm.RootClass containingRootClass = null;&#xA;qmm.RootClass referencesRootClass = null;&#xA;qmm.AttributeEClass containingAttributeEClass = null;&#xA;qmm.AttributeEClass referencesAttributeEClass = null;&#xA;if(this.eContainer() != null &amp;&amp; this.reference != null){&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(eContainer != null &amp;&amp; !(eContainer instanceof qmm.RootClass)){&#xA;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.AttributeEClass){&#xA;&#x9;&#x9;&#x9;&#x9;containingAttributeEClass = (qmm.AttributeEClass)eContainer;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;containingRootClass = (qmm.RootClass)eContainer;&#xA;&#xA;&#x9;&#x9;eContainer = this.reference.eContainer();&#xA;&#x9;&#x9;while(eContainer != null &amp;&amp; !(eContainer instanceof qmm.RootClass)){&#xA;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;referencesRootClass = (qmm.RootClass)eContainer;&#xA;&#x9;&#x9;if(this.reference instanceof qmm.AttributeEClass) referencesAttributeEClass = (qmm.AttributeEClass)this.reference;&#xA;&#xA;&#x9;&#x9;if(containingAttributeEClass != null &amp;&amp; referencesAttributeEClass != null &amp;&amp; containingAttributeEClass == referencesAttributeEClass){  //self-reference in expression !&#xA;&#x9;&#x9;&#x9;String errorMessage = &quot;Self-reference in expression of attribute &quot; + containingAttributeEClass.getName() + &quot; detected. Self-references are not allowed!&quot;;&#xA;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if(containingRootClass != referencesRootClass){&#xA;&#x9;&#x9;&#x9;String errorMessage = &quot;The referenced element &quot; + this.reference + &quot; is contained by a different parent-element than the expression's parent-element. Cross-references are not supported.&quot;;&#xA;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if(this.reference instanceof qmm.NegatableElement &amp;&amp; ((qmm.NegatableElement)this.reference).isNegated())diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Reference to a negated element in &quot; + this + &quot; has been detected. References to negated elements are not allowed.&quot;,new Object[] { this }));&#xA;&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" lowerBound="1" eType="//EFeatureMapEntry_CalculateableElement"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExternalReferenceType_alias_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Number_And_BitOperator" eSuperTypes="//Number_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Number"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FunctionalType" abstract="true" eSuperTypes="//Type"/>
  <eClassifiers xsi:type="ecore:EClass" name="Containment_OrGroup" abstract="true" eSuperTypes="//OrGroup"/>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator" eSuperTypes="//InheritedFrom_CharSequence_to_String_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="hashCode"/>
      <details key="literal" value=".hashCode"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.hashCode&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EFeatureMapEntry_EvaluationOperation_Argument" abstract="true" eSuperTypes="//EvaluationOperation_Argument //EFeatureMapEntry_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="EFeatureMapEntry"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InheritedFrom_Object_to_Boolean_FunctionalOperator" abstract="true" eSuperTypes="//Boolean_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Object"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_CalculateableElement" abstract="true" eSuperTypes="//Integer_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="SystemUnitClassLib_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//SystemUnitClassLib" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeDataType_Or_BitOperator" eSuperTypes="//AttributeDataType_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="AttributeDataType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_FunctionalType" abstract="true" eSuperTypes="//Object_Type //FunctionalType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//Object_FunctionalOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SelectClause">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for(qmm.NamedElement n : namedElements){&#xA;&#x9;&#x9;&#x9;if(n instanceof qmm.NegatableElement &amp;&amp; ((qmm.NegatableElement)n).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;String errorMessage = n.getName() + &quot; is negated. It is not possible to select negated elements&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.SELECT_CLAUSE__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = n.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = n.getName() + &quot; is defined within an Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's atm not possible to reference nodes that are defined in Or-branches of other nodes.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.SELECT_CLAUSE__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = n.getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.SELECT_CLAUSE__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="namedElements" lowerBound="1" upperBound="-1" eType="//NamedElement"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DateTime_BitOperator" abstract="true" eSuperTypes="//DateTime_ExpressionOperator //BitOperator">
    <eAnnotations source="information">
      <details key="type" value="DateTime"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//DateTime_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DateTime_CalculateableElement" abstract="true" eSuperTypes="//DateTime_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="Double_FunctionalType" abstract="true" eSuperTypes="//Double_Type //FunctionalType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//Double_FunctionalOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_Original_FunctionalOperator" abstract="true" eSuperTypes="//Boolean_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Boolean"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DateTime_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="GenericAttribute_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//GenericAttribute"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Character_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="ChangeMode_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="Character_And_BitOperator" eSuperTypes="//Character_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Character"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Mapping_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//Mapping" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_CalculateableParameter" eSuperTypes="//CharSequence_Type //CalculateableParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Attribute_attributeDataType_AttrEClass" eSuperTypes="//AttributeDataType_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="EFeatureMapEntry_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="DateTime_Or_BitOperator" eSuperTypes="//DateTime_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="DateTime"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NamedElement" abstract="true">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if(this.name != null){&#xA;&#x9;&#x9;if(this.name.equals(&quot;elem&quot;)){&#xA;&#x9;&#x9;&#x9;String errorMessage=&quot;The name can't be 'elem'. 'elem' is a reserved literal.&quot;;&#xA;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.SELECT_CLAUSE__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if(this.name.startsWith(&quot;query_&quot;)){&#xA;&#x9;&#x9;&#x9;String errorMessage=&quot;The name can't start with 'query_'. 'query_' is a reserved literal prefix.&quot;;&#xA;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.SELECT_CLAUSE__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" iD="true">
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_FunctionalOperator" abstract="true" eSuperTypes="//Operator //ExpressionOperator //String_Operator //String_ExpressionOperator //TypedElement //FunctionalOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="SystemUnitClass_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//SystemUnitClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Object_FunctionalParameter" eSuperTypes="//Object_Type //FunctionalParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_FunctionalOperator" abstract="true" eSuperTypes="//Operator //ExpressionOperator //CharSequence_Operator //CharSequence_ExpressionOperator //TypedElement //FunctionalOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="RefSemantic_correspondingAttributePath_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Attribute_defaultValue_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="greaterThan_FunctionalOperator" eSuperTypes="//Number_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="greaterThan"/>
      <details key="literal" value=">"/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;>&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Min_AggregationOperator_Double" eSuperTypes="//CalculatingAggregationOperator //Double_EvaluationOperation_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Double"/>
      <details key="literal" value="min"/>
      <details key="operatorXTextLiteral" value="min_Double"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;min&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(calculateable);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="calculateable" lowerBound="1" eType="//Double_CalculateableParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_PrimitiveArgument" eSuperTypes="//Object_Argument //PrimitiveArgument">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="//Object"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="parseBoolean_FunctionalOperator" eSuperTypes="//Boolean_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="parseBoolean"/>
      <details key="literal" value=".parseBoolean"/>
      <details key="functionalOperatorType" value="Boolean"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.parseBoolean&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(s);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="s" lowerBound="1" eType="//String_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Number_hashCode_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_Number_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="hashCode"/>
      <details key="literal" value=".hashCode"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.hashCode&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeDataType_CalculateableElement" abstract="true" eSuperTypes="//AttributeDataType_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Type" abstract="true" eSuperTypes="//Type //Object_Type">
    <eAnnotations source="information">
      <details key="type" value="Number"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeDataType_And_BitOperator" eSuperTypes="//AttributeDataType_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="AttributeDataType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="substring_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="substring"/>
      <details key="literal" value=".substring"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.substring&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(startIndex);&#xA;parameterList.add(endIndex);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="startIndex" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="endIndex" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Max_AggregationOperator_Double" eSuperTypes="//CalculatingAggregationOperator //Double_EvaluationOperation_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Double"/>
      <details key="literal" value="max"/>
      <details key="operatorXTextLiteral" value="max_Double"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;max&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(calculateable);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="calculateable" lowerBound="1" eType="//Double_CalculateableParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="contains_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="contains"/>
      <details key="literal" value=".contains"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.contains&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(charSequence);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="charSequence" lowerBound="1" eType="//CharSequence_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InterfaceFamily_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//InterfaceFamily"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SourceDocumentInformation_lastWritingDateTime_AttrEClass" eSuperTypes="//DateTime_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Integer_smallerThan_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Integer_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="smallerThan"/>
      <details key="literal" value="&lt;"/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&lt;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_And_BitOperator" eSuperTypes="//String_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="String"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SystemUnitFamily_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//SystemUnitFamily"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Attribute_value_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="SourceDocumentInformation_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//SourceDocumentInformation" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_Or_BitOperator" eSuperTypes="//String_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="String"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeEClass" abstract="true" eSuperTypes="//NamedElement //NegatableElement //Countable"/>
  <eClassifiers xsi:type="ecore:EClass" name="OrdinalScaledType_requiredMinValue_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Type" abstract="true" eSuperTypes="//Type">
    <eAnnotations source="information">
      <details key="type" value="Object"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OrdinalScaledType_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//OrdinalScaledType" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="offsetByCodePoints_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="offsetByCodePoints"/>
      <details key="literal" value=".offsetByCodePoints"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.offsetByCodePoints&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(index);&#xA;parameterList.add(codePointOffset);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="index" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="codePointOffset" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="Object" instanceClassName="java.lang.Object"/>
  <eClassifiers xsi:type="ecore:EClass" name="Mapping_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//Mapping"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_EvaluationOperation_Argument" abstract="true" eSuperTypes="//EvaluationOperation_Argument //CharSequence_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="CharSequence"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DocumentRoot_mixed_AttrEClass" eSuperTypes="//EFeatureMapEntry_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="RoleClass_refBaseClassPath_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="EFeatureMapEntry_AttributeEClass" abstract="true" eSuperTypes="//RegularAttributeEClass //EFeatureMapEntry_CalculateableElement">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.operator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateCheckExpression(this.operator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//EFeatureMapEntry_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Reference_OrGroup" abstract="true" eSuperTypes="//OrGroup"/>
  <eClassifiers xsi:type="ecore:EClass" name="Parameter" abstract="true" eSuperTypes="//TypedElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="SupportedRoleClass_refRoleClassPath_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EDataType" name="Number" instanceClassName="java.lang.Number"/>
  <eClassifiers xsi:type="ecore:EClass" name="String_CalculateableElementReferenceArgument" eSuperTypes="//CalculateableElement_ReferenceArgument //String_FunctionalType">
    <eAnnotations source="information">
      <details key="functionalType" value="String"/>
    </eAnnotations>
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="qmm.RootClass containingRootClass = null;&#xA;qmm.RootClass referencesRootClass = null;&#xA;qmm.AttributeEClass containingAttributeEClass = null;&#xA;qmm.AttributeEClass referencesAttributeEClass = null;&#xA;if(this.eContainer() != null &amp;&amp; this.reference != null){&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(eContainer != null &amp;&amp; !(eContainer instanceof qmm.RootClass)){&#xA;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.AttributeEClass){&#xA;&#x9;&#x9;&#x9;&#x9;containingAttributeEClass = (qmm.AttributeEClass)eContainer;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;containingRootClass = (qmm.RootClass)eContainer;&#xA;&#xA;&#x9;&#x9;eContainer = this.reference.eContainer();&#xA;&#x9;&#x9;while(eContainer != null &amp;&amp; !(eContainer instanceof qmm.RootClass)){&#xA;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;referencesRootClass = (qmm.RootClass)eContainer;&#xA;&#x9;&#x9;if(this.reference instanceof qmm.AttributeEClass) referencesAttributeEClass = (qmm.AttributeEClass)this.reference;&#xA;&#xA;&#x9;&#x9;if(containingAttributeEClass != null &amp;&amp; referencesAttributeEClass != null &amp;&amp; containingAttributeEClass == referencesAttributeEClass){  //self-reference in expression !&#xA;&#x9;&#x9;&#x9;String errorMessage = &quot;Self-reference in expression of attribute &quot; + containingAttributeEClass.getName() + &quot; detected. Self-references are not allowed!&quot;;&#xA;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if(containingRootClass != referencesRootClass){&#xA;&#x9;&#x9;&#x9;String errorMessage = &quot;The referenced element &quot; + this.reference + &quot; is contained by a different parent-element than the expression's parent-element. Cross-references are not supported.&quot;;&#xA;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if(this.reference instanceof qmm.NegatableElement &amp;&amp; ((qmm.NegatableElement)this.reference).isNegated())diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Reference to a negated element in &quot; + this + &quot; has been detected. References to negated elements are not allowed.&quot;,new Object[] { this }));&#xA;&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" lowerBound="1" eType="//String_CalculateableElement"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="UnknownType_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//UnknownType" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OrdinalScaledType_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//OrdinalScaledType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Copyright_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//Copyright"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ChangeMode_EnumerationOperator" eSuperTypes="//EnumerationOperator //ChangeMode_Operator">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="argument" lowerBound="1" eType="//ChangeMode"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="or" eType="//ChangeMode_EnumerationOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_CalculateableParameter" eSuperTypes="//Number_Type //CalculateableParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Original_FunctionalOperator" abstract="true" eSuperTypes="//Number_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Number"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Argument" abstract="true" eSuperTypes="//TypedElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeLib_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//AttributeLib" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_FunctionalParameter" eSuperTypes="//Double_Type //FunctionalParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeDataType_CalculateableElementReferenceArgument" eSuperTypes="//CalculateableElement_ReferenceArgument //AttributeDataType_FunctionalType">
    <eAnnotations source="information">
      <details key="functionalType" value="AttributeDataType"/>
    </eAnnotations>
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="qmm.RootClass containingRootClass = null;&#xA;qmm.RootClass referencesRootClass = null;&#xA;qmm.AttributeEClass containingAttributeEClass = null;&#xA;qmm.AttributeEClass referencesAttributeEClass = null;&#xA;if(this.eContainer() != null &amp;&amp; this.reference != null){&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(eContainer != null &amp;&amp; !(eContainer instanceof qmm.RootClass)){&#xA;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.AttributeEClass){&#xA;&#x9;&#x9;&#x9;&#x9;containingAttributeEClass = (qmm.AttributeEClass)eContainer;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;containingRootClass = (qmm.RootClass)eContainer;&#xA;&#xA;&#x9;&#x9;eContainer = this.reference.eContainer();&#xA;&#x9;&#x9;while(eContainer != null &amp;&amp; !(eContainer instanceof qmm.RootClass)){&#xA;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;referencesRootClass = (qmm.RootClass)eContainer;&#xA;&#x9;&#x9;if(this.reference instanceof qmm.AttributeEClass) referencesAttributeEClass = (qmm.AttributeEClass)this.reference;&#xA;&#xA;&#x9;&#x9;if(containingAttributeEClass != null &amp;&amp; referencesAttributeEClass != null &amp;&amp; containingAttributeEClass == referencesAttributeEClass){  //self-reference in expression !&#xA;&#x9;&#x9;&#x9;String errorMessage = &quot;Self-reference in expression of attribute &quot; + containingAttributeEClass.getName() + &quot; detected. Self-references are not allowed!&quot;;&#xA;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if(containingRootClass != referencesRootClass){&#xA;&#x9;&#x9;&#x9;String errorMessage = &quot;The referenced element &quot; + this.reference + &quot; is contained by a different parent-element than the expression's parent-element. Cross-references are not supported.&quot;;&#xA;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if(this.reference instanceof qmm.NegatableElement &amp;&amp; ((qmm.NegatableElement)this.reference).isNegated())diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Reference to a negated element in &quot; + this + &quot; has been detected. References to negated elements are not allowed.&quot;,new Object[] { this }));&#xA;&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" lowerBound="1" eType="//AttributeDataType_CalculateableElement"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_ExpressionOperator" abstract="true" eSuperTypes="//ExpressionOperator //Boolean_Operator">
    <eAnnotations source="information">
      <details key="type" value="Boolean"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="codePointAt_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="codePointAt"/>
      <details key="literal" value=".codePointAt"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.codePointAt&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(index);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="index" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_FunctionalType" abstract="true" eSuperTypes="//Integer_Type //FunctionalType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//Integer_FunctionalOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OrGroup" abstract="true" eSuperTypes="//NamedElement //GeneralizableElement //NegatableElement //Countable">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EClass containerEClass = this.eContainingFeature().getEContainingClass();&#xA;if(containerEClass != null){&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EStructuralFeature containment = this.eClass().getEStructuralFeature(&quot;containment&quot;);&#xA;&#x9;&#x9;if(containment != null){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EClassifier eType&#x9;= containment.getEType();&#xA;&#x9;&#x9;&#x9;if(eType != null &amp;&amp; eType instanceof EClass){&#xA;&#x9;&#x9;&#x9;&#x9;EClass typeEClass = (EClass)eType;&#xA;&#x9;&#x9;&#x9;&#x9;if(!containerEClass.isSuperTypeOf(typeEClass) &amp;&amp; this.transitive){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = &quot;Feature &quot; + this.getName() + &quot; can't be transitive! It is defined by the type &quot; + containerEClass.getName() + &quot;, but is itself not an instance of (a subtype of) this type.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;}&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="transitive" lowerBound="1" defaultValueLiteral="false">
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EFeatureMapEntry_Type" abstract="true" eSuperTypes="//Type">
    <eAnnotations source="information">
      <details key="type" value="EFeatureMapEntry"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SupportedRoleClass_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//SupportedRoleClass"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_BitOperator" abstract="true" eSuperTypes="//Double_ExpressionOperator //BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Double"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//Double_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_ExpressionOperator" abstract="true" eSuperTypes="//ExpressionOperator //Object_Operator">
    <eAnnotations source="information">
      <details key="type" value="Object"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_FunctionalParameter" eSuperTypes="//Boolean_Type //FunctionalParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BitOperator" abstract="true" eSuperTypes="//ExpressionOperator //NegatableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="Countable_ReferenceArgument" eSuperTypes="//ReferenceArgument">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="qmm.RootClass containingRootClass = null;&#xA;qmm.RootClass referencesRootClass = null;&#xA;qmm.Countable containingCountable = null;&#xA;&#xA;if(this.reference != null){&#xA;&#x9;&#x9;if(this.reference instanceof qmm.Reference_OrGroup){&#xA;&#x9;&#x9;&#x9;qmm.Reference_OrGroup rog = (qmm.Reference_OrGroup)this.reference;&#xA;&#x9;&#x9;&#x9;EList&lt;org.eclipse.emf.ecore.EObject> references = (EList&lt;org.eclipse.emf.ecore.EObject>)rog.eGet(rog.eClass().getEStructuralFeature(&quot;reference&quot;));&#xA;&#x9;&#x9;&#x9;if(references.size()>0){&#xA;&#x9;&#x9;&#x9;&#x9;String errorMessage = &quot;Element &quot; + rog.getName() + &quot; is a concretized non-containment reference. It's not possible to use concretized non-containment references in evaluation operations in this prototype. Please remove ': ...' after the declaration of element &quot; + rog.getName() + &quot;, if you want to use &quot; + rog.getName() + &quot; in the evaluation operation.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.COUNTABLE_REFERENCE_ARGUMENT__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if(this.eContainer() != null){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = this.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !(eContainer instanceof qmm.RootClass)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Countable){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;containingCountable = (qmm.Countable)eContainer;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;containingRootClass = (qmm.RootClass)eContainer;&#xA;&#xA;&#x9;&#x9;&#x9;eContainer = this.reference.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !(eContainer instanceof qmm.RootClass)){&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;referencesRootClass = (qmm.RootClass)eContainer;&#xA;&#xA;&#x9;&#x9;&#x9;if(containingCountable != null &amp;&amp; containingCountable == reference){  //self-reference in expression !&#xA;&#x9;&#x9;&#x9;&#x9;String errorMessage = &quot;Self-reference in expression of &quot; + containingCountable + &quot; detected. Self-references are not allowed!&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.COUNTABLE_REFERENCE_ARGUMENT__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if(containingRootClass != referencesRootClass){&#xA;&#x9;&#x9;&#x9;&#x9;String errorMessage = &quot;The referenced element &quot; + this.reference + &quot; is contained by a different parent-element than the expression's parent-element. Cross-references are not supported.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.COUNTABLE_REFERENCE_ARGUMENT__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if(this.reference instanceof qmm.NegatableElement &amp;&amp; ((qmm.NegatableElement)this.reference).isNegated()){&#xA; &#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.COUNTABLE_REFERENCE_ARGUMENT__VALIDATE, &quot;Reference to a negated element in &quot; + this + &quot; has been detected. References to negated elements are not allowed.&quot;,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;}&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" lowerBound="1" eType="//Countable"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="startsWithOffset_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="startsWithOffset"/>
      <details key="literal" value=".starstWith"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.starstWith&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(prefix);&#xA;parameterList.add(toffset);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="prefix" lowerBound="1" eType="//String_FunctionalParameter" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="toffset" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EvaluationOperator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="DateTime_CalculateableParameter" eSuperTypes="//DateTime_Type //CalculateableParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_ExpressionOperator" abstract="true" eSuperTypes="//ExpressionOperator //String_Operator">
    <eAnnotations source="information">
      <details key="type" value="String"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_CalculateableParameter" eSuperTypes="//Integer_Type //CalculateableParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="Description_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//Description"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RefSemantic_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//RefSemantic"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_Argument" abstract="true" eSuperTypes="//FunctionalArgument //Double_FunctionalType"/>
  <eClassifiers xsi:type="ecore:EClass" name="Character_CalculateableParameter" eSuperTypes="//Character_Type //CalculateableParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DateTime_Argument" abstract="true" eSuperTypes="//FunctionalArgument //DateTime_FunctionalType"/>
  <eClassifiers xsi:type="ecore:EClass" name="Double_FunctionalOperator" abstract="true" eSuperTypes="//Operator //ExpressionOperator //Double_Operator //Double_ExpressionOperator //TypedElement //FunctionalOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Type" abstract="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="charAt_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Character_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="charAt"/>
      <details key="literal" value=".charAt"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Character_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.charAt&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExternalReferenceType_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//ExternalReferenceType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RefSemantic_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//RefSemantic" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SourceDocumentInformation_originRelease_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="EFeatureMapEntry_Argument" abstract="true" eSuperTypes="//FunctionalArgument //EFeatureMapEntry_FunctionalType"/>
  <eClassifiers xsi:type="ecore:EClass" name="EvaluationFunctionalOperator" abstract="true" eSuperTypes="//EvaluationOperator //FunctionalOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="DateTime_PrimitiveArgument" eSuperTypes="//DateTime_Argument //PrimitiveArgument">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1">
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2003/XMLType#//DateTime"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EFeatureMapEntry_Or_BitOperator" eSuperTypes="//EFeatureMapEntry_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="EFeatureMapEntry"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="smallerThan_FunctionalOperator" eSuperTypes="//Number_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="smallerThan"/>
      <details key="literal" value="&lt;"/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&lt;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Calculateable" abstract="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeDataType_BitOperator" abstract="true" eSuperTypes="//AttributeDataType_ExpressionOperator //BitOperator">
    <eAnnotations source="information">
      <details key="type" value="AttributeDataType"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//AttributeDataType_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_PrimitiveArgument" eSuperTypes="//Number_Argument //PrimitiveArgument">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="//Number"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Version_value_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Character_equals_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_Character_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="equals"/>
      <details key="literal" value=".equals"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.equals&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(obj);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="obj" lowerBound="1" eType="//Object_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="UnknownType_requirements_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="endsWith_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="endsWith"/>
      <details key="literal" value=".endsWith"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.endsWith&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(suffix);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="suffix" lowerBound="1" eType="//String_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EFeatureMapEntry_CalculateableParameter" eSuperTypes="//EFeatureMapEntry_Type //CalculateableParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Attribute_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//Attribute"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_BitOperator" abstract="true" eSuperTypes="//String_ExpressionOperator //BitOperator">
    <eAnnotations source="information">
      <details key="type" value="String"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//String_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Version_changeMode_AttrEClass" eSuperTypes="//ChangeMode_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="EFeatureMapEntry_FunctionalOperator" abstract="true" eSuperTypes="//EFeatureMapEntry_ExpressionOperator //FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="EFeatureMapEntry"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InterfaceIDMapping_systemUnitInterfaceID_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="GenericElement_attributeFeatureMap_AttrEClass" eSuperTypes="//EFeatureMapEntry_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="SourceDocumentInformation_originVendorURL_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Calculateable_Argument" abstract="true" eSuperTypes="//ReferenceArgument //FunctionalArgument"/>
  <eClassifiers xsi:type="ecore:EClass" name="InternalElement_refBaseSystemUnitPath_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Operator" abstract="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Argument" abstract="true" eSuperTypes="//FunctionalArgument //Object_FunctionalType"/>
  <eClassifiers xsi:type="ecore:EClass" name="Character_ExpressionOperator" abstract="true" eSuperTypes="//ExpressionOperator //Character_Operator">
    <eAnnotations source="information">
      <details key="type" value="Character"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_FunctionalOperator" abstract="true" eSuperTypes="//Operator //ExpressionOperator //Number_Operator //Number_ExpressionOperator //TypedElement //FunctionalOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="SourceDocumentInformation_originProjectTitle_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_EvaluationOperation_Argument" abstract="true" eSuperTypes="//EvaluationOperation_Argument //Integer_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Integer"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Integer_greaterThan_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Integer_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="greaterThan"/>
      <details key="literal" value=">"/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;>&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="smallerEquals_FunctionalOperator" eSuperTypes="//Number_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="smallerEquals"/>
      <details key="literal" value="&lt;="/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&lt;=&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NegatableElement" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="negated" lowerBound="1" defaultValueLiteral="false">
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Integer_smallerEquals_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Integer_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="smallerEquals"/>
      <details key="literal" value="&lt;="/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&lt;=&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CAEXFile_schemaVersion_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="EFeatureMapEntry_BitOperator" abstract="true" eSuperTypes="//EFeatureMapEntry_ExpressionOperator //BitOperator">
    <eAnnotations source="information">
      <details key="type" value="EFeatureMapEntry"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//EFeatureMapEntry_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_Or_BitOperator" eSuperTypes="//Boolean_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Boolean"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Number_equals_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_Number_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="equals"/>
      <details key="literal" value=".equals"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.equals&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(obj);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="obj" lowerBound="1" eType="//Object_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_String_Object_CharSequence_toString_FunctionalOperator" eSuperTypes="//InheritedFrom_CharSequence_to_String_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="toString"/>
      <details key="literal" value=".toString"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.toString&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FunctionalArgument" abstract="true" eSuperTypes="//Argument"/>
  <eClassifiers xsi:type="ecore:EClass" name="RoleFamily_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//RoleFamily"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeDataType_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Double_Object_Number_equals_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Double_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="equals"/>
      <details key="literal" value=".equals"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.equals&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(obj);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="obj" lowerBound="1" eType="//Object_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_FunctionalOperator" abstract="true" eSuperTypes="//Operator //ExpressionOperator //Boolean_Operator //Boolean_ExpressionOperator //TypedElement //FunctionalOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="SystemUnitFamily_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//SystemUnitFamily" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_ExpressionOperator" abstract="true" eSuperTypes="//ExpressionOperator //Integer_Operator">
    <eAnnotations source="information">
      <details key="type" value="Integer"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_BitOperator" abstract="true" eSuperTypes="//CharSequence_ExpressionOperator //BitOperator">
    <eAnnotations source="information">
      <details key="type" value="CharSequence"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//CharSequence_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Revision_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//Revision" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="concat_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="concat"/>
      <details key="literal" value=".concat"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.concat&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(str);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="str" lowerBound="1" eType="//String_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OrdinalScaledType_requiredMaxValue_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="SourceDocumentInformation_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//SourceDocumentInformation"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NominalScaledType_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//NominalScaledType" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Character_BitOperator" abstract="true" eSuperTypes="//Character_ExpressionOperator //BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Character"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//Character_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AggregationOperator" abstract="true" eSuperTypes="//EvaluationFunctionalOperator //Integer_Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeNameMapping_systemUnitAttributeName_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="ReferenceArgument" abstract="true" eSuperTypes="//Argument"/>
  <eClassifiers xsi:type="ecore:EClass" name="DateTime_FunctionalParameter" eSuperTypes="//DateTime_Type //FunctionalParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CAEXObject_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//CAEXObject" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="startsWith_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="startsWith"/>
      <details key="literal" value=".startsWith"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.startsWith&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(prefix);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="prefix" lowerBound="1" eType="//String_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CalculateableParameter" abstract="true" eSuperTypes="//Parameter">
    <eStructuralFeatures xsi:type="ecore:EReference" name="argument" lowerBound="1" eType="//Calculateable_Argument" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="isEmpty_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="isEmpty"/>
      <details key="literal" value=".isEmpty"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.isEmpty&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_EvaluationOperation_Argument" abstract="true" eSuperTypes="//EvaluationOperation_Argument //String_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="String"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Boolean_toString_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_Boolean_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="toString"/>
      <details key="literal" value=".toString"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.toString&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Character_toString_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_Character_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="toString"/>
      <details key="literal" value=".toString"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.toString&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_Or_BitOperator" eSuperTypes="//Double_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Double"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Attribute_unit_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="EFeatureMapEntry_ExpressionOperator" abstract="true" eSuperTypes="//ExpressionOperator //EFeatureMapEntry_Operator">
    <eAnnotations source="information">
      <details key="type" value="EFeatureMapEntry"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="doubleValue_FunctionalOperator" eSuperTypes="//Integer_Original_FunctionalOperator //Double_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="doubleValue"/>
      <details key="literal" value=".doubleValue"/>
      <details key="functionalOperatorType" value="Integer"/>
      <details key="functionalType" value="Double_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.doubleValue&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeNameMapping_roleAttributeName_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="String_CalculateableElement" abstract="true" eSuperTypes="//String_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="ExternalReferenceType_path_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Object_CalculateableParameter" eSuperTypes="//Object_Type //CalculateableParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeFamily_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//AttributeFamily"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CAEXFile_superiorStandardVersion_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="RoleFamily_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//RoleFamily" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="GenericElement_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//GenericElement" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CAEXFile_fileName_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="ExternalInterface_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//ExternalInterface"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Description_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//Description" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Integer_Object_Number_equals_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Integer_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="equals"/>
      <details key="literal" value=".equals"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.equals&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(obj);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="obj" lowerBound="1" eType="//Object_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Character_EvaluationOperation_Argument" abstract="true" eSuperTypes="//EvaluationOperation_Argument //Character_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Character"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="Character" instanceClassName="java.lang.Character"/>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_BitOperator" abstract="true" eSuperTypes="//Boolean_ExpressionOperator //BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Boolean"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//Boolean_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SourceDocumentInformation_originVendor_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="FindQueryCollection">
    <eStructuralFeatures xsi:type="ecore:EReference" name="findQueries" lowerBound="1" upperBound="-1" eType="//FindQuery" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CAEXFile_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//CAEXFile" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_FunctionalParameter" eSuperTypes="//CharSequence_Type //FunctionalParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="Object_FunctionalOperator" abstract="true" eSuperTypes="//Object_ExpressionOperator //FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Object"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="compareToString_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="compareToString"/>
      <details key="literal" value=".compareTo"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.compareTo&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(anotherString);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="anotherString" lowerBound="1" eType="//String_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_Argument" abstract="true" eSuperTypes="//FunctionalArgument //Integer_FunctionalType"/>
  <eClassifiers xsi:type="ecore:EClass" name="DateTime_And_BitOperator" eSuperTypes="//DateTime_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="DateTime"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Revision_oldVersion_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="InternalElement_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//InternalElement"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_EvaluationOperation_Argument" abstract="true" eSuperTypes="//EvaluationOperation_Argument //Boolean_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Boolean"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Min_AggregationOperator_Integer" eSuperTypes="//CalculatingAggregationOperator //Integer_EvaluationOperation_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Integer"/>
      <details key="literal" value="min"/>
      <details key="operatorXTextLiteral" value="min_Integer"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;min&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(calculateable);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="calculateable" lowerBound="1" eType="//Integer_CalculateableParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Element_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//Element"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Double_smallerEquals_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Double_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="smallerEquals"/>
      <details key="literal" value="&lt;="/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&lt;=&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InterfaceClassLib_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//InterfaceClassLib" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeNameMapping_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//AttributeNameMapping" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Integer_greaterEquals_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Integer_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="greaterEquals"/>
      <details key="literal" value=">="/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;>=&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DocumentRoot_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//DocumentRoot"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="toString_FunctionalOperator" eSuperTypes="//Object_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="toString"/>
      <details key="literal" value=".toString"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.toString&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_Argument" abstract="true" eSuperTypes="//FunctionalArgument //CharSequence_FunctionalType"/>
  <eClassifiers xsi:type="ecore:EClass" name="Revision_authorName_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_Type" abstract="true" eSuperTypes="//Type //Number_Type">
    <eAnnotations source="information">
      <details key="type" value="Integer"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InheritedFrom_Number_to_Integer_FunctionalOperator" abstract="true" eSuperTypes="//Integer_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Number"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RoleRequirements_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//RoleRequirements"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_CalculateableElement" abstract="true" eSuperTypes="//Number_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_String_length_FunctionalOperator" eSuperTypes="//InheritedFrom_CharSequence_to_String_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="length"/>
      <details key="literal" value=".length"/>
      <details key="functionalOperatorType" value="CharSequence"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.length&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeDataType_Argument" abstract="true" eSuperTypes="//FunctionalArgument //AttributeDataType_FunctionalType"/>
  <eClassifiers xsi:type="ecore:EClass" name="CalculatingAggregationOperator" abstract="true" eSuperTypes="//AggregationOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="EFeatureMapEntry_FunctionalParameter" eSuperTypes="//EFeatureMapEntry_Type //FunctionalParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeFamily_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//AttributeFamily" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Revision_comment_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeDataType_AttributeEClass" abstract="true" eSuperTypes="//RegularAttributeEClass //AttributeDataType_CalculateableElement">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.operator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateCheckExpression(this.operator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//AttributeDataType_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EFeatureMapEntry_CalculateableElement" abstract="true" eSuperTypes="//EFeatureMapEntry_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_Original_FunctionalOperator" abstract="true" eSuperTypes="//Integer_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Integer"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InterfaceIDMapping_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//InterfaceIDMapping" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_EvaluationOperation_Argument" abstract="true" eSuperTypes="//EvaluationOperation_Argument //Object_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Object"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_FunctionalType" abstract="true" eSuperTypes="//String_Type //FunctionalType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//String_FunctionalOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InterfaceFamily_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//InterfaceFamily" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_EvaluationOperation_Argument" abstract="true" eSuperTypes="//EvaluationOperation_Argument //Number_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Number"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Countable" abstract="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="InheritedFrom_Object_to_Character_FunctionalOperator" abstract="true" eSuperTypes="//Character_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Object"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Attribute_refAttributeType_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="InternalLink_refPartnerSideB_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="toLowerCase_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="toLowerCase"/>
      <details key="literal" value=".toLowerCase"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.toLowerCase&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RoleClass_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//RoleClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SourceDocumentInformation_originName_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="DateTime_Type" abstract="true" eSuperTypes="//Type">
    <eAnnotations source="information">
      <details key="type" value="DateTime"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_ExpressionOperator" abstract="true" eSuperTypes="//ExpressionOperator //Double_Operator">
    <eAnnotations source="information">
      <details key="type" value="Double"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Double_greaterThan_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Double_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="greaterThan"/>
      <details key="literal" value=">"/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;>&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EFeatureMapEntry_PrimitiveArgument" eSuperTypes="//EFeatureMapEntry_Argument //PrimitiveArgument">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1">
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EFeatureMapEntry"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Number_toString_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_Number_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="toString"/>
      <details key="literal" value=".toString"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.toString&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CAEXBasicObject_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//CAEXBasicObject" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="indexOfString_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="indexOfString"/>
      <details key="literal" value=".indexOf"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.indexOf&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(str);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="str" lowerBound="1" eType="//String_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ClassOperator" abstract="true" eSuperTypes="//EvaluationFunctionalOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_Or_BitOperator" eSuperTypes="//CharSequence_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="CharSequence"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InterfaceClass_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//InterfaceClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Or_EvaluationBitOperator" eSuperTypes="//EvaluationBitOperator">
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="UnknownType_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//UnknownType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="equals_FunctionalOperator" eSuperTypes="//Object_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="equals"/>
      <details key="literal" value=".equals"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.equals&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(obj);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="obj" lowerBound="1" eType="//Object_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InterfaceClass_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//InterfaceClass"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_And_BitOperator" eSuperTypes="//Boolean_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Boolean"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="GeneralizableElement" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="generalized" lowerBound="1" defaultValueLiteral="false">
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InstanceHierarchy_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//InstanceHierarchy" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Version_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//Version"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RootClass" abstract="true" eSuperTypes="//NamedElement">
    <eOperations name="validateCheckExpression" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EClass booleanType = QmmPackage.eINSTANCE.getBoolean_Type();&#xA;EClass functionalOperatorType = QmmPackage.eINSTANCE.getFunctionalOperator();&#xA;EClass bitOperatorType = QmmPackage.eINSTANCE.getBitOperator();&#xA;qmm.Operator operator = (qmm.Operator)o;&#xA;EList diagnosticList = new org.eclipse.emf.common.util.BasicEList();&#xA;&#xA;if(functionalOperatorType.isSuperTypeOf(operator.eClass())){&#xA;&#x9;qmm.FunctionalOperator lastOperator = (qmm.FunctionalOperator)((qmm.FunctionalOperator)operator).getLastOperator();&#xA;    &#x9;EClass lastOperatorType = (EClass)lastOperator.getType();&#xA;    &#x9;if(!booleanType.isSuperTypeOf(lastOperatorType)){&#xA;&#x9;&#x9;&#x9;String errorMessage = &quot;Operator &quot; + lastOperator.eClass().getName() + &quot; of attribute &quot; + this.eClass().getName() + &quot; is of type &quot; + lastOperatorType.getName() + &quot;, but must be (a subtype) of type &quot; + booleanType.getName() + &quot;.&quot;;&#xA;    &#x9;&#x9;diagnosticList.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage,new Object[] { this }));&#xA;    &#x9;}&#xA;}else if(bitOperatorType.isSuperTypeOf(operator.eClass())){&#xA;    for(qmm.Operator op : (EList&lt;qmm.Operator>)operator.eGet(operator.eClass().getEStructuralFeature(&quot;connects&quot;))){&#xA;    &#x9;diagnosticList.addAll(validateCheckExpression(op));&#xA;    }&#xA;}&#xA;return diagnosticList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
      <eParameters name="o">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
      </eParameters>
    </eOperations>
    <eOperations name="validateAllCheckExpressions" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="&#xA;&#x9;EList&lt;qmm.Operator> operators = (EList&lt;qmm.Operator>)o;&#xA;&#x9;EList diagnosticList = new org.eclipse.emf.common.util.BasicEList();&#xA;&#x9;if(operators != null){&#xA;&#x9;&#x9;for(qmm.Operator operator:operators){&#xA;&#x9;&#x9;&#x9;diagnosticList.addAll(validateCheckExpression(operator));&#xA;&#x9;&#x9;}&#xA;   }&#xA;&#x9;return diagnosticList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
      <eParameters name="o">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="EvaluationOperator" upperBound="-1" eType="//EvaluationOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_CalculateableParameter" eSuperTypes="//Boolean_Type //CalculateableParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DateTime_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="Double_Original_FunctionalOperator" abstract="true" eSuperTypes="//Double_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Double"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="greaterEquals_FunctionalOperator" eSuperTypes="//Number_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="greaterEquals"/>
      <details key="literal" value=">="/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;>=&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeValueRequirement_name_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="CAEXBasicObject_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//CAEXBasicObject"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InheritedFrom_Object_to_Number_FunctionalOperator" abstract="true" eSuperTypes="//Number_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Object"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InternalElement_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//InternalElement" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="GenericElement_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//GenericElement"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_Original_FunctionalOperator" abstract="true" eSuperTypes="//CharSequence_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="CharSequence"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="indexOfCharFromIndex_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="indexOfCharFromIndex"/>
      <details key="literal" value=".indexOf"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.indexOf&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(ch);&#xA;parameterList.add(fromIndex);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ch" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="fromIndex" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_BitOperator" abstract="true" eSuperTypes="//Number_ExpressionOperator //BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Number"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//Number_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AdditionalInformation_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//AdditionalInformation" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SystemUnitClassLib_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//SystemUnitClassLib"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeDataType_PrimitiveArgument" eSuperTypes="//AttributeDataType_Argument //PrimitiveArgument">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="//AttributeDataType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="EFeatureMapEntry_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_CalculateableElement" abstract="true" eSuperTypes="//Boolean_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_And_BitOperator" eSuperTypes="//CharSequence_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="CharSequence"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Character_FunctionalType" abstract="true" eSuperTypes="//Character_Type //FunctionalType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//Character_FunctionalOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeDataType_ExpressionOperator" abstract="true" eSuperTypes="//ExpressionOperator //AttributeDataType_Operator">
    <eAnnotations source="information">
      <details key="type" value="AttributeDataType"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_FunctionalParameter" eSuperTypes="//Number_Type //FunctionalParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="Double" instanceClassName="java.lang.Double"/>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_Argument" abstract="true" eSuperTypes="//FunctionalArgument //Boolean_FunctionalType"/>
  <eClassifiers xsi:type="ecore:EClass" name="Attribute_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//Attribute" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OrdinalScaledType_requiredValue_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Object_CharSequence_hashCode_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_CharSequence_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="hashCode"/>
      <details key="literal" value=".hashCode"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.hashCode&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Integer_Object_Number_hashCode_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Integer_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="hashCode"/>
      <details key="literal" value=".hashCode"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.hashCode&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DateTime_ExpressionOperator" abstract="true" eSuperTypes="//ExpressionOperator //DateTime_Operator">
    <eAnnotations source="information">
      <details key="type" value="DateTime"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="IntegerParseInt_ClassOperator" eSuperTypes="//ClassOperator //Integer_EvaluationOperation_Argument">
    <eAnnotations source="information">
      <details key="functonalType" value="Integer"/>
      <details key="literal" value="Integer.parseInt"/>
      <details key="operatorXTextLiteral" value="Integer.parseInt"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;Integer.parseInt&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(calculateable);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="calculateable" lowerBound="1" eType="//String_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Revision_revisionDate_AttrEClass" eSuperTypes="//DateTime_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EDataType" name="Integer" instanceClassName="java.lang.Integer"/>
  <eClassifiers xsi:type="ecore:EClass" name="RegularAttributeEClass" abstract="true" eSuperTypes="//AttributeEClass //GeneralizableElement">
    <eOperations name="validateCheckExpression" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EClass booleanType = QmmPackage.eINSTANCE.getBoolean_Type();&#xA;EClass functionalOperatorType = QmmPackage.eINSTANCE.getFunctionalOperator();&#xA;EClass bitOperatorType = QmmPackage.eINSTANCE.getBitOperator();&#xA;qmm.Operator operator = (qmm.Operator)o;&#xA;EList diagnosticList = new org.eclipse.emf.common.util.BasicEList();&#xA;&#xA;if(functionalOperatorType.isSuperTypeOf(operator.eClass())){&#xA;&#x9;qmm.FunctionalOperator lastOperator = (qmm.FunctionalOperator)((qmm.FunctionalOperator)operator).getLastOperator();&#xA;    &#x9;EClass lastOperatorType = (EClass)lastOperator.getType();&#xA;    &#x9;if(!booleanType.isSuperTypeOf(lastOperatorType)){&#xA;&#x9;&#x9;&#x9;String errorMessage = &quot;Operator &quot; + lastOperator.eClass().getName() + &quot; of attribute &quot; + this.eClass().getName() + &quot; is of type &quot; + lastOperatorType.getName() + &quot;, but must be (a subtype) of type &quot; + booleanType.getName() + &quot;.&quot;;&#xA;    &#x9;&#x9;diagnosticList.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage,new Object[] { this }));&#xA;    &#x9;}&#xA;}else if(bitOperatorType.isSuperTypeOf(operator.eClass())){&#xA;    for(qmm.Operator op : (EList&lt;qmm.Operator>)operator.eGet(operator.eClass().getEStructuralFeature(&quot;connects&quot;))){&#xA;    &#x9;diagnosticList.addAll(validateCheckExpression(op));&#xA;    }&#xA;}&#xA;return diagnosticList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
      <eParameters name="o">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_FunctionalParameter" eSuperTypes="//String_Type //FunctionalParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InterfaceIDMapping_roleInterfaceID_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="length_FunctionalOperator" eSuperTypes="//CharSequence_Original_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="length"/>
      <details key="literal" value=".length"/>
      <details key="functionalOperatorType" value="CharSequence"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.length&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SourceDocumentInformation_originVersion_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="RoleRequirements_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//RoleRequirements" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_And_BitOperator" eSuperTypes="//Integer_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Integer"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ChangeMode_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="DateTime_FunctionalType" abstract="true" eSuperTypes="//DateTime_Type //FunctionalType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//DateTime_FunctionalOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeDataType_FunctionalType" abstract="true" eSuperTypes="//AttributeDataType_Type //FunctionalType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//AttributeDataType_FunctionalOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ChangeMode_AttributeEClass" abstract="true" eSuperTypes="//EnumerationAttributeEClass">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//ChangeMode_EnumerationOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_CalculateableElement" abstract="true" eSuperTypes="//Object_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="hashCode_FunctionalOperator" eSuperTypes="//Object_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="hashCode"/>
      <details key="literal" value=".hashCode"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.hashCode&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InheritedFrom_Number_to_Double_FunctionalOperator" abstract="true" eSuperTypes="//Double_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Number"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="And_EvaluationBitOperator" eSuperTypes="//EvaluationBitOperator">
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="compareToBoolean_FunctionalOperator" eSuperTypes="//Boolean_Original_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="compareToBoolean"/>
      <details key="literal" value=".compareTo"/>
      <details key="functionalOperatorType" value="Boolean"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.compareTo&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(b);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="b" lowerBound="1" eType="//Boolean_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_CalculateableParameter" eSuperTypes="//String_Type //CalculateableParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Element_name_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_FunctionalParameter" eSuperTypes="//Integer_Type //FunctionalParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Double_Object_Number_hashCode_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Double_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="hashCode"/>
      <details key="literal" value=".hashCode"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.hashCode&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InheritedFrom_Object_to_CharSequence_FunctionalOperator" abstract="true" eSuperTypes="//CharSequence_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Object"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Version_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//Version" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_PrimitiveArgument" eSuperTypes="//Double_Argument //PrimitiveArgument">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="//Double"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeDataType_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Object_And_BitOperator" eSuperTypes="//Object_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Object"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EvaluationBitOperator" abstract="true" eSuperTypes="//EvaluationOperator //BitOperator">
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//EvaluationOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExternalReferenceType_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//ExternalReferenceType" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CAEXObject_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//CAEXObject"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExpressionOperator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Number_ExpressionOperator" abstract="true" eSuperTypes="//ExpressionOperator //Number_Operator">
    <eAnnotations source="information">
      <details key="type" value="Number"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_String_Object_CharSequence_equals_FunctionalOperator" eSuperTypes="//InheritedFrom_CharSequence_to_String_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="equals"/>
      <details key="literal" value=".equals"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.equals&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(obj);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="obj" lowerBound="1" eType="//Object_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeNameMapping_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//AttributeNameMapping"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Character_hashCode_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_Character_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="hashCode"/>
      <details key="literal" value=".hashCode"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.hashCode&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InterfaceClassLib_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//InterfaceClassLib"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeDataType_FunctionalOperator" abstract="true" eSuperTypes="//AttributeDataType_ExpressionOperator //FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="AttributeDataType"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Revision_newVersion_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="InterfaceClass_refBaseClassPath_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="NominalScaledType_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//NominalScaledType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DocumentRoot_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//DocumentRoot" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_Type" abstract="true" eSuperTypes="//Type //Object_Type">
    <eAnnotations source="information">
      <details key="type" value="Boolean"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FindQuery">
    <eStructuralFeatures xsi:type="ecore:EReference" name="union" upperBound="-1" eType="//FindQuery" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="rootClass" lowerBound="1" upperBound="-1" eType="//RootClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="select" eType="//SelectClause" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Copyright_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//Copyright" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="GenericAttribute_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//GenericAttribute" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TypedElement" abstract="true">
    <eOperations name="getType" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EClass typeEClass = QmmPackage.eINSTANCE.getType();&#xA;    EClass type = null;&#xA;    for(EClass possibleTypeSubClass : this.eClass().getEAllSuperTypes()){&#xA;    &#x9;if(typeEClass.isSuperTypeOf(possibleTypeSubClass) &amp;&amp; !typeEClass.equals(possibleTypeSubClass)){&#xA;    &#x9;&#x9;type = possibleTypeSubClass;&#xA;    &#x9;}&#xA;    }&#xA;    return type;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_CalculateableElement" abstract="true" eSuperTypes="//CharSequence_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeLib_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//AttributeLib"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Character_PrimitiveArgument" eSuperTypes="//Character_Argument //PrimitiveArgument">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="//Character"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Character_FunctionalOperator" abstract="true" eSuperTypes="//Operator //ExpressionOperator //Character_Operator //Character_ExpressionOperator //TypedElement //FunctionalOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Object_CharSequence_equals_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_CharSequence_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="equals"/>
      <details key="literal" value=".equals"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.equals&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(obj);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="obj" lowerBound="1" eType="//Object_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DateTime_AttributeEClass" abstract="true" eSuperTypes="//RegularAttributeEClass //DateTime_CalculateableElement">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.operator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateCheckExpression(this.operator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//DateTime_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SystemUnitClass_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//SystemUnitClass"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_FunctionalType" abstract="true" eSuperTypes="//CharSequence_Type //FunctionalType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//CharSequence_FunctionalOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Character_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Character_Original_FunctionalOperator" abstract="true" eSuperTypes="//Character_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Character"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeValueRequirement_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//AttributeValueRequirement"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CalculateableElement_ReferenceArgument" abstract="true" eSuperTypes="//Calculateable_Argument"/>
  <eClassifiers xsi:type="ecore:EClass" name="String_PrimitiveArgument" eSuperTypes="//String_Argument //PrimitiveArgument">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="//String"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Argument" abstract="true" eSuperTypes="//FunctionalArgument //Number_FunctionalType"/>
  <eClassifiers xsi:type="ecore:EClass" name="DateTime_EvaluationOperation_Argument" abstract="true" eSuperTypes="//EvaluationOperation_Argument //DateTime_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="DateTime"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RoleClassLib_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//RoleClassLib"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeDataType_Type" abstract="true" eSuperTypes="//Type">
    <eAnnotations source="information">
      <details key="type" value="AttributeDataType"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Max_AggregationOperator_Integer" eSuperTypes="//CalculatingAggregationOperator //Integer_EvaluationOperation_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Integer"/>
      <details key="literal" value="max"/>
      <details key="operatorXTextLiteral" value="max_Integer"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;max&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(calculateable);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="calculateable" lowerBound="1" eType="//Integer_CalculateableParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_Type" abstract="true" eSuperTypes="//Type //Number_Type">
    <eAnnotations source="information">
      <details key="type" value="Double"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EvaluationOperation_Argument" abstract="true" eSuperTypes="//Calculateable_Argument"/>
  <eClassifiers xsi:type="ecore:EClass" name="DateTime_FunctionalOperator" abstract="true" eSuperTypes="//DateTime_ExpressionOperator //FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="DateTime"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InheritedFrom_CharSequence_to_String_FunctionalOperator" abstract="true" eSuperTypes="//String_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="CharSequence"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_BitOperator" abstract="true" eSuperTypes="//Object_ExpressionOperator //BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Object"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//Object_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Character_Or_BitOperator" eSuperTypes="//Character_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Character"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_EvaluationOperation_Argument" abstract="true" eSuperTypes="//EvaluationOperation_Argument //Double_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Double"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AdditionalInformation_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//AdditionalInformation"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeDataType_EvaluationOperation_Argument" abstract="true" eSuperTypes="//EvaluationOperation_Argument //AttributeDataType_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="AttributeDataType"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InstanceHierarchy_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//InstanceHierarchy"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Double_Object_Number_toString_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Double_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="toString"/>
      <details key="literal" value=".toString"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.toString&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_CalculateableElement" abstract="true" eSuperTypes="//Double_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="CountableReferenceParameter" eSuperTypes="//Parameter">
    <eStructuralFeatures xsi:type="ecore:EReference" name="argument" lowerBound="1" eType="//Countable_ReferenceArgument" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Character_Argument" abstract="true" eSuperTypes="//FunctionalArgument //Character_FunctionalType"/>
  <eClassifiers xsi:type="ecore:EClass" name="CAEXBasicObject_changeMode_AttrEClass" eSuperTypes="//ChangeMode_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="EFeatureMapEntry_FunctionalType" abstract="true" eSuperTypes="//EFeatureMapEntry_Type //FunctionalType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//EFeatureMapEntry_FunctionalOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CalculateableElement" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="EnumerationOperator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Sum_AggregationOperator_Integer" eSuperTypes="//CalculatingAggregationOperator //Integer_EvaluationOperation_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Integer"/>
      <details key="literal" value="sum"/>
      <details key="operatorXTextLiteral" value="sum_Integer"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;sum&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(calculateable);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="calculateable" lowerBound="1" eType="//Integer_CalculateableParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InternalLink_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//InternalLink" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="CharSequence" instanceClassName="java.lang.CharSequence"/>
  <eClassifiers xsi:type="ecore:EClass" name="Description_changeMode_AttrEClass" eSuperTypes="//ChangeMode_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="codePointBefore_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="codePointBefore"/>
      <details key="literal" value=".codePointBefore"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.codePointBefore&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(index);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="index" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="trim_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="trim"/>
      <details key="literal" value=".trim"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.trim&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CAEXFile_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//CAEXFile"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_PrimitiveArgument" eSuperTypes="//CharSequence_Argument //PrimitiveArgument">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="//CharSequence"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_CalculateableParameter" eSuperTypes="//Double_Type //CalculateableParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Description_value_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="RoleClass_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//RoleClass"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Double_greaterEquals_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Double_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="greaterEquals"/>
      <details key="literal" value=">="/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;>=&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DateTime_CalculateableElementReferenceArgument" eSuperTypes="//CalculateableElement_ReferenceArgument //DateTime_FunctionalType">
    <eAnnotations source="information">
      <details key="functionalType" value="DateTime"/>
    </eAnnotations>
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="qmm.RootClass containingRootClass = null;&#xA;qmm.RootClass referencesRootClass = null;&#xA;qmm.AttributeEClass containingAttributeEClass = null;&#xA;qmm.AttributeEClass referencesAttributeEClass = null;&#xA;if(this.eContainer() != null &amp;&amp; this.reference != null){&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(eContainer != null &amp;&amp; !(eContainer instanceof qmm.RootClass)){&#xA;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.AttributeEClass){&#xA;&#x9;&#x9;&#x9;&#x9;containingAttributeEClass = (qmm.AttributeEClass)eContainer;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;containingRootClass = (qmm.RootClass)eContainer;&#xA;&#xA;&#x9;&#x9;eContainer = this.reference.eContainer();&#xA;&#x9;&#x9;while(eContainer != null &amp;&amp; !(eContainer instanceof qmm.RootClass)){&#xA;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;referencesRootClass = (qmm.RootClass)eContainer;&#xA;&#x9;&#x9;if(this.reference instanceof qmm.AttributeEClass) referencesAttributeEClass = (qmm.AttributeEClass)this.reference;&#xA;&#xA;&#x9;&#x9;if(containingAttributeEClass != null &amp;&amp; referencesAttributeEClass != null &amp;&amp; containingAttributeEClass == referencesAttributeEClass){  //self-reference in expression !&#xA;&#x9;&#x9;&#x9;String errorMessage = &quot;Self-reference in expression of attribute &quot; + containingAttributeEClass.getName() + &quot; detected. Self-references are not allowed!&quot;;&#xA;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if(containingRootClass != referencesRootClass){&#xA;&#x9;&#x9;&#x9;String errorMessage = &quot;The referenced element &quot; + this.reference + &quot; is contained by a different parent-element than the expression's parent-element. Cross-references are not supported.&quot;;&#xA;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if(this.reference instanceof qmm.NegatableElement &amp;&amp; ((qmm.NegatableElement)this.reference).isNegated())diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Reference to a negated element in &quot; + this + &quot; has been detected. References to negated elements are not allowed.&quot;,new Object[] { this }));&#xA;&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" lowerBound="1" eType="//DateTime_CalculateableElement"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Character_CalculateableElement" abstract="true" eSuperTypes="//Character_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="InternalLink_refPartnerSideA_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_PrimitiveArgument" eSuperTypes="//Integer_Argument //PrimitiveArgument">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="//Integer"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="CAEXObject_iD_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EDataType" name="String" instanceClassName="java.lang.String">
    <eAnnotations source="http:///org/eclipse/emf/ecore/util/ExtendedMetaData">
      <details key="name" value="string"/>
      <details key="whiteSpace" value="preserve"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SourceDocumentInformation_originID_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="String_Original_FunctionalOperator" abstract="true" eSuperTypes="//String_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="String"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InterfaceIDMapping_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass ogt: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = ogt.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(ogt)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(eContainer == this.eContainer().eContainer()) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ogt.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = ((qmm.OrGroup)ogt).getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//InterfaceIDMapping"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EFeatureMapEntry_And_BitOperator" eSuperTypes="//EFeatureMapEntry_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="EFeatureMapEntry"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="Boolean" instanceClassName="java.lang.Boolean"/>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Integer_Object_Number_toString_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Integer_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="toString"/>
      <details key="literal" value=".toString"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.toString&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="compareToStringIgnoreCase_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="compareToStringIgnoreCase"/>
      <details key="literal" value="compareToIgnoreCase"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;compareToIgnoreCase&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(str);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="str" lowerBound="1" eType="//String_FunctionalParameter" containment="true"/>
  </eClassifiers>
</ecore:EPackage>
