<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="qmm" nsURI="/QMM/model/QMM.ecore" nsPrefix="qmm">
  <eClassifiers xsi:type="ecore:EClass" name="Person" eSuperTypes="//RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int name_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_name_AttrEClass = 0;&#xA;if(this.name_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.name_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_name_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_name_AttrEClass > name_AttrEClass_upperBound &amp;&amp; name_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Person contains &quot; + nr_nonGeneralized_name_AttrEClass + &quot; non-generalized and non-negated name(s). Only &quot; + name_AttrEClass_upperBound + &quot; non-generalized and non-negated name(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int email_AttrEClass_upperBound = -1;&#xA;int nr_nonGeneralized_email_AttrEClass = 0;&#xA;if(this.email_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.email_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_email_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_email_AttrEClass > email_AttrEClass_upperBound &amp;&amp; email_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Person contains &quot; + nr_nonGeneralized_email_AttrEClass + &quot; non-generalized and non-negated email(s). Only &quot; + email_AttrEClass_upperBound + &quot; non-generalized and non-negated email(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="name_AttrEClass" upperBound="-1" eType="//Person_name_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="email_AttrEClass" upperBound="-1" eType="//Person_email_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Student" eSuperTypes="//Person //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int attends_upperBound = -1;&#xA;int nr_nonTransitive_attends = 0;&#xA;if(this.attends != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.attends) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_attends++;&#xA;}&#xA;if(nr_nonTransitive_attends > attends_upperBound &amp;&amp; attends_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Student contains &quot; + nr_nonTransitive_attends + &quot; non-transitive, non-negated and non-generalized attends(s). Only &quot; + attends_upperBound + &quot; non-transitive, non-negated and non-generalized attends(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int matriculationNumber_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_matriculationNumber_AttrEClass = 0;&#xA;if(this.matriculationNumber_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.matriculationNumber_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_matriculationNumber_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_matriculationNumber_AttrEClass > matriculationNumber_AttrEClass_upperBound &amp;&amp; matriculationNumber_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Student contains &quot; + nr_nonGeneralized_matriculationNumber_AttrEClass + &quot; non-generalized and non-negated matriculationNumber(s). Only &quot; + matriculationNumber_AttrEClass_upperBound + &quot; non-generalized and non-negated matriculationNumber(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="attends" upperBound="-1" eType="//Course_Reference_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="matriculationNumber_AttrEClass" upperBound="-1" eType="//Student_matriculationNumber_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Professor" eSuperTypes="//Person //RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int lectures_upperBound = -1;&#xA;int nr_nonTransitive_lectures = 0;&#xA;if(this.lectures != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.lectures) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_lectures++;&#xA;}&#xA;if(nr_nonTransitive_lectures > lectures_upperBound &amp;&amp; lectures_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Professor contains &quot; + nr_nonTransitive_lectures + &quot; non-transitive, non-negated and non-generalized lectures(s). Only &quot; + lectures_upperBound + &quot; non-transitive, non-negated and non-generalized lectures(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int employeeNumber_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_employeeNumber_AttrEClass = 0;&#xA;if(this.employeeNumber_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.employeeNumber_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_employeeNumber_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_employeeNumber_AttrEClass > employeeNumber_AttrEClass_upperBound &amp;&amp; employeeNumber_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Professor contains &quot; + nr_nonGeneralized_employeeNumber_AttrEClass + &quot; non-generalized and non-negated employeeNumber(s). Only &quot; + employeeNumber_AttrEClass_upperBound + &quot; non-generalized and non-negated employeeNumber(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="lectures" upperBound="-1" eType="//Course_Reference_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="employeeNumber_AttrEClass" upperBound="-1" eType="//Professor_employeeNumber_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Course" eSuperTypes="//RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int mandatoryFor_upperBound = -1;&#xA;int nr_nonTransitive_mandatoryFor = 0;&#xA;if(this.mandatoryFor != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.mandatoryFor) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_mandatoryFor++;&#xA;}&#xA;if(nr_nonTransitive_mandatoryFor > mandatoryFor_upperBound &amp;&amp; mandatoryFor_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Course contains &quot; + nr_nonTransitive_mandatoryFor + &quot; non-transitive, non-negated and non-generalized mandatoryFor(s). Only &quot; + mandatoryFor_upperBound + &quot; non-transitive, non-negated and non-generalized mandatoryFor(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int exam_upperBound = -1;&#xA;int nr_nonTransitive_exam = 0;&#xA;if(this.exam != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.exam) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_exam++;&#xA;}&#xA;if(nr_nonTransitive_exam > exam_upperBound &amp;&amp; exam_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Course contains &quot; + nr_nonTransitive_exam + &quot; non-transitive, non-negated and non-generalized exam(s). Only &quot; + exam_upperBound + &quot; non-transitive, non-negated and non-generalized exam(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int name_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_name_AttrEClass = 0;&#xA;if(this.name_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.name_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_name_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_name_AttrEClass > name_AttrEClass_upperBound &amp;&amp; name_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Course contains &quot; + nr_nonGeneralized_name_AttrEClass + &quot; non-generalized and non-negated name(s). Only &quot; + name_AttrEClass_upperBound + &quot; non-generalized and non-negated name(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int courseNumber_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_courseNumber_AttrEClass = 0;&#xA;if(this.courseNumber_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.courseNumber_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_courseNumber_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_courseNumber_AttrEClass > courseNumber_AttrEClass_upperBound &amp;&amp; courseNumber_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Course contains &quot; + nr_nonGeneralized_courseNumber_AttrEClass + &quot; non-generalized and non-negated courseNumber(s). Only &quot; + courseNumber_AttrEClass_upperBound + &quot; non-generalized and non-negated courseNumber(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="mandatoryFor" upperBound="-1" eType="//Course_Reference_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="exam" upperBound="-1" eType="//Exam_Containment_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="name_AttrEClass" upperBound="-1" eType="//Course_name_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="courseNumber_AttrEClass" upperBound="-1" eType="//Course_courseNumber_AttrEClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="courseType_AttrEClass" eType="//Course_courseType_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="CourseType">
    <eLiterals name="VO"/>
    <eLiterals name="UE" value="1"/>
    <eLiterals name="SEM" value="2"/>
    <eLiterals name="PR" value="3"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="UniversityManagementSystem" eSuperTypes="//RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int course_upperBound = -1;&#xA;int nr_nonTransitive_course = 0;&#xA;if(this.course != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.course) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_course++;&#xA;}&#xA;if(nr_nonTransitive_course > course_upperBound &amp;&amp; course_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;UniversityManagementSystem contains &quot; + nr_nonTransitive_course + &quot; non-transitive, non-negated and non-generalized course(s). Only &quot; + course_upperBound + &quot; non-transitive, non-negated and non-generalized course(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;final int person_upperBound = -1;&#xA;int nr_nonTransitive_person = 0;&#xA;if(this.person != null){&#xA;&#x9;&#x9;for(qmm.OrGroup og : this.person) if(!og.isTransitive() &amp;&amp; !og.isNegated() &amp;&amp; !og.isGeneralized()) nr_nonTransitive_person++;&#xA;}&#xA;if(nr_nonTransitive_person > person_upperBound &amp;&amp; person_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;UniversityManagementSystem contains &quot; + nr_nonTransitive_person + &quot; non-transitive, non-negated and non-generalized person(s). Only &quot; + person_upperBound + &quot; non-transitive, non-negated and non-generalized person(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="course" upperBound="-1" eType="//Course_Containment_OrGroup" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="person" upperBound="-1" eType="//Person_Containment_OrGroup" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Exam" eSuperTypes="//RootClass">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.evaluationOperator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateAllCheckExpressions(this.evaluationOperator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;&#xA;final int examID_AttrEClass_upperBound = 1;&#xA;int nr_nonGeneralized_examID_AttrEClass = 0;&#xA;if(this.examID_AttrEClass != null){&#xA;&#x9;&#x9;for(qmm.RegularAttributeEClass attr : this.examID_AttrEClass) if(!attr.isGeneralized() &amp;&amp; !attr.isNegated()) nr_nonGeneralized_examID_AttrEClass++;&#xA;}&#xA;if(nr_nonGeneralized_examID_AttrEClass > examID_AttrEClass_upperBound &amp;&amp; examID_AttrEClass_upperBound > -1) diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Exam contains &quot; + nr_nonGeneralized_examID_AttrEClass + &quot; non-generalized and non-negated examID(s). Only &quot; + examID_AttrEClass_upperBound + &quot; non-generalized and non-negated examID(s) are allowed.&quot;,new Object[] { this }));&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="examID_AttrEClass" upperBound="-1" eType="//Exam_examID_AttrEClass" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_BitOperator" abstract="true" eSuperTypes="//Boolean_ExpressionOperator //BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Boolean"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//Boolean_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_EvaluationOperation_Argument" abstract="true" eSuperTypes="//EvaluationOperation_Argument //Number_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Number"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_CalculateableParameter" eSuperTypes="//Double_Type //CalculateableParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="toLowerCase_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="toLowerCase"/>
      <details key="literal" value=".toLowerCase"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.toLowerCase&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_CalculateableParameter" eSuperTypes="//String_Type //CalculateableParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_Original_FunctionalOperator" abstract="true" eSuperTypes="//Double_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Double"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_ExpressionOperator" abstract="true" eSuperTypes="//ExpressionOperator //Number_Operator">
    <eAnnotations source="information">
      <details key="type" value="Number"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_Or_BitOperator" eSuperTypes="//Integer_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Integer"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_FunctionalOperator" abstract="true" eSuperTypes="//Operator //ExpressionOperator //Integer_Operator //Integer_ExpressionOperator //TypedElement //FunctionalOperator"/>
  <eClassifiers xsi:type="ecore:EDataType" name="String" instanceClassName="java.lang.String"/>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="codePointBefore_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="codePointBefore"/>
      <details key="literal" value=".codePointBefore"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.codePointBefore&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(index);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="index" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Exam_examID_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Min_AggregationOperator_Double" eSuperTypes="//CalculatingAggregationOperator //Double_EvaluationOperation_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Double"/>
      <details key="literal" value="min"/>
      <details key="operatorXTextLiteral" value="min_Double"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;min&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(calculateable);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="calculateable" lowerBound="1" eType="//Double_CalculateableParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_Or_BitOperator" eSuperTypes="//Boolean_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Boolean"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_Type" abstract="true" eSuperTypes="//Type //Number_Type">
    <eAnnotations source="information">
      <details key="type" value="Double"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_Original_FunctionalOperator" abstract="true" eSuperTypes="//Integer_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Integer"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Boolean_toString_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_Boolean_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="toString"/>
      <details key="literal" value=".toString"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.toString&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_Original_FunctionalOperator" abstract="true" eSuperTypes="//String_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="String"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TypedElement" abstract="true">
    <eOperations name="getType" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EClass typeEClass = QmmPackage.eINSTANCE.getType();&#xA;    EClass type = null;&#xA;    for(EClass possibleTypeSubClass : this.eClass().getEAllSuperTypes()){&#xA;    &#x9;if(typeEClass.isSuperTypeOf(possibleTypeSubClass) &amp;&amp; !typeEClass.equals(possibleTypeSubClass)){&#xA;    &#x9;&#x9;type = possibleTypeSubClass;&#xA;    &#x9;}&#xA;    }&#xA;    return type;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_And_BitOperator" eSuperTypes="//CharSequence_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="CharSequence"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Integer_Object_Number_hashCode_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Integer_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="hashCode"/>
      <details key="literal" value=".hashCode"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.hashCode&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="compareToString_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="compareToString"/>
      <details key="literal" value=".compareTo"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.compareTo&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(anotherString);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="anotherString" lowerBound="1" eType="//String_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="contains_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="contains"/>
      <details key="literal" value=".contains"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.contains&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(charSequence);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="charSequence" lowerBound="1" eType="//CharSequence_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_FunctionalParameter" eSuperTypes="//Boolean_Type //FunctionalParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Calculateable_Argument" abstract="true" eSuperTypes="//ReferenceArgument //FunctionalArgument"/>
  <eClassifiers xsi:type="ecore:EClass" name="Calculateable" abstract="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="CalculatingAggregationOperator" abstract="true" eSuperTypes="//AggregationOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_EvaluationOperation_Argument" abstract="true" eSuperTypes="//EvaluationOperation_Argument //Integer_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Integer"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_And_BitOperator" eSuperTypes="//Double_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Double"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Original_FunctionalOperator" abstract="true" eSuperTypes="//Number_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Number"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Operator" abstract="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_Original_FunctionalOperator" abstract="true" eSuperTypes="//Boolean_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Boolean"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_FunctionalOperator" abstract="true" eSuperTypes="//Operator //ExpressionOperator //String_Operator //String_ExpressionOperator //TypedElement //FunctionalOperator"/>
  <eClassifiers xsi:type="ecore:EDataType" name="CharSequence" instanceClassName="java.lang.CharSequence"/>
  <eClassifiers xsi:type="ecore:EClass" name="Character_Or_BitOperator" eSuperTypes="//Character_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Character"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="equals_FunctionalOperator" eSuperTypes="//Object_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="equals"/>
      <details key="literal" value=".equals"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.equals&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(obj);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="obj" lowerBound="1" eType="//Object_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Number_equals_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_Number_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="equals"/>
      <details key="literal" value=".equals"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.equals&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(obj);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="obj" lowerBound="1" eType="//Object_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_CalculateableElement" abstract="true" eSuperTypes="//Double_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Double_Object_Number_hashCode_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Double_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="hashCode"/>
      <details key="literal" value=".hashCode"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.hashCode&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InheritedFrom_Object_to_Boolean_FunctionalOperator" abstract="true" eSuperTypes="//Boolean_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Object"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_String_Object_CharSequence_toString_FunctionalOperator" eSuperTypes="//InheritedFrom_CharSequence_to_String_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="toString"/>
      <details key="literal" value=".toString"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.toString&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AggregationOperator" abstract="true" eSuperTypes="//EvaluationFunctionalOperator //Integer_Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_PrimitiveArgument" eSuperTypes="//Integer_Argument //PrimitiveArgument">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="//Integer"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_FunctionalParameter" eSuperTypes="//CharSequence_Type //FunctionalParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="Integer" instanceClassName="java.lang.Integer"/>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Integer_smallerThan_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Integer_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="smallerThan"/>
      <details key="literal" value="&lt;"/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&lt;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Character_toString_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_Character_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="toString"/>
      <details key="literal" value=".toString"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.toString&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Person_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//Person" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="smallerEquals_FunctionalOperator" eSuperTypes="//Number_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="smallerEquals"/>
      <details key="literal" value="&lt;="/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&lt;=&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PrimitiveArgument" abstract="true" eSuperTypes="//FunctionalArgument"/>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_FunctionalOperator" abstract="true" eSuperTypes="//Operator //ExpressionOperator //Boolean_Operator //Boolean_ExpressionOperator //TypedElement //FunctionalOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Double_Or_BitOperator" eSuperTypes="//Double_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Double"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_CharSequence_hashCode_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_CharSequence_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="hashCode"/>
      <details key="literal" value=".hashCode"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.hashCode&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_PrimitiveArgument" eSuperTypes="//Object_Argument //PrimitiveArgument">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="//Object"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_ExpressionOperator" abstract="true" eSuperTypes="//ExpressionOperator //Boolean_Operator">
    <eAnnotations source="information">
      <details key="type" value="Boolean"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeEClass" abstract="true" eSuperTypes="//NamedElement //NegatableElement //Countable"/>
  <eClassifiers xsi:type="ecore:EClass" name="NamedElement" abstract="true">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if(this.name != null){&#xA;&#x9;&#x9;if(this.name.equals(&quot;elem&quot;)){&#xA;&#x9;&#x9;&#x9;String errorMessage=&quot;The name can't be 'elem'. 'elem' is a reserved literal.&quot;;&#xA;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.SELECT_CLAUSE__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if(this.name.startsWith(&quot;query_&quot;)){&#xA;&#x9;&#x9;&#x9;String errorMessage=&quot;The name can't start with 'query_'. 'query_' is a reserved literal prefix.&quot;;&#xA;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.SELECT_CLAUSE__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" iD="true">
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EvaluationBitOperator" abstract="true" eSuperTypes="//EvaluationOperator //BitOperator">
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//EvaluationOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_FunctionalType" abstract="true" eSuperTypes="//String_Type //FunctionalType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//String_FunctionalOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="String_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Argument" abstract="true" eSuperTypes="//FunctionalArgument //Object_FunctionalType"/>
  <eClassifiers xsi:type="ecore:EClass" name="String_Type" abstract="true" eSuperTypes="//Type //CharSequence_Type">
    <eAnnotations source="information">
      <details key="type" value="String"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="compareToBoolean_FunctionalOperator" eSuperTypes="//Boolean_Original_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="compareToBoolean"/>
      <details key="literal" value=".compareTo"/>
      <details key="functionalOperatorType" value="Boolean"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.compareTo&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(b);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="b" lowerBound="1" eType="//Boolean_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CountableReferenceParameter" eSuperTypes="//Parameter">
    <eStructuralFeatures xsi:type="ecore:EReference" name="argument" lowerBound="1" eType="//Countable_ReferenceArgument" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_FunctionalParameter" eSuperTypes="//Integer_Type //FunctionalParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_FunctionalParameter" eSuperTypes="//String_Type //FunctionalParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Character_FunctionalParameter" eSuperTypes="//Character_Type //FunctionalParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_CalculateableParameter" eSuperTypes="//Number_Type //CalculateableParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Double_Object_Number_equals_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Double_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="equals"/>
      <details key="literal" value=".equals"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.equals&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(obj);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="obj" lowerBound="1" eType="//Object_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Person_name_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="length_FunctionalOperator" eSuperTypes="//CharSequence_Original_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="length"/>
      <details key="literal" value=".length"/>
      <details key="functionalOperatorType" value="CharSequence"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.length&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="concat_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="concat"/>
      <details key="literal" value=".concat"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.concat&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(str);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="str" lowerBound="1" eType="//String_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CourseType_AttributeEClass" abstract="true" eSuperTypes="//EnumerationAttributeEClass">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//CourseType_EnumerationOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_Argument" abstract="true" eSuperTypes="//FunctionalArgument //Double_FunctionalType"/>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_Argument" abstract="true" eSuperTypes="//FunctionalArgument //Boolean_FunctionalType"/>
  <eClassifiers xsi:type="ecore:EClass" name="Number_FunctionalParameter" eSuperTypes="//Number_Type //FunctionalParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Reference_OrGroup" abstract="true" eSuperTypes="//OrGroup"/>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EDataType" name="Object" instanceClassName="java.lang.Object"/>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator" eSuperTypes="//InheritedFrom_CharSequence_to_String_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="hashCode"/>
      <details key="literal" value=".hashCode"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.hashCode&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Character_BitOperator" abstract="true" eSuperTypes="//Character_ExpressionOperator //BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Character"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//Character_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="indexOfChar_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="indexOfChar"/>
      <details key="literal" value=".indexOf"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.indexOf&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(ch);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ch" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="equalsIgnoreCase_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="equalsIgnoreCase"/>
      <details key="literal" value=".equalsIgnoreCase"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.equalsIgnoreCase&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(anotherString);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="anotherString" lowerBound="1" eType="//String_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExpressionOperator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_And_BitOperator" eSuperTypes="//Boolean_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Boolean"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InheritedFrom_Object_to_Number_FunctionalOperator" abstract="true" eSuperTypes="//Number_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Object"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_PrimitiveArgument" eSuperTypes="//CharSequence_Argument //PrimitiveArgument">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="//CharSequence"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EvaluationFunctionalOperator" abstract="true" eSuperTypes="//EvaluationOperator //FunctionalOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Integer_Object_Number_toString_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Integer_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="toString"/>
      <details key="literal" value=".toString"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.toString&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="isEmpty_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="isEmpty"/>
      <details key="literal" value=".isEmpty"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.isEmpty&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_Type" abstract="true" eSuperTypes="//Type //Number_Type">
    <eAnnotations source="information">
      <details key="type" value="Integer"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="toString_FunctionalOperator" eSuperTypes="//Object_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="toString"/>
      <details key="literal" value=".toString"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.toString&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Number_hashCode_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_Number_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="hashCode"/>
      <details key="literal" value=".hashCode"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.hashCode&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Type" abstract="true" eSuperTypes="//Type">
    <eAnnotations source="information">
      <details key="type" value="Object"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_EvaluationOperation_Argument" abstract="true" eSuperTypes="//EvaluationOperation_Argument //CharSequence_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="CharSequence"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Student_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//Student" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Character_ExpressionOperator" abstract="true" eSuperTypes="//ExpressionOperator //Character_Operator">
    <eAnnotations source="information">
      <details key="type" value="Character"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="hashCode_FunctionalOperator" eSuperTypes="//Object_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="hashCode"/>
      <details key="literal" value=".hashCode"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.hashCode&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="IntegerParseInt_ClassOperator" eSuperTypes="//ClassOperator //Integer_EvaluationOperation_Argument">
    <eAnnotations source="information">
      <details key="functonalType" value="Integer"/>
      <details key="literal" value="Integer.parseInt"/>
      <details key="operatorXTextLiteral" value="Integer.parseInt"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;Integer.parseInt&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(calculateable);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="calculateable" lowerBound="1" eType="//String_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CourseType_CalculateableElement" abstract="true" eSuperTypes="//CourseType_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="CountingAggregationOperator" abstract="true" eSuperTypes="//AggregationOperator">
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(countable);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="countable" lowerBound="1" eType="//CountableReferenceParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Exam_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass rc: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = rc.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(rc)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(rc == this.eContainer) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = rc.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = rc.getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//Exam"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OrGroup" abstract="true" eSuperTypes="//NamedElement //GeneralizableElement //NegatableElement //Countable">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EClass containerEClass = this.eContainingFeature().getEContainingClass();&#xA;if(containerEClass != null){&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EStructuralFeature containment = this.eClass().getEStructuralFeature(&quot;containment&quot;);&#xA;&#x9;&#x9;if(containment != null){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EClassifier eType&#x9;= containment.getEType();&#xA;&#x9;&#x9;&#x9;if(eType != null &amp;&amp; eType instanceof EClass){&#xA;&#x9;&#x9;&#x9;&#x9;EClass typeEClass = (EClass)eType;&#xA;&#x9;&#x9;&#x9;&#x9;if(!containerEClass.isSuperTypeOf(typeEClass) &amp;&amp; this.transitive){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = &quot;Feature &quot; + this.getName() + &quot; can't be transitive! It is defined by the type &quot; + containerEClass.getName() + &quot;, but is itself not an instance of (a subtype of) this type.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;}&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="transitive" lowerBound="1" defaultValueLiteral="false">
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Professor_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass rc: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = rc.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(rc)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(rc == this.eContainer) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = rc.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = rc.getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//Professor"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="smallerThan_FunctionalOperator" eSuperTypes="//Number_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="smallerThan"/>
      <details key="literal" value="&lt;"/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&lt;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_Type" abstract="true" eSuperTypes="//Type //Object_Type">
    <eAnnotations source="information">
      <details key="type" value="CharSequence"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_ExpressionOperator" abstract="true" eSuperTypes="//ExpressionOperator //String_Operator">
    <eAnnotations source="information">
      <details key="type" value="String"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Or_EvaluationBitOperator" eSuperTypes="//EvaluationBitOperator">
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Character_Type" abstract="true" eSuperTypes="//Type //Object_Type">
    <eAnnotations source="information">
      <details key="type" value="Character"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_CalculateableParameter" eSuperTypes="//CharSequence_Type //CalculateableParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Character_And_BitOperator" eSuperTypes="//Character_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Character"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="Character_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Type" abstract="true" eSuperTypes="//Type //Object_Type">
    <eAnnotations source="information">
      <details key="type" value="Number"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="codePointAt_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="codePointAt"/>
      <details key="literal" value=".codePointAt"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.codePointAt&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(index);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="index" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_BitOperator" abstract="true" eSuperTypes="//Integer_ExpressionOperator //BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Integer"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//Integer_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Number_toString_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_Number_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="toString"/>
      <details key="literal" value=".toString"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.toString&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_Or_BitOperator" eSuperTypes="//String_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="String"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_BitOperator" abstract="true" eSuperTypes="//Number_ExpressionOperator //BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Number"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//Number_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SelectClause">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="for(qmm.NamedElement n : namedElements){&#xA;&#x9;&#x9;&#x9;if(n instanceof qmm.NegatableElement &amp;&amp; ((qmm.NegatableElement)n).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;String errorMessage = n.getName() + &quot; is negated. It is not possible to select negated elements&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.SELECT_CLAUSE__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = n.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = n.getName() + &quot; is defined within an Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's atm not possible to reference nodes that are defined in Or-branches of other nodes.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.SELECT_CLAUSE__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = n.getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.SELECT_CLAUSE__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="namedElements" lowerBound="1" upperBound="-1" eType="//NamedElement"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_PrimitiveArgument" eSuperTypes="//Number_Argument //PrimitiveArgument">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="//Number"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Max_AggregationOperator_Double" eSuperTypes="//CalculatingAggregationOperator //Double_EvaluationOperation_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Double"/>
      <details key="literal" value="max"/>
      <details key="operatorXTextLiteral" value="max_Double"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;max&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(calculateable);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="calculateable" lowerBound="1" eType="//Double_CalculateableParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="And_EvaluationBitOperator" eSuperTypes="//EvaluationBitOperator">
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InheritedFrom_Object_to_Character_FunctionalOperator" abstract="true" eSuperTypes="//Character_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Object"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="String_CalculateableElementReferenceArgument" eSuperTypes="//CalculateableElement_ReferenceArgument //String_FunctionalType">
    <eAnnotations source="information">
      <details key="functionalType" value="String"/>
    </eAnnotations>
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="qmm.RootClass containingRootClass = null;&#xA;qmm.RootClass referencesRootClass = null;&#xA;qmm.AttributeEClass containingAttributeEClass = null;&#xA;qmm.AttributeEClass referencesAttributeEClass = null;&#xA;if(this.eContainer() != null &amp;&amp; this.reference != null){&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(eContainer != null &amp;&amp; !(eContainer instanceof qmm.RootClass)){&#xA;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.AttributeEClass){&#xA;&#x9;&#x9;&#x9;&#x9;containingAttributeEClass = (qmm.AttributeEClass)eContainer;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;containingRootClass = (qmm.RootClass)eContainer;&#xA;&#xA;&#x9;&#x9;eContainer = this.reference.eContainer();&#xA;&#x9;&#x9;while(eContainer != null &amp;&amp; !(eContainer instanceof qmm.RootClass)){&#xA;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;referencesRootClass = (qmm.RootClass)eContainer;&#xA;&#x9;&#x9;if(this.reference instanceof qmm.AttributeEClass) referencesAttributeEClass = (qmm.AttributeEClass)this.reference;&#xA;&#xA;&#x9;&#x9;if(containingAttributeEClass != null &amp;&amp; referencesAttributeEClass != null &amp;&amp; containingAttributeEClass == referencesAttributeEClass){  //self-reference in expression !&#xA;&#x9;&#x9;&#x9;String errorMessage = &quot;Self-reference in expression of attribute &quot; + containingAttributeEClass.getName() + &quot; detected. Self-references are not allowed!&quot;;&#xA;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if(containingRootClass != referencesRootClass){&#xA;&#x9;&#x9;&#x9;String errorMessage = &quot;The referenced element &quot; + this.reference + &quot; is contained by a different parent-element than the expression's parent-element. Cross-references are not supported.&quot;;&#xA;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if(this.reference instanceof qmm.NegatableElement &amp;&amp; ((qmm.NegatableElement)this.reference).isNegated())diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Reference to a negated element in &quot; + this + &quot; has been detected. References to negated elements are not allowed.&quot;,new Object[] { this }));&#xA;&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" lowerBound="1" eType="//String_CalculateableElement"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="offsetByCodePoints_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="offsetByCodePoints"/>
      <details key="literal" value=".offsetByCodePoints"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.offsetByCodePoints&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(index);&#xA;parameterList.add(codePointOffset);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="index" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="codePointOffset" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Argument" abstract="true" eSuperTypes="//FunctionalArgument //Number_FunctionalType"/>
  <eClassifiers xsi:type="ecore:EClass" name="Object_FunctionalOperator" abstract="true" eSuperTypes="//Object_ExpressionOperator //FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Object"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_Argument" abstract="true" eSuperTypes="//FunctionalArgument //String_FunctionalType"/>
  <eClassifiers xsi:type="ecore:EClass" name="indexOfCharFromIndex_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="indexOfCharFromIndex"/>
      <details key="literal" value=".indexOf"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.indexOf&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(ch);&#xA;parameterList.add(fromIndex);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ch" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="fromIndex" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_EvaluationOperation_Argument" abstract="true" eSuperTypes="//EvaluationOperation_Argument //Double_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Double"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_And_BitOperator" eSuperTypes="//Number_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Number"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Countable" abstract="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_FunctionalType" abstract="true" eSuperTypes="//Boolean_Type //FunctionalType //NegatableElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//Boolean_FunctionalOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CalculateableElement_ReferenceArgument" abstract="true" eSuperTypes="//Calculateable_Argument"/>
  <eClassifiers xsi:type="ecore:EClass" name="endsWith_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="endsWith"/>
      <details key="literal" value=".endsWith"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.endsWith&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(suffix);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="suffix" lowerBound="1" eType="//String_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="startsWithOffset_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="startsWithOffset"/>
      <details key="literal" value=".starstWith"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.starstWith&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(prefix);&#xA;parameterList.add(toffset);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="prefix" lowerBound="1" eType="//String_FunctionalParameter" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="toffset" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_FunctionalOperator" abstract="true" eSuperTypes="//Operator //ExpressionOperator //Number_Operator //Number_ExpressionOperator //TypedElement //FunctionalOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="FindQueryCollection">
    <eStructuralFeatures xsi:type="ecore:EReference" name="findQueries" lowerBound="1" upperBound="-1" eType="//FindQuery" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Professor_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//Professor" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_CalculateableElement" abstract="true" eSuperTypes="//Number_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="Double_BitOperator" abstract="true" eSuperTypes="//Double_ExpressionOperator //BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Double"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//Double_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Course_courseType_AttrEClass" eSuperTypes="//CourseType_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Character_CalculateableElement" abstract="true" eSuperTypes="//Character_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_CalculateableParameter" eSuperTypes="//Boolean_Type //CalculateableParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Character_FunctionalOperator" abstract="true" eSuperTypes="//Operator //ExpressionOperator //Character_Operator //Character_ExpressionOperator //TypedElement //FunctionalOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Character_CalculateableParameter" eSuperTypes="//Character_Type //CalculateableParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RegularAttributeEClass" abstract="true" eSuperTypes="//AttributeEClass //GeneralizableElement">
    <eOperations name="validateCheckExpression" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EClass booleanType = QmmPackage.eINSTANCE.getBoolean_Type();&#xA;EClass functionalOperatorType = QmmPackage.eINSTANCE.getFunctionalOperator();&#xA;EClass bitOperatorType = QmmPackage.eINSTANCE.getBitOperator();&#xA;qmm.Operator operator = (qmm.Operator)o;&#xA;EList diagnosticList = new org.eclipse.emf.common.util.BasicEList();&#xA;&#xA;if(functionalOperatorType.isSuperTypeOf(operator.eClass())){&#xA;&#x9;qmm.FunctionalOperator lastOperator = (qmm.FunctionalOperator)((qmm.FunctionalOperator)operator).getLastOperator();&#xA;    &#x9;EClass lastOperatorType = (EClass)lastOperator.getType();&#xA;    &#x9;if(!booleanType.isSuperTypeOf(lastOperatorType)){&#xA;&#x9;&#x9;&#x9;String errorMessage = &quot;Operator &quot; + lastOperator.eClass().getName() + &quot; of attribute &quot; + this.eClass().getName() + &quot; is of type &quot; + lastOperatorType.getName() + &quot;, but must be (a subtype) of type &quot; + booleanType.getName() + &quot;.&quot;;&#xA;    &#x9;&#x9;diagnosticList.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage,new Object[] { this }));&#xA;    &#x9;}&#xA;}else if(bitOperatorType.isSuperTypeOf(operator.eClass())){&#xA;    for(qmm.Operator op : (EList&lt;qmm.Operator>)operator.eGet(operator.eClass().getEStructuralFeature(&quot;connects&quot;))){&#xA;    &#x9;diagnosticList.addAll(validateCheckExpression(op));&#xA;    }&#xA;}&#xA;return diagnosticList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
      <eParameters name="o">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_BitOperator" abstract="true" eSuperTypes="//String_ExpressionOperator //BitOperator">
    <eAnnotations source="information">
      <details key="type" value="String"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//String_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Character_Argument" abstract="true" eSuperTypes="//FunctionalArgument //Character_FunctionalType"/>
  <eClassifiers xsi:type="ecore:EClass" name="Person_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass rc: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = rc.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(rc)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(rc == this.eContainer) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = rc.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = rc.getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//Person"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_CalculateableElement" abstract="true" eSuperTypes="//CharSequence_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_FunctionalOperator" abstract="true" eSuperTypes="//Operator //ExpressionOperator //CharSequence_Operator //CharSequence_ExpressionOperator //TypedElement //FunctionalOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Character_PrimitiveArgument" eSuperTypes="//Character_Argument //PrimitiveArgument">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="//Character"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_ExpressionOperator" abstract="true" eSuperTypes="//ExpressionOperator //Integer_Operator">
    <eAnnotations source="information">
      <details key="type" value="Integer"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_Type" abstract="true" eSuperTypes="//Type //Object_Type">
    <eAnnotations source="information">
      <details key="type" value="Boolean"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="parseBoolean_FunctionalOperator" eSuperTypes="//Boolean_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="parseBoolean"/>
      <details key="literal" value=".parseBoolean"/>
      <details key="functionalOperatorType" value="Boolean"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.parseBoolean&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(s);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="s" lowerBound="1" eType="//String_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Integer_greaterThan_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Integer_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="greaterThan"/>
      <details key="literal" value=">"/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;>&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InheritedFrom_Number_to_Double_FunctionalOperator" abstract="true" eSuperTypes="//Double_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Number"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EvaluationOperator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Person_email_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_AttributeEClass" abstract="true" eSuperTypes="//RegularAttributeEClass //Integer_CalculateableElement">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.operator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateCheckExpression(this.operator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//Integer_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CourseType_EnumerationOperator" eSuperTypes="//EnumerationOperator //CourseType_Operator">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="argument" lowerBound="1" eType="//CourseType"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="or" eType="//CourseType_EnumerationOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Max_AggregationOperator_Integer" eSuperTypes="//CalculatingAggregationOperator //Integer_EvaluationOperation_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Integer"/>
      <details key="literal" value="max"/>
      <details key="operatorXTextLiteral" value="max_Integer"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;max&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(calculateable);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="calculateable" lowerBound="1" eType="//Integer_CalculateableParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_Original_FunctionalOperator" abstract="true" eSuperTypes="//CharSequence_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="CharSequence"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="GeneralizableElement" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="generalized" lowerBound="1" defaultValueLiteral="false">
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Course_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//Course" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_FunctionalType" abstract="true" eSuperTypes="//Double_Type //FunctionalType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//Double_FunctionalOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_FunctionalType" abstract="true" eSuperTypes="//Object_Type //FunctionalType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//Object_FunctionalOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ClassOperator" abstract="true" eSuperTypes="//EvaluationFunctionalOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_FunctionalType" abstract="true" eSuperTypes="//Integer_Type //FunctionalType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//Integer_FunctionalOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_AttributeEClass" abstract="true" eSuperTypes="//RegularAttributeEClass //String_CalculateableElement">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;if(diagnostic!=null){&#xA;    if(this.operator != null){&#xA;    &#x9;EList&lt;org.eclipse.emf.common.util.BasicDiagnostic> diagnosticList = validateCheckExpression(this.operator);&#xA;    &#x9;for(int i=0; i&lt;diagnosticList.size(); i++){&#xA;    &#x9;&#x9;diagnostic.add((org.eclipse.emf.common.util.BasicDiagnostic)diagnosticList.get(i));&#xA;    &#x9;}&#xA;    }&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//String_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_PrimitiveArgument" eSuperTypes="//Boolean_Argument //PrimitiveArgument">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="//Boolean"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_EvaluationOperation_Argument" abstract="true" eSuperTypes="//EvaluationOperation_Argument //String_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="String"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_CalculateableElement" abstract="true" eSuperTypes="//Integer_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="Sum_AggregationOperator_Integer" eSuperTypes="//CalculatingAggregationOperator //Integer_EvaluationOperation_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Integer"/>
      <details key="literal" value="sum"/>
      <details key="operatorXTextLiteral" value="sum_Integer"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;sum&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(calculateable);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="calculateable" lowerBound="1" eType="//Integer_CalculateableParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Type" abstract="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="FunctionalParameter" abstract="true" eSuperTypes="//Parameter">
    <eStructuralFeatures xsi:type="ecore:EReference" name="argument" lowerBound="1" eType="//FunctionalArgument" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EnumerationOperator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Double_greaterEquals_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Double_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="greaterEquals"/>
      <details key="literal" value=">="/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;>=&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_CalculateableParameter" eSuperTypes="//Integer_Type //CalculateableParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_FunctionalType" abstract="true" eSuperTypes="//CharSequence_Type //FunctionalType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//CharSequence_FunctionalOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_CalculateableElement" abstract="true" eSuperTypes="//String_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="InheritedFrom_Number_to_Integer_FunctionalOperator" abstract="true" eSuperTypes="//Integer_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Number"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_String_length_FunctionalOperator" eSuperTypes="//InheritedFrom_CharSequence_to_String_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="length"/>
      <details key="literal" value=".length"/>
      <details key="functionalOperatorType" value="CharSequence"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.length&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_ExpressionOperator" abstract="true" eSuperTypes="//ExpressionOperator //CharSequence_Operator">
    <eAnnotations source="information">
      <details key="type" value="CharSequence"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="indexOfString_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="indexOfString"/>
      <details key="literal" value=".indexOf"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.indexOf&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(str);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="str" lowerBound="1" eType="//String_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="trim_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="trim"/>
      <details key="literal" value=".trim"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.trim&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="greaterEquals_FunctionalOperator" eSuperTypes="//Number_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="greaterEquals"/>
      <details key="literal" value=">="/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;>=&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Student_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass rc: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = rc.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(rc)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(rc == this.eContainer) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = rc.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = rc.getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//Student"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="String_And_BitOperator" eSuperTypes="//String_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="String"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CalculateableElement" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="Course_courseNumber_AttrEClass" eSuperTypes="//Integer_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_EvaluationOperation_Argument" abstract="true" eSuperTypes="//EvaluationOperation_Argument //Boolean_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Boolean"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="greaterThan_FunctionalOperator" eSuperTypes="//Number_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="greaterThan"/>
      <details key="literal" value=">"/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;>&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Count_AggregationOperator" eSuperTypes="//CountingAggregationOperator //Integer_EvaluationOperation_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Integer"/>
      <details key="literal" value="count"/>
      <details key="operatorXTextLiteral" value="count"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;count&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_CalculateableElement" abstract="true" eSuperTypes="//Object_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="Min_AggregationOperator_Integer" eSuperTypes="//CalculatingAggregationOperator //Integer_EvaluationOperation_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Integer"/>
      <details key="literal" value="min"/>
      <details key="operatorXTextLiteral" value="min_Integer"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;min&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(calculateable);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="calculateable" lowerBound="1" eType="//Integer_CalculateableParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BitOperator" abstract="true" eSuperTypes="//ExpressionOperator //NegatableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Integer_greaterEquals_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Integer_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="greaterEquals"/>
      <details key="literal" value=">="/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;>=&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_And_BitOperator" eSuperTypes="//Object_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Object"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RootClass" abstract="true" eSuperTypes="//NamedElement">
    <eOperations name="validateCheckExpression" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EClass booleanType = QmmPackage.eINSTANCE.getBoolean_Type();&#xA;EClass functionalOperatorType = QmmPackage.eINSTANCE.getFunctionalOperator();&#xA;EClass bitOperatorType = QmmPackage.eINSTANCE.getBitOperator();&#xA;qmm.Operator operator = (qmm.Operator)o;&#xA;EList diagnosticList = new org.eclipse.emf.common.util.BasicEList();&#xA;&#xA;if(functionalOperatorType.isSuperTypeOf(operator.eClass())){&#xA;&#x9;qmm.FunctionalOperator lastOperator = (qmm.FunctionalOperator)((qmm.FunctionalOperator)operator).getLastOperator();&#xA;    &#x9;EClass lastOperatorType = (EClass)lastOperator.getType();&#xA;    &#x9;if(!booleanType.isSuperTypeOf(lastOperatorType)){&#xA;&#x9;&#x9;&#x9;String errorMessage = &quot;Operator &quot; + lastOperator.eClass().getName() + &quot; of attribute &quot; + this.eClass().getName() + &quot; is of type &quot; + lastOperatorType.getName() + &quot;, but must be (a subtype) of type &quot; + booleanType.getName() + &quot;.&quot;;&#xA;    &#x9;&#x9;diagnosticList.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage,new Object[] { this }));&#xA;    &#x9;}&#xA;}else if(bitOperatorType.isSuperTypeOf(operator.eClass())){&#xA;    for(qmm.Operator op : (EList&lt;qmm.Operator>)operator.eGet(operator.eClass().getEStructuralFeature(&quot;connects&quot;))){&#xA;    &#x9;diagnosticList.addAll(validateCheckExpression(op));&#xA;    }&#xA;}&#xA;return diagnosticList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
      <eParameters name="o">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
      </eParameters>
    </eOperations>
    <eOperations name="validateAllCheckExpressions" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="&#xA;&#x9;EList&lt;qmm.Operator> operators = (EList&lt;qmm.Operator>)o;&#xA;&#x9;EList diagnosticList = new org.eclipse.emf.common.util.BasicEList();&#xA;&#x9;if(operators != null){&#xA;&#x9;&#x9;for(qmm.Operator operator:operators){&#xA;&#x9;&#x9;&#x9;diagnosticList.addAll(validateCheckExpression(operator));&#xA;&#x9;&#x9;}&#xA;   }&#xA;&#x9;return diagnosticList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
      <eParameters name="o">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="EvaluationOperator" upperBound="-1" eType="//EvaluationOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Containment_OrGroup" abstract="true" eSuperTypes="//OrGroup"/>
  <eClassifiers xsi:type="ecore:EClass" name="Object_CharSequence_toString_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_CharSequence_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="toString"/>
      <details key="literal" value=".toString"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.toString&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Integer_Object_Number_equals_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Integer_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="equals"/>
      <details key="literal" value=".equals"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.equals&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(obj);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="obj" lowerBound="1" eType="//Object_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NegatableElement" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="negated" lowerBound="1" defaultValueLiteral="false">
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Character_EvaluationOperation_Argument" abstract="true" eSuperTypes="//EvaluationOperation_Argument //Character_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Character"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_FunctionalParameter" eSuperTypes="//Object_Type //FunctionalParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_FunctionalType" abstract="true" eSuperTypes="//Number_Type //FunctionalType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//Number_FunctionalOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CourseType_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EDataType" name="Boolean" instanceClassName="java.lang.Boolean"/>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_Or_BitOperator" eSuperTypes="//CharSequence_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="CharSequence"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Character_equals_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_Character_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="equals"/>
      <details key="literal" value=".equals"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.equals&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(obj);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="obj" lowerBound="1" eType="//Object_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Parameter" abstract="true" eSuperTypes="//TypedElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Or_BitOperator" eSuperTypes="//Object_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Object"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_BitOperator" abstract="true" eSuperTypes="//CharSequence_ExpressionOperator //BitOperator">
    <eAnnotations source="information">
      <details key="type" value="CharSequence"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//CharSequence_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="startsWith_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="startsWith"/>
      <details key="literal" value=".startsWith"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.startsWith&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(prefix);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="prefix" lowerBound="1" eType="//String_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_CalculateableElementReferenceArgument" eSuperTypes="//CalculateableElement_ReferenceArgument //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="functionalType" value="Integer"/>
    </eAnnotations>
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="qmm.RootClass containingRootClass = null;&#xA;qmm.RootClass referencesRootClass = null;&#xA;qmm.AttributeEClass containingAttributeEClass = null;&#xA;qmm.AttributeEClass referencesAttributeEClass = null;&#xA;if(this.eContainer() != null &amp;&amp; this.reference != null){&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(eContainer != null &amp;&amp; !(eContainer instanceof qmm.RootClass)){&#xA;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.AttributeEClass){&#xA;&#x9;&#x9;&#x9;&#x9;containingAttributeEClass = (qmm.AttributeEClass)eContainer;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;containingRootClass = (qmm.RootClass)eContainer;&#xA;&#xA;&#x9;&#x9;eContainer = this.reference.eContainer();&#xA;&#x9;&#x9;while(eContainer != null &amp;&amp; !(eContainer instanceof qmm.RootClass)){&#xA;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;referencesRootClass = (qmm.RootClass)eContainer;&#xA;&#x9;&#x9;if(this.reference instanceof qmm.AttributeEClass) referencesAttributeEClass = (qmm.AttributeEClass)this.reference;&#xA;&#xA;&#x9;&#x9;if(containingAttributeEClass != null &amp;&amp; referencesAttributeEClass != null &amp;&amp; containingAttributeEClass == referencesAttributeEClass){  //self-reference in expression !&#xA;&#x9;&#x9;&#x9;String errorMessage = &quot;Self-reference in expression of attribute &quot; + containingAttributeEClass.getName() + &quot; detected. Self-references are not allowed!&quot;;&#xA;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if(containingRootClass != referencesRootClass){&#xA;&#x9;&#x9;&#x9;String errorMessage = &quot;The referenced element &quot; + this.reference + &quot; is contained by a different parent-element than the expression's parent-element. Cross-references are not supported.&quot;;&#xA;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if(this.reference instanceof qmm.NegatableElement &amp;&amp; ((qmm.NegatableElement)this.reference).isNegated())diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, &quot;Reference to a negated element in &quot; + this + &quot; has been detected. References to negated elements are not allowed.&quot;,new Object[] { this }));&#xA;&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" lowerBound="1" eType="//Integer_CalculateableElement"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="Double" instanceClassName="java.lang.Double"/>
  <eClassifiers xsi:type="ecore:EDataType" name="Character" instanceClassName="java.lang.Character"/>
  <eClassifiers xsi:type="ecore:EClass" name="Character_FunctionalType" abstract="true" eSuperTypes="//Character_Type //FunctionalType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operator" eType="//Character_FunctionalOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Student_matriculationNumber_AttrEClass" eSuperTypes="//Integer_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Argument" abstract="true" eSuperTypes="//TypedElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="Double_ExpressionOperator" abstract="true" eSuperTypes="//ExpressionOperator //Double_Operator">
    <eAnnotations source="information">
      <details key="type" value="Double"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FunctionalType" abstract="true" eSuperTypes="//Type"/>
  <eClassifiers xsi:type="ecore:EClass" name="Double_FunctionalParameter" eSuperTypes="//Double_Type //FunctionalParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Character_Original_FunctionalOperator" abstract="true" eSuperTypes="//Character_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Character"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_FunctionalOperator" abstract="true" eSuperTypes="//Operator //ExpressionOperator //Double_Operator //Double_ExpressionOperator //TypedElement //FunctionalOperator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Sum_AggregationOperator_Double" eSuperTypes="//CalculatingAggregationOperator //Double_EvaluationOperation_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Double"/>
      <details key="literal" value="sum"/>
      <details key="operatorXTextLiteral" value="sum_Double"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;sum&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(calculateable);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="calculateable" lowerBound="1" eType="//Double_CalculateableParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CalculateableParameter" abstract="true" eSuperTypes="//Parameter">
    <eStructuralFeatures xsi:type="ecore:EReference" name="argument" lowerBound="1" eType="//Calculateable_Argument" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Double_Object_Number_toString_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Double_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="toString"/>
      <details key="literal" value=".toString"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.toString&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Boolean_equals_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_Boolean_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="equals"/>
      <details key="literal" value=".equals"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.equals&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(obj);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="obj" lowerBound="1" eType="//Object_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CourseType_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_And_BitOperator" eSuperTypes="//Integer_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Integer"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&amp;&amp;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InheritedFrom_Object_to_CharSequence_FunctionalOperator" abstract="true" eSuperTypes="//CharSequence_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="Object"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Countable_ReferenceArgument" eSuperTypes="//ReferenceArgument">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="qmm.RootClass containingRootClass = null;&#xA;qmm.RootClass referencesRootClass = null;&#xA;qmm.Countable containingCountable = null;&#xA;&#xA;if(this.reference != null){&#xA;&#x9;&#x9;if(this.reference instanceof qmm.Reference_OrGroup){&#xA;&#x9;&#x9;&#x9;qmm.Reference_OrGroup rog = (qmm.Reference_OrGroup)this.reference;&#xA;&#x9;&#x9;&#x9;EList&lt;org.eclipse.emf.ecore.EObject> references = (EList&lt;org.eclipse.emf.ecore.EObject>)rog.eGet(rog.eClass().getEStructuralFeature(&quot;reference&quot;));&#xA;&#x9;&#x9;&#x9;if(references.size()>0){&#xA;&#x9;&#x9;&#x9;&#x9;String errorMessage = &quot;Element &quot; + rog.getName() + &quot; is a concretized non-containment reference. It's not possible to use concretized non-containment references in evaluation operations in this prototype. Please remove ': ...' after the declaration of element &quot; + rog.getName() + &quot;, if you want to use &quot; + rog.getName() + &quot; in the evaluation operation.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.COUNTABLE_REFERENCE_ARGUMENT__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if(this.eContainer() != null){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = this.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !(eContainer instanceof qmm.RootClass)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Countable){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;containingCountable = (qmm.Countable)eContainer;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;containingRootClass = (qmm.RootClass)eContainer;&#xA;&#xA;&#x9;&#x9;&#x9;eContainer = this.reference.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !(eContainer instanceof qmm.RootClass)){&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;referencesRootClass = (qmm.RootClass)eContainer;&#xA;&#xA;&#x9;&#x9;&#x9;if(containingCountable != null &amp;&amp; containingCountable == reference){  //self-reference in expression !&#xA;&#x9;&#x9;&#x9;&#x9;String errorMessage = &quot;Self-reference in expression of &quot; + containingCountable + &quot; detected. Self-references are not allowed!&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.COUNTABLE_REFERENCE_ARGUMENT__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if(containingRootClass != referencesRootClass){&#xA;&#x9;&#x9;&#x9;&#x9;String errorMessage = &quot;The referenced element &quot; + this.reference + &quot; is contained by a different parent-element than the expression's parent-element. Cross-references are not supported.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.COUNTABLE_REFERENCE_ARGUMENT__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if(this.reference instanceof qmm.NegatableElement &amp;&amp; ((qmm.NegatableElement)this.reference).isNegated()){&#xA; &#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.COUNTABLE_REFERENCE_ARGUMENT__VALIDATE, &quot;Reference to a negated element in &quot; + this + &quot; has been detected. References to negated elements are not allowed.&quot;,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;}&#xA;&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" lowerBound="1" eType="//Countable"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Boolean_CalculateableElement" abstract="true" eSuperTypes="//Boolean_Calculateable //CalculateableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Integer_smallerEquals_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Integer_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="smallerEquals"/>
      <details key="literal" value="&lt;="/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&lt;=&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Character_hashCode_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_Character_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="hashCode"/>
      <details key="literal" value=".hashCode"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.hashCode&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="UniversityManagementSystem_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//UniversityManagementSystem" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_ExpressionOperator" abstract="true" eSuperTypes="//ExpressionOperator //Object_Operator">
    <eAnnotations source="information">
      <details key="type" value="Object"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Exam_Containment_OrGroup" eSuperTypes="//Containment_OrGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containment" upperBound="-1" eType="//Exam" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Double_smallerThan_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Double_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="smallerThan"/>
      <details key="literal" value="&lt;"/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&lt;&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ReferenceArgument" abstract="true" eSuperTypes="//Argument"/>
  <eClassifiers xsi:type="ecore:EClass" name="Professor_employeeNumber_AttrEClass" eSuperTypes="//Integer_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="doubleValue_FunctionalOperator" eSuperTypes="//Integer_Original_FunctionalOperator //Double_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="doubleValue"/>
      <details key="literal" value=".doubleValue"/>
      <details key="functionalOperatorType" value="Integer"/>
      <details key="functionalType" value="Double_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.doubleValue&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FunctionalArgument" abstract="true" eSuperTypes="//Argument"/>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_Argument" abstract="true" eSuperTypes="//FunctionalArgument //CharSequence_FunctionalType"/>
  <eClassifiers xsi:type="ecore:EClass" name="String_PrimitiveArgument" eSuperTypes="//String_Argument //PrimitiveArgument">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="//String"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_CalculateableParameter" eSuperTypes="//Object_Type //CalculateableParameter">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (diagnostic != null) {&#xA;&#x9;String errorMessage = &quot;&quot;;&#xA;&#x9;EClass thisType = (EClass) this.getType();&#xA;&#x9;if(this.argument!=null){&#xA;&#x9;&#x9;if (this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;)) != null) {&#xA;&#x9;&#x9;&#x9;qmm.FunctionalOperator lastFunctionalOperator = (qmm.FunctionalOperator) ((qmm.FunctionalOperator) this.argument.eGet(this.argument.eClass().getEStructuralFeature(&quot;operator&quot;))).getLastOperator();&#xA;&#x9;&#x9;&#x9;EClass lastFunctionalOperatorType = (EClass)lastFunctionalOperator.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(lastFunctionalOperatorType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + lastFunctionalOperatorType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;EClass argumentType = (EClass) this.argument.getType();&#xA;&#x9;&#x9;&#x9;if (!thisType.isSuperTypeOf(argumentType)) {&#xA;&#x9;&#x9;&#x9;&#x9;errorMessage = &quot;Parameter &quot; + this.toString() + &quot;: Argument of type &quot; + argumentType.getName() + &quot; is not compatible with parametertype &quot; + thisType.getName() + &quot;.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OBJECT_FUNCTIONAL_PARAMETER__VALIDATE, errorMessage, new Object[] { this }));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA; &#x9;}&#xA;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FindQuery">
    <eStructuralFeatures xsi:type="ecore:EReference" name="union" upperBound="-1" eType="//FindQuery" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="rootClass" lowerBound="1" upperBound="-1" eType="//RootClass" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="select" eType="//SelectClause" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="charAt_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Character_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="charAt"/>
      <details key="literal" value=".charAt"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Character_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.charAt&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="compareToStringIgnoreCase_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="compareToStringIgnoreCase"/>
      <details key="literal" value="compareToIgnoreCase"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;compareToIgnoreCase&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(str);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="str" lowerBound="1" eType="//String_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Or_BitOperator" eSuperTypes="//Number_BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Number"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;||&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Operator" abstract="true" eSuperTypes="//Operator"/>
  <eClassifiers xsi:type="ecore:EClass" name="CharSequence_String_Object_CharSequence_equals_FunctionalOperator" eSuperTypes="//InheritedFrom_CharSequence_to_String_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="equals"/>
      <details key="literal" value=".equals"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.equals&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(obj);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="obj" lowerBound="1" eType="//Object_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="Number" instanceClassName="java.lang.Number"/>
  <eClassifiers xsi:type="ecore:EClass" name="toUpperCase_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="toUpperCase"/>
      <details key="literal" value=".toUpperCase"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.toUpperCase&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_Boolean_hashCode_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_Boolean_FunctionalOperator //Integer_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="hashCode"/>
      <details key="literal" value=".hashCode"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Integer_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.hashCode&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FunctionalOperator" abstract="true" eSuperTypes="//ExpressionOperator //TypedElement">
    <eOperations name="getLastOperator" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="qmm.FunctionalOperator operator = this;&#xA;while(operator.eGet(operator.eClass().getEStructuralFeature(&quot;operator&quot;)) != null){&#xA;    operator = (qmm.FunctionalOperator) operator.eGet(operator.eClass().getEStructuralFeature(&quot;operator&quot;));&#xA;}&#xA;return operator;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Double_smallerEquals_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Double_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="smallerEquals"/>
      <details key="literal" value="&lt;="/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;&lt;=&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Double_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="EnumerationAttributeEClass" abstract="true" eSuperTypes="//AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Double_PrimitiveArgument" eSuperTypes="//Double_Argument //PrimitiveArgument">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="//Double"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="substring_FunctionalOperator" eSuperTypes="//String_Original_FunctionalOperator //String_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="substring"/>
      <details key="literal" value=".substring"/>
      <details key="functionalOperatorType" value="String"/>
      <details key="functionalType" value="String_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.substring&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(startIndex);&#xA;parameterList.add(endIndex);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="startIndex" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="endIndex" lowerBound="1" eType="//Integer_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EvaluationOperation_Argument" abstract="true" eSuperTypes="//Calculateable_Argument"/>
  <eClassifiers xsi:type="ecore:EClass" name="Course_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass rc: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = rc.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(rc)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(rc == this.eContainer) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = rc.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = rc.getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//Course"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Course_name_AttrEClass" eSuperTypes="//String_AttributeEClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Integer_Argument" abstract="true" eSuperTypes="//FunctionalArgument //Integer_FunctionalType"/>
  <eClassifiers xsi:type="ecore:EClass" name="Character_Calculateable" abstract="true" eSuperTypes="//Calculateable"/>
  <eClassifiers xsi:type="ecore:EClass" name="Object_BitOperator" abstract="true" eSuperTypes="//Object_ExpressionOperator //BitOperator">
    <eAnnotations source="information">
      <details key="type" value="Object"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="connects" lowerBound="2" upperBound="-1" eType="//Object_ExpressionOperator" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InheritedFrom_CharSequence_to_String_FunctionalOperator" abstract="true" eSuperTypes="//String_FunctionalOperator">
    <eAnnotations source="information">
      <details key="type" value="CharSequence"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="UniversityManagementSystem_Reference_OrGroup" eSuperTypes="//Reference_OrGroup">
    <eOperations name="validate" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="super.validate(diagnostic, context);&#xA;&#x9;&#x9;java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject> thisContainers = new java.util.ArrayList&lt;org.eclipse.emf.ecore.EObject>();&#xA;&#x9;&#x9;org.eclipse.emf.ecore.EObject thisContainer = this.eContainer();&#xA;&#xA;&#x9;&#x9;while(thisContainer != null){&#xA;&#x9;&#x9;&#x9;thisContainers.add(thisContainer);&#xA;&#x9;&#x9;&#x9;thisContainer = thisContainer.eContainer();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;for(qmm.RootClass rc: this.reference){&#xA;&#x9;&#x9;&#x9;org.eclipse.emf.ecore.EObject eContainer = rc.eContainer();&#xA;&#x9;&#x9;&#x9;while(eContainer != null &amp;&amp; !thisContainers.contains(rc)){&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.Containment_OrGroup){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;EList containment = (EList)eContainer.eGet(eContainer.eClass().getEStructuralFeature(&quot;containment&quot;));&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(rc == this.eContainer) break;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(containment.size() > 1){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = rc.getName() + &quot; is defined within an alternative Or-branch of node &quot; + ((qmm.OrGroup)eContainer).getName() + &quot;. It's not possible to reference nodes that are defined in alternative Or-branches.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(eContainer instanceof qmm.OrGroup &amp;&amp; ((qmm.OrGroup)eContainer).isNegated()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!thisContainers.contains(eContainer)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String errorMessage = rc.getName() + &quot; is a negated pattern or is defined within a negated pattern. It's not possible to reference nodes that are negated or are defined within negated patterns.&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagnostic.add(new org.eclipse.emf.common.util.BasicDiagnostic(org.eclipse.emf.common.util.Diagnostic.ERROR, qmm.util.QmmValidator.DIAGNOSTIC_SOURCE,qmm.util.QmmValidator.OR_GROUP__VALIDATE, errorMessage,new Object[] { this }));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;eContainer = eContainer.eContainer();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;return true;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="diagnostic">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain"/>
      </eParameters>
      <eParameters name="context">
        <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EMap"/>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="reference" upperBound="-1" eType="//UniversityManagementSystem"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_EvaluationOperation_Argument" abstract="true" eSuperTypes="//EvaluationOperation_Argument //Object_Argument">
    <eAnnotations source="information">
      <details key="functionalType" value="Object"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Number_Double_greaterThan_FunctionalOperator" eSuperTypes="//InheritedFrom_Number_to_Double_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="greaterThan"/>
      <details key="literal" value=">"/>
      <details key="functionalOperatorType" value="Number"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;>&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(i);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="i" lowerBound="1" eType="//Number_FunctionalParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object_CharSequence_equals_FunctionalOperator" eSuperTypes="//InheritedFrom_Object_to_CharSequence_FunctionalOperator //Boolean_FunctionalType">
    <eAnnotations source="information">
      <details key="name" value="equals"/>
      <details key="literal" value=".equals"/>
      <details key="functionalOperatorType" value="Object"/>
      <details key="functionalType" value="Boolean_FunctionalType"/>
    </eAnnotations>
    <eOperations name="getLiteral" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="return &quot;.equals&quot;;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getAllParameters" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="EList parameterList = new org.eclipse.emf.common.util.BasicEList();&#xA;parameterList.add(obj);&#xA;return parameterList;"/>
      </eAnnotations>
      <eType xsi:type="ecore:EDataType" href="http://www.eclipse.org/emf/2002/Ecore#//EEList"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="obj" lowerBound="1" eType="//Object_FunctionalParameter" containment="true"/>
  </eClassifiers>
</ecore:EPackage>
