/**
 * generated by Xtext 2.14.0
 */
package org.xtext.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.services.MQLGrammarAccess;
import qmm.FindQuery;
import qmm.FindQueryCollection;
import qmm.RootClass;
import qmm.SelectClause;

@SuppressWarnings("all")
public class MQLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MQLGrammarAccess _mQLGrammarAccess;
  
  protected void _format(final FindQueryCollection findQueryCollection, @Extension final IFormattableDocument document) {
    EList<FindQuery> _findQueries = findQueryCollection.getFindQueries();
    for (final FindQuery findQuery : _findQueries) {
      document.<FindQuery>format(findQuery);
    }
  }
  
  protected void _format(final FindQuery findQuery, @Extension final IFormattableDocument document) {
    EList<RootClass> _rootClass = findQuery.getRootClass();
    for (final RootClass rootClass : _rootClass) {
      document.<RootClass>format(rootClass);
    }
    document.<SelectClause>format(findQuery.getSelect());
  }
  
  public void format(final Object findQuery, final IFormattableDocument document) {
    if (findQuery instanceof XtextResource) {
      _format((XtextResource)findQuery, document);
      return;
    } else if (findQuery instanceof FindQuery) {
      _format((FindQuery)findQuery, document);
      return;
    } else if (findQuery instanceof FindQueryCollection) {
      _format((FindQueryCollection)findQuery, document);
      return;
    } else if (findQuery instanceof EObject) {
      _format((EObject)findQuery, document);
      return;
    } else if (findQuery == null) {
      _format((Void)null, document);
      return;
    } else if (findQuery != null) {
      _format(findQuery, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(findQuery, document).toString());
    }
  }
}
