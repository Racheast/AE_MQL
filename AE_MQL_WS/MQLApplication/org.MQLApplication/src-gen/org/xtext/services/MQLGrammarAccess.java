/*
 * generated by Xtext 2.14.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MQLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class FindQueryCollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.FindQueryCollection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFindQueryCollectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFindQueriesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFindQueriesFindQueryParserRuleCall_1_0 = (RuleCall)cFindQueriesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUnionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFindQueriesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFindQueriesFindQueryParserRuleCall_2_1_0 = (RuleCall)cFindQueriesAssignment_2_1.eContents().get(0);
		
		//FindQueryCollection:
		//	{FindQueryCollection} findQueries+=FindQuery ('union' findQueries+=FindQuery)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{FindQueryCollection} findQueries+=FindQuery ('union' findQueries+=FindQuery)*
		public Group getGroup() { return cGroup; }
		
		//{FindQueryCollection}
		public Action getFindQueryCollectionAction_0() { return cFindQueryCollectionAction_0; }
		
		//findQueries+=FindQuery
		public Assignment getFindQueriesAssignment_1() { return cFindQueriesAssignment_1; }
		
		//FindQuery
		public RuleCall getFindQueriesFindQueryParserRuleCall_1_0() { return cFindQueriesFindQueryParserRuleCall_1_0; }
		
		//('union' findQueries+=FindQuery)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'union'
		public Keyword getUnionKeyword_2_0() { return cUnionKeyword_2_0; }
		
		//findQueries+=FindQuery
		public Assignment getFindQueriesAssignment_2_1() { return cFindQueriesAssignment_2_1; }
		
		//FindQuery
		public RuleCall getFindQueriesFindQueryParserRuleCall_2_1_0() { return cFindQueriesFindQueryParserRuleCall_2_1_0; }
	}
	public class FindQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.FindQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFindQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFindKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRootClassAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cRootClassRootClassParserRuleCall_2_0_0 = (RuleCall)cRootClassAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSelectKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSelectAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSelectSelectClauseParserRuleCall_3_1_0 = (RuleCall)cSelectAssignment_3_1.eContents().get(0);
		
		//FindQuery:
		//	{FindQuery} 'Find' (rootClass+=RootClass ';')+ ('Select' select=SelectClause)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{FindQuery} 'Find' (rootClass+=RootClass ';')+ ('Select' select=SelectClause)?
		public Group getGroup() { return cGroup; }
		
		//{FindQuery}
		public Action getFindQueryAction_0() { return cFindQueryAction_0; }
		
		//'Find'
		public Keyword getFindKeyword_1() { return cFindKeyword_1; }
		
		//(rootClass+=RootClass ';')+
		public Group getGroup_2() { return cGroup_2; }
		
		//rootClass+=RootClass
		public Assignment getRootClassAssignment_2_0() { return cRootClassAssignment_2_0; }
		
		//RootClass
		public RuleCall getRootClassRootClassParserRuleCall_2_0_0() { return cRootClassRootClassParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//('Select' select=SelectClause)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'Select'
		public Keyword getSelectKeyword_3_0() { return cSelectKeyword_3_0; }
		
		//select=SelectClause
		public Assignment getSelectAssignment_3_1() { return cSelectAssignment_3_1; }
		
		//SelectClause
		public RuleCall getSelectSelectClauseParserRuleCall_3_1_0() { return cSelectSelectClauseParserRuleCall_3_1_0; }
	}
	public class SelectClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.SelectClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectClauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNamedElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNamedElementsNamedElementCrossReference_1_0 = (CrossReference)cNamedElementsAssignment_1.eContents().get(0);
		private final RuleCall cNamedElementsNamedElementIDTerminalRuleCall_1_0_1 = (RuleCall)cNamedElementsNamedElementCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNamedElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cNamedElementsNamedElementCrossReference_2_1_0 = (CrossReference)cNamedElementsAssignment_2_1.eContents().get(0);
		private final RuleCall cNamedElementsNamedElementIDTerminalRuleCall_2_1_0_1 = (RuleCall)cNamedElementsNamedElementCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SelectClause:
		//	{SelectClause} namedElements+=[NamedElement] (',' namedElements+=[NamedElement])* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{SelectClause} namedElements+=[NamedElement] (',' namedElements+=[NamedElement])* ';'
		public Group getGroup() { return cGroup; }
		
		//{SelectClause}
		public Action getSelectClauseAction_0() { return cSelectClauseAction_0; }
		
		//namedElements+=[NamedElement]
		public Assignment getNamedElementsAssignment_1() { return cNamedElementsAssignment_1; }
		
		//[NamedElement]
		public CrossReference getNamedElementsNamedElementCrossReference_1_0() { return cNamedElementsNamedElementCrossReference_1_0; }
		
		//ID
		public RuleCall getNamedElementsNamedElementIDTerminalRuleCall_1_0_1() { return cNamedElementsNamedElementIDTerminalRuleCall_1_0_1; }
		
		//(',' namedElements+=[NamedElement])*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//namedElements+=[NamedElement]
		public Assignment getNamedElementsAssignment_2_1() { return cNamedElementsAssignment_2_1; }
		
		//[NamedElement]
		public CrossReference getNamedElementsNamedElementCrossReference_2_1_0() { return cNamedElementsNamedElementCrossReference_2_1_0; }
		
		//ID
		public RuleCall getNamedElementsNamedElementIDTerminalRuleCall_2_1_0_1() { return cNamedElementsNamedElementIDTerminalRuleCall_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class Person_TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Person_Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPersonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProfessorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStudentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Person_Type Person:
		//	Person | Professor | Student;
		@Override public ParserRule getRule() { return rule; }
		
		//Person | Professor | Student
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Person
		public RuleCall getPersonParserRuleCall_0() { return cPersonParserRuleCall_0; }
		
		//Professor
		public RuleCall getProfessorParserRuleCall_1() { return cProfessorParserRuleCall_1; }
		
		//Student
		public RuleCall getStudentParserRuleCall_2() { return cStudentParserRuleCall_2; }
	}
	public class Exam_TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Exam_Type");
		private final RuleCall cExamParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Exam_Type Exam:
		//	Exam;
		@Override public ParserRule getRule() { return rule; }
		
		//Exam
		public RuleCall getExamParserRuleCall() { return cExamParserRuleCall; }
	}
	public class Professor_TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Professor_Type");
		private final RuleCall cProfessorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Professor_Type Professor:
		//	Professor;
		@Override public ParserRule getRule() { return rule; }
		
		//Professor
		public RuleCall getProfessorParserRuleCall() { return cProfessorParserRuleCall; }
	}
	public class UniversityManagementSystem_TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.UniversityManagementSystem_Type");
		private final RuleCall cUniversityManagementSystemParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UniversityManagementSystem_Type UniversityManagementSystem:
		//	UniversityManagementSystem;
		@Override public ParserRule getRule() { return rule; }
		
		//UniversityManagementSystem
		public RuleCall getUniversityManagementSystemParserRuleCall() { return cUniversityManagementSystemParserRuleCall; }
	}
	public class Course_TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Course_Type");
		private final RuleCall cCourseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Course_Type Course:
		//	Course;
		@Override public ParserRule getRule() { return rule; }
		
		//Course
		public RuleCall getCourseParserRuleCall() { return cCourseParserRuleCall; }
	}
	public class Student_TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Student_Type");
		private final RuleCall cStudentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Student_Type Student:
		//	Student;
		@Override public ParserRule getRule() { return rule; }
		
		//Student
		public RuleCall getStudentParserRuleCall() { return cStudentParserRuleCall; }
	}
	public class RootClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.RootClass");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPersonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStudentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProfessorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCourseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUniversityManagementSystemParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExamParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//RootClass:
		//	Person | Student | Professor | Course | UniversityManagementSystem | Exam;
		@Override public ParserRule getRule() { return rule; }
		
		//Person | Student | Professor | Course | UniversityManagementSystem | Exam
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Person
		public RuleCall getPersonParserRuleCall_0() { return cPersonParserRuleCall_0; }
		
		//Student
		public RuleCall getStudentParserRuleCall_1() { return cStudentParserRuleCall_1; }
		
		//Professor
		public RuleCall getProfessorParserRuleCall_2() { return cProfessorParserRuleCall_2; }
		
		//Course
		public RuleCall getCourseParserRuleCall_3() { return cCourseParserRuleCall_3; }
		
		//UniversityManagementSystem
		public RuleCall getUniversityManagementSystemParserRuleCall_4() { return cUniversityManagementSystemParserRuleCall_4; }
		
		//Exam
		public RuleCall getExamParserRuleCall_5() { return cExamParserRuleCall_5; }
	}
	public class PersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Person");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPersonAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPersonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Keyword cEvalKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Assignment cEvaluationOperatorAssignment_3_1_0_1 = (Assignment)cGroup_3_1_0.eContents().get(1);
		private final RuleCall cEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0 = (RuleCall)cEvaluationOperatorAssignment_3_1_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_0_2 = (Keyword)cGroup_3_1_0.eContents().get(2);
		private final Assignment cEmail_AttrEClassAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cEmail_AttrEClassPerson_email_AttrEClassParserRuleCall_3_1_1_0 = (RuleCall)cEmail_AttrEClassAssignment_3_1_1.eContents().get(0);
		private final Assignment cName_AttrEClassAssignment_3_1_2 = (Assignment)cAlternatives_3_1.eContents().get(2);
		private final RuleCall cName_AttrEClassPerson_name_AttrEClassParserRuleCall_3_1_2_0 = (RuleCall)cName_AttrEClassAssignment_3_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Person:
		//	{Person} 'Person' name=ID ('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' |
		//	email_AttrEClass+=Person_email_AttrEClass | name_AttrEClass+=Person_name_AttrEClass)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Person} 'Person' name=ID ('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' |
		//email_AttrEClass+=Person_email_AttrEClass | name_AttrEClass+=Person_name_AttrEClass)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{Person}
		public Action getPersonAction_0() { return cPersonAction_0; }
		
		//'Person'
		public Keyword getPersonKeyword_1() { return cPersonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' | email_AttrEClass+=Person_email_AttrEClass |
		//name_AttrEClass+=Person_name_AttrEClass)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//('eval:' EvaluationOperator+=EvaluationOperator ';' | email_AttrEClass+=Person_email_AttrEClass |
		//name_AttrEClass+=Person_name_AttrEClass)*
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//'eval:' EvaluationOperator+=EvaluationOperator ';'
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//'eval:'
		public Keyword getEvalKeyword_3_1_0_0() { return cEvalKeyword_3_1_0_0; }
		
		//EvaluationOperator+=EvaluationOperator
		public Assignment getEvaluationOperatorAssignment_3_1_0_1() { return cEvaluationOperatorAssignment_3_1_0_1; }
		
		//EvaluationOperator
		public RuleCall getEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0() { return cEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1_0_2() { return cSemicolonKeyword_3_1_0_2; }
		
		//email_AttrEClass+=Person_email_AttrEClass
		public Assignment getEmail_AttrEClassAssignment_3_1_1() { return cEmail_AttrEClassAssignment_3_1_1; }
		
		//Person_email_AttrEClass
		public RuleCall getEmail_AttrEClassPerson_email_AttrEClassParserRuleCall_3_1_1_0() { return cEmail_AttrEClassPerson_email_AttrEClassParserRuleCall_3_1_1_0; }
		
		//name_AttrEClass+=Person_name_AttrEClass
		public Assignment getName_AttrEClassAssignment_3_1_2() { return cName_AttrEClassAssignment_3_1_2; }
		
		//Person_name_AttrEClass
		public RuleCall getName_AttrEClassPerson_name_AttrEClassParserRuleCall_3_1_2_0() { return cName_AttrEClassPerson_name_AttrEClassParserRuleCall_3_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class StudentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Student");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStudentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStudentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Keyword cEvalKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Assignment cEvaluationOperatorAssignment_3_1_0_1 = (Assignment)cGroup_3_1_0.eContents().get(1);
		private final RuleCall cEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0 = (RuleCall)cEvaluationOperatorAssignment_3_1_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_0_2 = (Keyword)cGroup_3_1_0.eContents().get(2);
		private final Assignment cEmail_AttrEClassAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cEmail_AttrEClassPerson_email_AttrEClassParserRuleCall_3_1_1_0 = (RuleCall)cEmail_AttrEClassAssignment_3_1_1.eContents().get(0);
		private final Assignment cMatriculationNumber_AttrEClassAssignment_3_1_2 = (Assignment)cAlternatives_3_1.eContents().get(2);
		private final RuleCall cMatriculationNumber_AttrEClassStudent_matriculationNumber_AttrEClassParserRuleCall_3_1_2_0 = (RuleCall)cMatriculationNumber_AttrEClassAssignment_3_1_2.eContents().get(0);
		private final Assignment cName_AttrEClassAssignment_3_1_3 = (Assignment)cAlternatives_3_1.eContents().get(3);
		private final RuleCall cName_AttrEClassPerson_name_AttrEClassParserRuleCall_3_1_3_0 = (RuleCall)cName_AttrEClassAssignment_3_1_3.eContents().get(0);
		private final Assignment cAttendsAssignment_3_1_4 = (Assignment)cAlternatives_3_1.eContents().get(4);
		private final RuleCall cAttendsStudent_attends_OrGroupParserRuleCall_3_1_4_0 = (RuleCall)cAttendsAssignment_3_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Student:
		//	{Student} 'Student' name=ID ('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' |
		//	email_AttrEClass+=Person_email_AttrEClass | matriculationNumber_AttrEClass+=Student_matriculationNumber_AttrEClass |
		//	name_AttrEClass+=Person_name_AttrEClass | attends+=Student_attends_OrGroup)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Student} 'Student' name=ID ('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' |
		//email_AttrEClass+=Person_email_AttrEClass | matriculationNumber_AttrEClass+=Student_matriculationNumber_AttrEClass |
		//name_AttrEClass+=Person_name_AttrEClass | attends+=Student_attends_OrGroup)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{Student}
		public Action getStudentAction_0() { return cStudentAction_0; }
		
		//'Student'
		public Keyword getStudentKeyword_1() { return cStudentKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' | email_AttrEClass+=Person_email_AttrEClass |
		//matriculationNumber_AttrEClass+=Student_matriculationNumber_AttrEClass | name_AttrEClass+=Person_name_AttrEClass |
		//attends+=Student_attends_OrGroup)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//('eval:' EvaluationOperator+=EvaluationOperator ';' | email_AttrEClass+=Person_email_AttrEClass |
		//matriculationNumber_AttrEClass+=Student_matriculationNumber_AttrEClass | name_AttrEClass+=Person_name_AttrEClass |
		//attends+=Student_attends_OrGroup)*
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//'eval:' EvaluationOperator+=EvaluationOperator ';'
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//'eval:'
		public Keyword getEvalKeyword_3_1_0_0() { return cEvalKeyword_3_1_0_0; }
		
		//EvaluationOperator+=EvaluationOperator
		public Assignment getEvaluationOperatorAssignment_3_1_0_1() { return cEvaluationOperatorAssignment_3_1_0_1; }
		
		//EvaluationOperator
		public RuleCall getEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0() { return cEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1_0_2() { return cSemicolonKeyword_3_1_0_2; }
		
		//email_AttrEClass+=Person_email_AttrEClass
		public Assignment getEmail_AttrEClassAssignment_3_1_1() { return cEmail_AttrEClassAssignment_3_1_1; }
		
		//Person_email_AttrEClass
		public RuleCall getEmail_AttrEClassPerson_email_AttrEClassParserRuleCall_3_1_1_0() { return cEmail_AttrEClassPerson_email_AttrEClassParserRuleCall_3_1_1_0; }
		
		//matriculationNumber_AttrEClass+=Student_matriculationNumber_AttrEClass
		public Assignment getMatriculationNumber_AttrEClassAssignment_3_1_2() { return cMatriculationNumber_AttrEClassAssignment_3_1_2; }
		
		//Student_matriculationNumber_AttrEClass
		public RuleCall getMatriculationNumber_AttrEClassStudent_matriculationNumber_AttrEClassParserRuleCall_3_1_2_0() { return cMatriculationNumber_AttrEClassStudent_matriculationNumber_AttrEClassParserRuleCall_3_1_2_0; }
		
		//name_AttrEClass+=Person_name_AttrEClass
		public Assignment getName_AttrEClassAssignment_3_1_3() { return cName_AttrEClassAssignment_3_1_3; }
		
		//Person_name_AttrEClass
		public RuleCall getName_AttrEClassPerson_name_AttrEClassParserRuleCall_3_1_3_0() { return cName_AttrEClassPerson_name_AttrEClassParserRuleCall_3_1_3_0; }
		
		//attends+=Student_attends_OrGroup
		public Assignment getAttendsAssignment_3_1_4() { return cAttendsAssignment_3_1_4; }
		
		//Student_attends_OrGroup
		public RuleCall getAttendsStudent_attends_OrGroupParserRuleCall_3_1_4_0() { return cAttendsStudent_attends_OrGroupParserRuleCall_3_1_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class ProfessorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Professor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProfessorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProfessorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Keyword cEvalKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Assignment cEvaluationOperatorAssignment_3_1_0_1 = (Assignment)cGroup_3_1_0.eContents().get(1);
		private final RuleCall cEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0 = (RuleCall)cEvaluationOperatorAssignment_3_1_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_0_2 = (Keyword)cGroup_3_1_0.eContents().get(2);
		private final Assignment cEmail_AttrEClassAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cEmail_AttrEClassPerson_email_AttrEClassParserRuleCall_3_1_1_0 = (RuleCall)cEmail_AttrEClassAssignment_3_1_1.eContents().get(0);
		private final Assignment cName_AttrEClassAssignment_3_1_2 = (Assignment)cAlternatives_3_1.eContents().get(2);
		private final RuleCall cName_AttrEClassPerson_name_AttrEClassParserRuleCall_3_1_2_0 = (RuleCall)cName_AttrEClassAssignment_3_1_2.eContents().get(0);
		private final Assignment cEmployeeNumber_AttrEClassAssignment_3_1_3 = (Assignment)cAlternatives_3_1.eContents().get(3);
		private final RuleCall cEmployeeNumber_AttrEClassProfessor_employeeNumber_AttrEClassParserRuleCall_3_1_3_0 = (RuleCall)cEmployeeNumber_AttrEClassAssignment_3_1_3.eContents().get(0);
		private final Assignment cLecturesAssignment_3_1_4 = (Assignment)cAlternatives_3_1.eContents().get(4);
		private final RuleCall cLecturesProfessor_lectures_OrGroupParserRuleCall_3_1_4_0 = (RuleCall)cLecturesAssignment_3_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Professor:
		//	{Professor} 'Professor' name=ID ('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' |
		//	email_AttrEClass+=Person_email_AttrEClass | name_AttrEClass+=Person_name_AttrEClass |
		//	employeeNumber_AttrEClass+=Professor_employeeNumber_AttrEClass | lectures+=Professor_lectures_OrGroup)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Professor} 'Professor' name=ID ('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' |
		//email_AttrEClass+=Person_email_AttrEClass | name_AttrEClass+=Person_name_AttrEClass |
		//employeeNumber_AttrEClass+=Professor_employeeNumber_AttrEClass | lectures+=Professor_lectures_OrGroup)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{Professor}
		public Action getProfessorAction_0() { return cProfessorAction_0; }
		
		//'Professor'
		public Keyword getProfessorKeyword_1() { return cProfessorKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' | email_AttrEClass+=Person_email_AttrEClass |
		//name_AttrEClass+=Person_name_AttrEClass | employeeNumber_AttrEClass+=Professor_employeeNumber_AttrEClass |
		//lectures+=Professor_lectures_OrGroup)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//('eval:' EvaluationOperator+=EvaluationOperator ';' | email_AttrEClass+=Person_email_AttrEClass |
		//name_AttrEClass+=Person_name_AttrEClass | employeeNumber_AttrEClass+=Professor_employeeNumber_AttrEClass |
		//lectures+=Professor_lectures_OrGroup)*
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//'eval:' EvaluationOperator+=EvaluationOperator ';'
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//'eval:'
		public Keyword getEvalKeyword_3_1_0_0() { return cEvalKeyword_3_1_0_0; }
		
		//EvaluationOperator+=EvaluationOperator
		public Assignment getEvaluationOperatorAssignment_3_1_0_1() { return cEvaluationOperatorAssignment_3_1_0_1; }
		
		//EvaluationOperator
		public RuleCall getEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0() { return cEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1_0_2() { return cSemicolonKeyword_3_1_0_2; }
		
		//email_AttrEClass+=Person_email_AttrEClass
		public Assignment getEmail_AttrEClassAssignment_3_1_1() { return cEmail_AttrEClassAssignment_3_1_1; }
		
		//Person_email_AttrEClass
		public RuleCall getEmail_AttrEClassPerson_email_AttrEClassParserRuleCall_3_1_1_0() { return cEmail_AttrEClassPerson_email_AttrEClassParserRuleCall_3_1_1_0; }
		
		//name_AttrEClass+=Person_name_AttrEClass
		public Assignment getName_AttrEClassAssignment_3_1_2() { return cName_AttrEClassAssignment_3_1_2; }
		
		//Person_name_AttrEClass
		public RuleCall getName_AttrEClassPerson_name_AttrEClassParserRuleCall_3_1_2_0() { return cName_AttrEClassPerson_name_AttrEClassParserRuleCall_3_1_2_0; }
		
		//employeeNumber_AttrEClass+=Professor_employeeNumber_AttrEClass
		public Assignment getEmployeeNumber_AttrEClassAssignment_3_1_3() { return cEmployeeNumber_AttrEClassAssignment_3_1_3; }
		
		//Professor_employeeNumber_AttrEClass
		public RuleCall getEmployeeNumber_AttrEClassProfessor_employeeNumber_AttrEClassParserRuleCall_3_1_3_0() { return cEmployeeNumber_AttrEClassProfessor_employeeNumber_AttrEClassParserRuleCall_3_1_3_0; }
		
		//lectures+=Professor_lectures_OrGroup
		public Assignment getLecturesAssignment_3_1_4() { return cLecturesAssignment_3_1_4; }
		
		//Professor_lectures_OrGroup
		public RuleCall getLecturesProfessor_lectures_OrGroupParserRuleCall_3_1_4_0() { return cLecturesProfessor_lectures_OrGroupParserRuleCall_3_1_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class CourseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Course");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCourseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCourseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Keyword cEvalKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Assignment cEvaluationOperatorAssignment_3_1_0_1 = (Assignment)cGroup_3_1_0.eContents().get(1);
		private final RuleCall cEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0 = (RuleCall)cEvaluationOperatorAssignment_3_1_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_0_2 = (Keyword)cGroup_3_1_0.eContents().get(2);
		private final Assignment cCourseNumber_AttrEClassAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cCourseNumber_AttrEClassCourse_courseNumber_AttrEClassParserRuleCall_3_1_1_0 = (RuleCall)cCourseNumber_AttrEClassAssignment_3_1_1.eContents().get(0);
		private final Assignment cExamAssignment_3_1_2 = (Assignment)cAlternatives_3_1.eContents().get(2);
		private final RuleCall cExamCourse_exam_OrGroupParserRuleCall_3_1_2_0 = (RuleCall)cExamAssignment_3_1_2.eContents().get(0);
		private final Assignment cMandatoryForAssignment_3_1_3 = (Assignment)cAlternatives_3_1.eContents().get(3);
		private final RuleCall cMandatoryForCourse_mandatoryFor_OrGroupParserRuleCall_3_1_3_0 = (RuleCall)cMandatoryForAssignment_3_1_3.eContents().get(0);
		private final Assignment cName_AttrEClassAssignment_3_1_4 = (Assignment)cAlternatives_3_1.eContents().get(4);
		private final RuleCall cName_AttrEClassCourse_name_AttrEClassParserRuleCall_3_1_4_0 = (RuleCall)cName_AttrEClassAssignment_3_1_4.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Assignment cCourseType_AttrEClassAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final RuleCall cCourseType_AttrEClassCourse_courseType_AttrEClassParserRuleCall_3_2_0_0 = (RuleCall)cCourseType_AttrEClassAssignment_3_2_0.eContents().get(0);
		private final Alternatives cAlternatives_3_2_1 = (Alternatives)cGroup_3_2.eContents().get(1);
		private final Group cGroup_3_2_1_0 = (Group)cAlternatives_3_2_1.eContents().get(0);
		private final Keyword cEvalKeyword_3_2_1_0_0 = (Keyword)cGroup_3_2_1_0.eContents().get(0);
		private final Assignment cEvaluationOperatorAssignment_3_2_1_0_1 = (Assignment)cGroup_3_2_1_0.eContents().get(1);
		private final RuleCall cEvaluationOperatorEvaluationOperatorParserRuleCall_3_2_1_0_1_0 = (RuleCall)cEvaluationOperatorAssignment_3_2_1_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2_1_0_2 = (Keyword)cGroup_3_2_1_0.eContents().get(2);
		private final Assignment cCourseNumber_AttrEClassAssignment_3_2_1_1 = (Assignment)cAlternatives_3_2_1.eContents().get(1);
		private final RuleCall cCourseNumber_AttrEClassCourse_courseNumber_AttrEClassParserRuleCall_3_2_1_1_0 = (RuleCall)cCourseNumber_AttrEClassAssignment_3_2_1_1.eContents().get(0);
		private final Assignment cExamAssignment_3_2_1_2 = (Assignment)cAlternatives_3_2_1.eContents().get(2);
		private final RuleCall cExamCourse_exam_OrGroupParserRuleCall_3_2_1_2_0 = (RuleCall)cExamAssignment_3_2_1_2.eContents().get(0);
		private final Assignment cMandatoryForAssignment_3_2_1_3 = (Assignment)cAlternatives_3_2_1.eContents().get(3);
		private final RuleCall cMandatoryForCourse_mandatoryFor_OrGroupParserRuleCall_3_2_1_3_0 = (RuleCall)cMandatoryForAssignment_3_2_1_3.eContents().get(0);
		private final Assignment cName_AttrEClassAssignment_3_2_1_4 = (Assignment)cAlternatives_3_2_1.eContents().get(4);
		private final RuleCall cName_AttrEClassCourse_name_AttrEClassParserRuleCall_3_2_1_4_0 = (RuleCall)cName_AttrEClassAssignment_3_2_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//Course:
		//	{Course} 'Course' name=ID ('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' |
		//	courseNumber_AttrEClass+=Course_courseNumber_AttrEClass | exam+=Course_exam_OrGroup |
		//	mandatoryFor+=Course_mandatoryFor_OrGroup | name_AttrEClass+=Course_name_AttrEClass)*
		//	(courseType_AttrEClass=Course_courseType_AttrEClass ('eval:' EvaluationOperator+=EvaluationOperator ';' |
		//	courseNumber_AttrEClass+=Course_courseNumber_AttrEClass | exam+=Course_exam_OrGroup |
		//	mandatoryFor+=Course_mandatoryFor_OrGroup | name_AttrEClass+=Course_name_AttrEClass)*)? '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Course} 'Course' name=ID ('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' |
		//courseNumber_AttrEClass+=Course_courseNumber_AttrEClass | exam+=Course_exam_OrGroup |
		//mandatoryFor+=Course_mandatoryFor_OrGroup | name_AttrEClass+=Course_name_AttrEClass)*
		//(courseType_AttrEClass=Course_courseType_AttrEClass ('eval:' EvaluationOperator+=EvaluationOperator ';' |
		//courseNumber_AttrEClass+=Course_courseNumber_AttrEClass | exam+=Course_exam_OrGroup |
		//mandatoryFor+=Course_mandatoryFor_OrGroup | name_AttrEClass+=Course_name_AttrEClass)*)? '}')?
		public Group getGroup() { return cGroup; }
		
		//{Course}
		public Action getCourseAction_0() { return cCourseAction_0; }
		
		//'Course'
		public Keyword getCourseKeyword_1() { return cCourseKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' | courseNumber_AttrEClass+=Course_courseNumber_AttrEClass |
		//exam+=Course_exam_OrGroup | mandatoryFor+=Course_mandatoryFor_OrGroup | name_AttrEClass+=Course_name_AttrEClass)*
		//(courseType_AttrEClass=Course_courseType_AttrEClass ('eval:' EvaluationOperator+=EvaluationOperator ';' |
		//courseNumber_AttrEClass+=Course_courseNumber_AttrEClass | exam+=Course_exam_OrGroup |
		//mandatoryFor+=Course_mandatoryFor_OrGroup | name_AttrEClass+=Course_name_AttrEClass)*)? '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//('eval:' EvaluationOperator+=EvaluationOperator ';' | courseNumber_AttrEClass+=Course_courseNumber_AttrEClass |
		//exam+=Course_exam_OrGroup | mandatoryFor+=Course_mandatoryFor_OrGroup | name_AttrEClass+=Course_name_AttrEClass)*
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//'eval:' EvaluationOperator+=EvaluationOperator ';'
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//'eval:'
		public Keyword getEvalKeyword_3_1_0_0() { return cEvalKeyword_3_1_0_0; }
		
		//EvaluationOperator+=EvaluationOperator
		public Assignment getEvaluationOperatorAssignment_3_1_0_1() { return cEvaluationOperatorAssignment_3_1_0_1; }
		
		//EvaluationOperator
		public RuleCall getEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0() { return cEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1_0_2() { return cSemicolonKeyword_3_1_0_2; }
		
		//courseNumber_AttrEClass+=Course_courseNumber_AttrEClass
		public Assignment getCourseNumber_AttrEClassAssignment_3_1_1() { return cCourseNumber_AttrEClassAssignment_3_1_1; }
		
		//Course_courseNumber_AttrEClass
		public RuleCall getCourseNumber_AttrEClassCourse_courseNumber_AttrEClassParserRuleCall_3_1_1_0() { return cCourseNumber_AttrEClassCourse_courseNumber_AttrEClassParserRuleCall_3_1_1_0; }
		
		//exam+=Course_exam_OrGroup
		public Assignment getExamAssignment_3_1_2() { return cExamAssignment_3_1_2; }
		
		//Course_exam_OrGroup
		public RuleCall getExamCourse_exam_OrGroupParserRuleCall_3_1_2_0() { return cExamCourse_exam_OrGroupParserRuleCall_3_1_2_0; }
		
		//mandatoryFor+=Course_mandatoryFor_OrGroup
		public Assignment getMandatoryForAssignment_3_1_3() { return cMandatoryForAssignment_3_1_3; }
		
		//Course_mandatoryFor_OrGroup
		public RuleCall getMandatoryForCourse_mandatoryFor_OrGroupParserRuleCall_3_1_3_0() { return cMandatoryForCourse_mandatoryFor_OrGroupParserRuleCall_3_1_3_0; }
		
		//name_AttrEClass+=Course_name_AttrEClass
		public Assignment getName_AttrEClassAssignment_3_1_4() { return cName_AttrEClassAssignment_3_1_4; }
		
		//Course_name_AttrEClass
		public RuleCall getName_AttrEClassCourse_name_AttrEClassParserRuleCall_3_1_4_0() { return cName_AttrEClassCourse_name_AttrEClassParserRuleCall_3_1_4_0; }
		
		//(courseType_AttrEClass=Course_courseType_AttrEClass ('eval:' EvaluationOperator+=EvaluationOperator ';' |
		//courseNumber_AttrEClass+=Course_courseNumber_AttrEClass | exam+=Course_exam_OrGroup |
		//mandatoryFor+=Course_mandatoryFor_OrGroup | name_AttrEClass+=Course_name_AttrEClass)*)?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//courseType_AttrEClass=Course_courseType_AttrEClass
		public Assignment getCourseType_AttrEClassAssignment_3_2_0() { return cCourseType_AttrEClassAssignment_3_2_0; }
		
		//Course_courseType_AttrEClass
		public RuleCall getCourseType_AttrEClassCourse_courseType_AttrEClassParserRuleCall_3_2_0_0() { return cCourseType_AttrEClassCourse_courseType_AttrEClassParserRuleCall_3_2_0_0; }
		
		//('eval:' EvaluationOperator+=EvaluationOperator ';' | courseNumber_AttrEClass+=Course_courseNumber_AttrEClass |
		//exam+=Course_exam_OrGroup | mandatoryFor+=Course_mandatoryFor_OrGroup | name_AttrEClass+=Course_name_AttrEClass)*
		public Alternatives getAlternatives_3_2_1() { return cAlternatives_3_2_1; }
		
		//'eval:' EvaluationOperator+=EvaluationOperator ';'
		public Group getGroup_3_2_1_0() { return cGroup_3_2_1_0; }
		
		//'eval:'
		public Keyword getEvalKeyword_3_2_1_0_0() { return cEvalKeyword_3_2_1_0_0; }
		
		//EvaluationOperator+=EvaluationOperator
		public Assignment getEvaluationOperatorAssignment_3_2_1_0_1() { return cEvaluationOperatorAssignment_3_2_1_0_1; }
		
		//EvaluationOperator
		public RuleCall getEvaluationOperatorEvaluationOperatorParserRuleCall_3_2_1_0_1_0() { return cEvaluationOperatorEvaluationOperatorParserRuleCall_3_2_1_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_2_1_0_2() { return cSemicolonKeyword_3_2_1_0_2; }
		
		//courseNumber_AttrEClass+=Course_courseNumber_AttrEClass
		public Assignment getCourseNumber_AttrEClassAssignment_3_2_1_1() { return cCourseNumber_AttrEClassAssignment_3_2_1_1; }
		
		//Course_courseNumber_AttrEClass
		public RuleCall getCourseNumber_AttrEClassCourse_courseNumber_AttrEClassParserRuleCall_3_2_1_1_0() { return cCourseNumber_AttrEClassCourse_courseNumber_AttrEClassParserRuleCall_3_2_1_1_0; }
		
		//exam+=Course_exam_OrGroup
		public Assignment getExamAssignment_3_2_1_2() { return cExamAssignment_3_2_1_2; }
		
		//Course_exam_OrGroup
		public RuleCall getExamCourse_exam_OrGroupParserRuleCall_3_2_1_2_0() { return cExamCourse_exam_OrGroupParserRuleCall_3_2_1_2_0; }
		
		//mandatoryFor+=Course_mandatoryFor_OrGroup
		public Assignment getMandatoryForAssignment_3_2_1_3() { return cMandatoryForAssignment_3_2_1_3; }
		
		//Course_mandatoryFor_OrGroup
		public RuleCall getMandatoryForCourse_mandatoryFor_OrGroupParserRuleCall_3_2_1_3_0() { return cMandatoryForCourse_mandatoryFor_OrGroupParserRuleCall_3_2_1_3_0; }
		
		//name_AttrEClass+=Course_name_AttrEClass
		public Assignment getName_AttrEClassAssignment_3_2_1_4() { return cName_AttrEClassAssignment_3_2_1_4; }
		
		//Course_name_AttrEClass
		public RuleCall getName_AttrEClassCourse_name_AttrEClassParserRuleCall_3_2_1_4_0() { return cName_AttrEClassCourse_name_AttrEClassParserRuleCall_3_2_1_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}
	public class UniversityManagementSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.UniversityManagementSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUniversityManagementSystemAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUniversityManagementSystemKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Keyword cEvalKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Assignment cEvaluationOperatorAssignment_3_1_0_1 = (Assignment)cGroup_3_1_0.eContents().get(1);
		private final RuleCall cEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0 = (RuleCall)cEvaluationOperatorAssignment_3_1_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_0_2 = (Keyword)cGroup_3_1_0.eContents().get(2);
		private final Assignment cPersonAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cPersonUniversityManagementSystem_person_OrGroupParserRuleCall_3_1_1_0 = (RuleCall)cPersonAssignment_3_1_1.eContents().get(0);
		private final Assignment cCourseAssignment_3_1_2 = (Assignment)cAlternatives_3_1.eContents().get(2);
		private final RuleCall cCourseUniversityManagementSystem_course_OrGroupParserRuleCall_3_1_2_0 = (RuleCall)cCourseAssignment_3_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//UniversityManagementSystem:
		//	{UniversityManagementSystem} 'UniversityManagementSystem' name=ID ('{' ('eval:'
		//	EvaluationOperator+=EvaluationOperator ';' | person+=UniversityManagementSystem_person_OrGroup |
		//	course+=UniversityManagementSystem_course_OrGroup)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{UniversityManagementSystem} 'UniversityManagementSystem' name=ID ('{' ('eval:' EvaluationOperator+=EvaluationOperator
		//';' | person+=UniversityManagementSystem_person_OrGroup | course+=UniversityManagementSystem_course_OrGroup)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{UniversityManagementSystem}
		public Action getUniversityManagementSystemAction_0() { return cUniversityManagementSystemAction_0; }
		
		//'UniversityManagementSystem'
		public Keyword getUniversityManagementSystemKeyword_1() { return cUniversityManagementSystemKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' | person+=UniversityManagementSystem_person_OrGroup |
		//course+=UniversityManagementSystem_course_OrGroup)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//('eval:' EvaluationOperator+=EvaluationOperator ';' | person+=UniversityManagementSystem_person_OrGroup |
		//course+=UniversityManagementSystem_course_OrGroup)*
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//'eval:' EvaluationOperator+=EvaluationOperator ';'
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//'eval:'
		public Keyword getEvalKeyword_3_1_0_0() { return cEvalKeyword_3_1_0_0; }
		
		//EvaluationOperator+=EvaluationOperator
		public Assignment getEvaluationOperatorAssignment_3_1_0_1() { return cEvaluationOperatorAssignment_3_1_0_1; }
		
		//EvaluationOperator
		public RuleCall getEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0() { return cEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1_0_2() { return cSemicolonKeyword_3_1_0_2; }
		
		//person+=UniversityManagementSystem_person_OrGroup
		public Assignment getPersonAssignment_3_1_1() { return cPersonAssignment_3_1_1; }
		
		//UniversityManagementSystem_person_OrGroup
		public RuleCall getPersonUniversityManagementSystem_person_OrGroupParserRuleCall_3_1_1_0() { return cPersonUniversityManagementSystem_person_OrGroupParserRuleCall_3_1_1_0; }
		
		//course+=UniversityManagementSystem_course_OrGroup
		public Assignment getCourseAssignment_3_1_2() { return cCourseAssignment_3_1_2; }
		
		//UniversityManagementSystem_course_OrGroup
		public RuleCall getCourseUniversityManagementSystem_course_OrGroupParserRuleCall_3_1_2_0() { return cCourseUniversityManagementSystem_course_OrGroupParserRuleCall_3_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class ExamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Exam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExamAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExamKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Keyword cEvalKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Assignment cEvaluationOperatorAssignment_3_1_0_1 = (Assignment)cGroup_3_1_0.eContents().get(1);
		private final RuleCall cEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0 = (RuleCall)cEvaluationOperatorAssignment_3_1_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_0_2 = (Keyword)cGroup_3_1_0.eContents().get(2);
		private final Assignment cExamID_AttrEClassAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cExamID_AttrEClassExam_examID_AttrEClassParserRuleCall_3_1_1_0 = (RuleCall)cExamID_AttrEClassAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Exam:
		//	{Exam} 'Exam' name=ID ('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' |
		//	examID_AttrEClass+=Exam_examID_AttrEClass)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Exam} 'Exam' name=ID ('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' |
		//examID_AttrEClass+=Exam_examID_AttrEClass)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{Exam}
		public Action getExamAction_0() { return cExamAction_0; }
		
		//'Exam'
		public Keyword getExamKeyword_1() { return cExamKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' | examID_AttrEClass+=Exam_examID_AttrEClass)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//('eval:' EvaluationOperator+=EvaluationOperator ';' | examID_AttrEClass+=Exam_examID_AttrEClass)*
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//'eval:' EvaluationOperator+=EvaluationOperator ';'
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//'eval:'
		public Keyword getEvalKeyword_3_1_0_0() { return cEvalKeyword_3_1_0_0; }
		
		//EvaluationOperator+=EvaluationOperator
		public Assignment getEvaluationOperatorAssignment_3_1_0_1() { return cEvaluationOperatorAssignment_3_1_0_1; }
		
		//EvaluationOperator
		public RuleCall getEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0() { return cEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1_0_2() { return cSemicolonKeyword_3_1_0_2; }
		
		//examID_AttrEClass+=Exam_examID_AttrEClass
		public Assignment getExamID_AttrEClassAssignment_3_1_1() { return cExamID_AttrEClassAssignment_3_1_1; }
		
		//Exam_examID_AttrEClass
		public RuleCall getExamID_AttrEClassExam_examID_AttrEClassParserRuleCall_3_1_1_0() { return cExamID_AttrEClassExam_examID_AttrEClassParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class Professor_employeeNumber_AttrEClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Professor_employeeNumber_AttrEClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProfessor_employeeNumber_AttrEClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEmployeeNumberKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cNegatedAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cNegatedExclamationMarkKeyword_2_0_0 = (Keyword)cNegatedAssignment_2_0.eContents().get(0);
		private final Assignment cGeneralizedAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cGeneralizedAsteriskKeyword_2_1_0 = (Keyword)cGeneralizedAssignment_2_1.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOperatorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperatorInteger_ExpressionOperatorParserRuleCall_4_1_0 = (RuleCall)cOperatorAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Professor_employeeNumber_AttrEClass:
		//	{Professor_employeeNumber_AttrEClass} 'employeeNumber' (negated?='!'? & generalized?='*'?) name=ID (':'
		//	operator=Integer_ExpressionOperator)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Professor_employeeNumber_AttrEClass} 'employeeNumber' (negated?='!'? & generalized?='*'?) name=ID (':'
		//operator=Integer_ExpressionOperator)? ';'
		public Group getGroup() { return cGroup; }
		
		//{Professor_employeeNumber_AttrEClass}
		public Action getProfessor_employeeNumber_AttrEClassAction_0() { return cProfessor_employeeNumber_AttrEClassAction_0; }
		
		//'employeeNumber'
		public Keyword getEmployeeNumberKeyword_1() { return cEmployeeNumberKeyword_1; }
		
		//negated?='!'? & generalized?='*'?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2_0() { return cNegatedAssignment_2_0; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0_0() { return cNegatedExclamationMarkKeyword_2_0_0; }
		
		//generalized?='*'?
		public Assignment getGeneralizedAssignment_2_1() { return cGeneralizedAssignment_2_1; }
		
		//'*'
		public Keyword getGeneralizedAsteriskKeyword_2_1_0() { return cGeneralizedAsteriskKeyword_2_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(':' operator=Integer_ExpressionOperator)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//operator=Integer_ExpressionOperator
		public Assignment getOperatorAssignment_4_1() { return cOperatorAssignment_4_1; }
		
		//Integer_ExpressionOperator
		public RuleCall getOperatorInteger_ExpressionOperatorParserRuleCall_4_1_0() { return cOperatorInteger_ExpressionOperatorParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class Student_matriculationNumber_AttrEClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Student_matriculationNumber_AttrEClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStudent_matriculationNumber_AttrEClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMatriculationNumberKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cNegatedAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cNegatedExclamationMarkKeyword_2_0_0 = (Keyword)cNegatedAssignment_2_0.eContents().get(0);
		private final Assignment cGeneralizedAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cGeneralizedAsteriskKeyword_2_1_0 = (Keyword)cGeneralizedAssignment_2_1.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOperatorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperatorInteger_ExpressionOperatorParserRuleCall_4_1_0 = (RuleCall)cOperatorAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Student_matriculationNumber_AttrEClass:
		//	{Student_matriculationNumber_AttrEClass} 'matriculationNumber' (negated?='!'? & generalized?='*'?) name=ID (':'
		//	operator=Integer_ExpressionOperator)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Student_matriculationNumber_AttrEClass} 'matriculationNumber' (negated?='!'? & generalized?='*'?) name=ID (':'
		//operator=Integer_ExpressionOperator)? ';'
		public Group getGroup() { return cGroup; }
		
		//{Student_matriculationNumber_AttrEClass}
		public Action getStudent_matriculationNumber_AttrEClassAction_0() { return cStudent_matriculationNumber_AttrEClassAction_0; }
		
		//'matriculationNumber'
		public Keyword getMatriculationNumberKeyword_1() { return cMatriculationNumberKeyword_1; }
		
		//negated?='!'? & generalized?='*'?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2_0() { return cNegatedAssignment_2_0; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0_0() { return cNegatedExclamationMarkKeyword_2_0_0; }
		
		//generalized?='*'?
		public Assignment getGeneralizedAssignment_2_1() { return cGeneralizedAssignment_2_1; }
		
		//'*'
		public Keyword getGeneralizedAsteriskKeyword_2_1_0() { return cGeneralizedAsteriskKeyword_2_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(':' operator=Integer_ExpressionOperator)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//operator=Integer_ExpressionOperator
		public Assignment getOperatorAssignment_4_1() { return cOperatorAssignment_4_1; }
		
		//Integer_ExpressionOperator
		public RuleCall getOperatorInteger_ExpressionOperatorParserRuleCall_4_1_0() { return cOperatorInteger_ExpressionOperatorParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class Person_name_AttrEClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Person_name_AttrEClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPerson_name_AttrEClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cNegatedAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cNegatedExclamationMarkKeyword_2_0_0 = (Keyword)cNegatedAssignment_2_0.eContents().get(0);
		private final Assignment cGeneralizedAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cGeneralizedAsteriskKeyword_2_1_0 = (Keyword)cGeneralizedAssignment_2_1.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOperatorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperatorString_ExpressionOperatorParserRuleCall_4_1_0 = (RuleCall)cOperatorAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Person_name_AttrEClass:
		//	{Person_name_AttrEClass} 'name' (negated?='!'? & generalized?='*'?) name=ID (':' operator=String_ExpressionOperator)?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Person_name_AttrEClass} 'name' (negated?='!'? & generalized?='*'?) name=ID (':' operator=String_ExpressionOperator)?
		//';'
		public Group getGroup() { return cGroup; }
		
		//{Person_name_AttrEClass}
		public Action getPerson_name_AttrEClassAction_0() { return cPerson_name_AttrEClassAction_0; }
		
		//'name'
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//negated?='!'? & generalized?='*'?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2_0() { return cNegatedAssignment_2_0; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0_0() { return cNegatedExclamationMarkKeyword_2_0_0; }
		
		//generalized?='*'?
		public Assignment getGeneralizedAssignment_2_1() { return cGeneralizedAssignment_2_1; }
		
		//'*'
		public Keyword getGeneralizedAsteriskKeyword_2_1_0() { return cGeneralizedAsteriskKeyword_2_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(':' operator=String_ExpressionOperator)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//operator=String_ExpressionOperator
		public Assignment getOperatorAssignment_4_1() { return cOperatorAssignment_4_1; }
		
		//String_ExpressionOperator
		public RuleCall getOperatorString_ExpressionOperatorParserRuleCall_4_1_0() { return cOperatorString_ExpressionOperatorParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class Course_courseType_AttrEClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Course_courseType_AttrEClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCourse_courseType_AttrEClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCourseTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOperatorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperatorCourseType_EnumerationOperatorParserRuleCall_4_1_0 = (RuleCall)cOperatorAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Course_courseType_AttrEClass:
		//	{Course_courseType_AttrEClass} 'courseType' negated?='!'? name=ID (':' operator=CourseType_EnumerationOperator)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Course_courseType_AttrEClass} 'courseType' negated?='!'? name=ID (':' operator=CourseType_EnumerationOperator)? ';'
		public Group getGroup() { return cGroup; }
		
		//{Course_courseType_AttrEClass}
		public Action getCourse_courseType_AttrEClassAction_0() { return cCourse_courseType_AttrEClassAction_0; }
		
		//'courseType'
		public Keyword getCourseTypeKeyword_1() { return cCourseTypeKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(':' operator=CourseType_EnumerationOperator)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//operator=CourseType_EnumerationOperator
		public Assignment getOperatorAssignment_4_1() { return cOperatorAssignment_4_1; }
		
		//CourseType_EnumerationOperator
		public RuleCall getOperatorCourseType_EnumerationOperatorParserRuleCall_4_1_0() { return cOperatorCourseType_EnumerationOperatorParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class Course_courseNumber_AttrEClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Course_courseNumber_AttrEClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCourse_courseNumber_AttrEClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCourseNumberKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cNegatedAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cNegatedExclamationMarkKeyword_2_0_0 = (Keyword)cNegatedAssignment_2_0.eContents().get(0);
		private final Assignment cGeneralizedAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cGeneralizedAsteriskKeyword_2_1_0 = (Keyword)cGeneralizedAssignment_2_1.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOperatorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperatorInteger_ExpressionOperatorParserRuleCall_4_1_0 = (RuleCall)cOperatorAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Course_courseNumber_AttrEClass:
		//	{Course_courseNumber_AttrEClass} 'courseNumber' (negated?='!'? & generalized?='*'?) name=ID (':'
		//	operator=Integer_ExpressionOperator)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Course_courseNumber_AttrEClass} 'courseNumber' (negated?='!'? & generalized?='*'?) name=ID (':'
		//operator=Integer_ExpressionOperator)? ';'
		public Group getGroup() { return cGroup; }
		
		//{Course_courseNumber_AttrEClass}
		public Action getCourse_courseNumber_AttrEClassAction_0() { return cCourse_courseNumber_AttrEClassAction_0; }
		
		//'courseNumber'
		public Keyword getCourseNumberKeyword_1() { return cCourseNumberKeyword_1; }
		
		//negated?='!'? & generalized?='*'?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2_0() { return cNegatedAssignment_2_0; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0_0() { return cNegatedExclamationMarkKeyword_2_0_0; }
		
		//generalized?='*'?
		public Assignment getGeneralizedAssignment_2_1() { return cGeneralizedAssignment_2_1; }
		
		//'*'
		public Keyword getGeneralizedAsteriskKeyword_2_1_0() { return cGeneralizedAsteriskKeyword_2_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(':' operator=Integer_ExpressionOperator)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//operator=Integer_ExpressionOperator
		public Assignment getOperatorAssignment_4_1() { return cOperatorAssignment_4_1; }
		
		//Integer_ExpressionOperator
		public RuleCall getOperatorInteger_ExpressionOperatorParserRuleCall_4_1_0() { return cOperatorInteger_ExpressionOperatorParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class Person_email_AttrEClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Person_email_AttrEClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPerson_email_AttrEClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEmailKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cNegatedAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cNegatedExclamationMarkKeyword_2_0_0 = (Keyword)cNegatedAssignment_2_0.eContents().get(0);
		private final Assignment cGeneralizedAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cGeneralizedAsteriskKeyword_2_1_0 = (Keyword)cGeneralizedAssignment_2_1.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOperatorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperatorString_ExpressionOperatorParserRuleCall_4_1_0 = (RuleCall)cOperatorAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Person_email_AttrEClass:
		//	{Person_email_AttrEClass} 'email' (negated?='!'? & generalized?='*'?) name=ID (':'
		//	operator=String_ExpressionOperator)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Person_email_AttrEClass} 'email' (negated?='!'? & generalized?='*'?) name=ID (':' operator=String_ExpressionOperator)?
		//';'
		public Group getGroup() { return cGroup; }
		
		//{Person_email_AttrEClass}
		public Action getPerson_email_AttrEClassAction_0() { return cPerson_email_AttrEClassAction_0; }
		
		//'email'
		public Keyword getEmailKeyword_1() { return cEmailKeyword_1; }
		
		//negated?='!'? & generalized?='*'?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2_0() { return cNegatedAssignment_2_0; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0_0() { return cNegatedExclamationMarkKeyword_2_0_0; }
		
		//generalized?='*'?
		public Assignment getGeneralizedAssignment_2_1() { return cGeneralizedAssignment_2_1; }
		
		//'*'
		public Keyword getGeneralizedAsteriskKeyword_2_1_0() { return cGeneralizedAsteriskKeyword_2_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(':' operator=String_ExpressionOperator)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//operator=String_ExpressionOperator
		public Assignment getOperatorAssignment_4_1() { return cOperatorAssignment_4_1; }
		
		//String_ExpressionOperator
		public RuleCall getOperatorString_ExpressionOperatorParserRuleCall_4_1_0() { return cOperatorString_ExpressionOperatorParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class Course_name_AttrEClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Course_name_AttrEClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCourse_name_AttrEClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cNegatedAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cNegatedExclamationMarkKeyword_2_0_0 = (Keyword)cNegatedAssignment_2_0.eContents().get(0);
		private final Assignment cGeneralizedAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cGeneralizedAsteriskKeyword_2_1_0 = (Keyword)cGeneralizedAssignment_2_1.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOperatorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperatorString_ExpressionOperatorParserRuleCall_4_1_0 = (RuleCall)cOperatorAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Course_name_AttrEClass:
		//	{Course_name_AttrEClass} 'name' (negated?='!'? & generalized?='*'?) name=ID (':' operator=String_ExpressionOperator)?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Course_name_AttrEClass} 'name' (negated?='!'? & generalized?='*'?) name=ID (':' operator=String_ExpressionOperator)?
		//';'
		public Group getGroup() { return cGroup; }
		
		//{Course_name_AttrEClass}
		public Action getCourse_name_AttrEClassAction_0() { return cCourse_name_AttrEClassAction_0; }
		
		//'name'
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//negated?='!'? & generalized?='*'?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2_0() { return cNegatedAssignment_2_0; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0_0() { return cNegatedExclamationMarkKeyword_2_0_0; }
		
		//generalized?='*'?
		public Assignment getGeneralizedAssignment_2_1() { return cGeneralizedAssignment_2_1; }
		
		//'*'
		public Keyword getGeneralizedAsteriskKeyword_2_1_0() { return cGeneralizedAsteriskKeyword_2_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(':' operator=String_ExpressionOperator)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//operator=String_ExpressionOperator
		public Assignment getOperatorAssignment_4_1() { return cOperatorAssignment_4_1; }
		
		//String_ExpressionOperator
		public RuleCall getOperatorString_ExpressionOperatorParserRuleCall_4_1_0() { return cOperatorString_ExpressionOperatorParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class Exam_examID_AttrEClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Exam_examID_AttrEClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExam_examID_AttrEClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExamIDKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cNegatedAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cNegatedExclamationMarkKeyword_2_0_0 = (Keyword)cNegatedAssignment_2_0.eContents().get(0);
		private final Assignment cGeneralizedAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cGeneralizedAsteriskKeyword_2_1_0 = (Keyword)cGeneralizedAssignment_2_1.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOperatorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperatorString_ExpressionOperatorParserRuleCall_4_1_0 = (RuleCall)cOperatorAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Exam_examID_AttrEClass:
		//	{Exam_examID_AttrEClass} 'examID' (negated?='!'? & generalized?='*'?) name=ID (':'
		//	operator=String_ExpressionOperator)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Exam_examID_AttrEClass} 'examID' (negated?='!'? & generalized?='*'?) name=ID (':' operator=String_ExpressionOperator)?
		//';'
		public Group getGroup() { return cGroup; }
		
		//{Exam_examID_AttrEClass}
		public Action getExam_examID_AttrEClassAction_0() { return cExam_examID_AttrEClassAction_0; }
		
		//'examID'
		public Keyword getExamIDKeyword_1() { return cExamIDKeyword_1; }
		
		//negated?='!'? & generalized?='*'?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2_0() { return cNegatedAssignment_2_0; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0_0() { return cNegatedExclamationMarkKeyword_2_0_0; }
		
		//generalized?='*'?
		public Assignment getGeneralizedAssignment_2_1() { return cGeneralizedAssignment_2_1; }
		
		//'*'
		public Keyword getGeneralizedAsteriskKeyword_2_1_0() { return cGeneralizedAsteriskKeyword_2_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(':' operator=String_ExpressionOperator)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//operator=String_ExpressionOperator
		public Assignment getOperatorAssignment_4_1() { return cOperatorAssignment_4_1; }
		
		//String_ExpressionOperator
		public RuleCall getOperatorString_ExpressionOperatorParserRuleCall_4_1_0() { return cOperatorString_ExpressionOperatorParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class Student_attends_OrGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Student_attends_OrGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCourse_Reference_OrGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAttendsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cNegatedAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cNegatedExclamationMarkKeyword_2_0_0 = (Keyword)cNegatedAssignment_2_0.eContents().get(0);
		private final Assignment cTransitiveAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cTransitivePlusSignKeyword_2_1_0 = (Keyword)cTransitiveAssignment_2_1.eContents().get(0);
		private final Assignment cGeneralizedAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cGeneralizedAsteriskKeyword_2_2_0 = (Keyword)cGeneralizedAssignment_2_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cReferenceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cReferenceCourseCrossReference_4_1_0 = (CrossReference)cReferenceAssignment_4_1.eContents().get(0);
		private final RuleCall cReferenceCourseIDTerminalRuleCall_4_1_0_1 = (RuleCall)cReferenceCourseCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cORKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cReferenceAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cReferenceCourseCrossReference_4_2_1_0 = (CrossReference)cReferenceAssignment_4_2_1.eContents().get(0);
		private final RuleCall cReferenceCourseIDTerminalRuleCall_4_2_1_0_1 = (RuleCall)cReferenceCourseCrossReference_4_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Student_attends_OrGroup Course_Reference_OrGroup:
		//	{Course_Reference_OrGroup} 'attends' (negated?='!'? & transitive?='+'? & generalized?='*'?) name=ID (':'
		//	reference+=[Course] ('OR' reference+=[Course])*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Course_Reference_OrGroup} 'attends' (negated?='!'? & transitive?='+'? & generalized?='*'?) name=ID (':'
		//reference+=[Course] ('OR' reference+=[Course])*)? ';'
		public Group getGroup() { return cGroup; }
		
		//{Course_Reference_OrGroup}
		public Action getCourse_Reference_OrGroupAction_0() { return cCourse_Reference_OrGroupAction_0; }
		
		//'attends'
		public Keyword getAttendsKeyword_1() { return cAttendsKeyword_1; }
		
		//negated?='!'? & transitive?='+'? & generalized?='*'?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2_0() { return cNegatedAssignment_2_0; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0_0() { return cNegatedExclamationMarkKeyword_2_0_0; }
		
		//transitive?='+'?
		public Assignment getTransitiveAssignment_2_1() { return cTransitiveAssignment_2_1; }
		
		//'+'
		public Keyword getTransitivePlusSignKeyword_2_1_0() { return cTransitivePlusSignKeyword_2_1_0; }
		
		//generalized?='*'?
		public Assignment getGeneralizedAssignment_2_2() { return cGeneralizedAssignment_2_2; }
		
		//'*'
		public Keyword getGeneralizedAsteriskKeyword_2_2_0() { return cGeneralizedAsteriskKeyword_2_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(':' reference+=[Course] ('OR' reference+=[Course])*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//reference+=[Course]
		public Assignment getReferenceAssignment_4_1() { return cReferenceAssignment_4_1; }
		
		//[Course]
		public CrossReference getReferenceCourseCrossReference_4_1_0() { return cReferenceCourseCrossReference_4_1_0; }
		
		//ID
		public RuleCall getReferenceCourseIDTerminalRuleCall_4_1_0_1() { return cReferenceCourseIDTerminalRuleCall_4_1_0_1; }
		
		//('OR' reference+=[Course])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'OR'
		public Keyword getORKeyword_4_2_0() { return cORKeyword_4_2_0; }
		
		//reference+=[Course]
		public Assignment getReferenceAssignment_4_2_1() { return cReferenceAssignment_4_2_1; }
		
		//[Course]
		public CrossReference getReferenceCourseCrossReference_4_2_1_0() { return cReferenceCourseCrossReference_4_2_1_0; }
		
		//ID
		public RuleCall getReferenceCourseIDTerminalRuleCall_4_2_1_0_1() { return cReferenceCourseIDTerminalRuleCall_4_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class Professor_lectures_OrGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Professor_lectures_OrGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCourse_Reference_OrGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLecturesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cNegatedAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cNegatedExclamationMarkKeyword_2_0_0 = (Keyword)cNegatedAssignment_2_0.eContents().get(0);
		private final Assignment cTransitiveAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cTransitivePlusSignKeyword_2_1_0 = (Keyword)cTransitiveAssignment_2_1.eContents().get(0);
		private final Assignment cGeneralizedAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cGeneralizedAsteriskKeyword_2_2_0 = (Keyword)cGeneralizedAssignment_2_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cReferenceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cReferenceCourseCrossReference_4_1_0 = (CrossReference)cReferenceAssignment_4_1.eContents().get(0);
		private final RuleCall cReferenceCourseIDTerminalRuleCall_4_1_0_1 = (RuleCall)cReferenceCourseCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cORKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cReferenceAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cReferenceCourseCrossReference_4_2_1_0 = (CrossReference)cReferenceAssignment_4_2_1.eContents().get(0);
		private final RuleCall cReferenceCourseIDTerminalRuleCall_4_2_1_0_1 = (RuleCall)cReferenceCourseCrossReference_4_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Professor_lectures_OrGroup Course_Reference_OrGroup:
		//	{Course_Reference_OrGroup} 'lectures' (negated?='!'? & transitive?='+'? & generalized?='*'?) name=ID (':'
		//	reference+=[Course] ('OR' reference+=[Course])*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Course_Reference_OrGroup} 'lectures' (negated?='!'? & transitive?='+'? & generalized?='*'?) name=ID (':'
		//reference+=[Course] ('OR' reference+=[Course])*)? ';'
		public Group getGroup() { return cGroup; }
		
		//{Course_Reference_OrGroup}
		public Action getCourse_Reference_OrGroupAction_0() { return cCourse_Reference_OrGroupAction_0; }
		
		//'lectures'
		public Keyword getLecturesKeyword_1() { return cLecturesKeyword_1; }
		
		//negated?='!'? & transitive?='+'? & generalized?='*'?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2_0() { return cNegatedAssignment_2_0; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0_0() { return cNegatedExclamationMarkKeyword_2_0_0; }
		
		//transitive?='+'?
		public Assignment getTransitiveAssignment_2_1() { return cTransitiveAssignment_2_1; }
		
		//'+'
		public Keyword getTransitivePlusSignKeyword_2_1_0() { return cTransitivePlusSignKeyword_2_1_0; }
		
		//generalized?='*'?
		public Assignment getGeneralizedAssignment_2_2() { return cGeneralizedAssignment_2_2; }
		
		//'*'
		public Keyword getGeneralizedAsteriskKeyword_2_2_0() { return cGeneralizedAsteriskKeyword_2_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(':' reference+=[Course] ('OR' reference+=[Course])*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//reference+=[Course]
		public Assignment getReferenceAssignment_4_1() { return cReferenceAssignment_4_1; }
		
		//[Course]
		public CrossReference getReferenceCourseCrossReference_4_1_0() { return cReferenceCourseCrossReference_4_1_0; }
		
		//ID
		public RuleCall getReferenceCourseIDTerminalRuleCall_4_1_0_1() { return cReferenceCourseIDTerminalRuleCall_4_1_0_1; }
		
		//('OR' reference+=[Course])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'OR'
		public Keyword getORKeyword_4_2_0() { return cORKeyword_4_2_0; }
		
		//reference+=[Course]
		public Assignment getReferenceAssignment_4_2_1() { return cReferenceAssignment_4_2_1; }
		
		//[Course]
		public CrossReference getReferenceCourseCrossReference_4_2_1_0() { return cReferenceCourseCrossReference_4_2_1_0; }
		
		//ID
		public RuleCall getReferenceCourseIDTerminalRuleCall_4_2_1_0_1() { return cReferenceCourseIDTerminalRuleCall_4_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class Course_exam_OrGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Course_exam_OrGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExam_Containment_OrGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExamKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cNegatedAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cNegatedExclamationMarkKeyword_2_0_0 = (Keyword)cNegatedAssignment_2_0.eContents().get(0);
		private final Assignment cTransitiveAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cTransitivePlusSignKeyword_2_1_0 = (Keyword)cTransitiveAssignment_2_1.eContents().get(0);
		private final Assignment cGeneralizedAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cGeneralizedAsteriskKeyword_2_2_0 = (Keyword)cGeneralizedAssignment_2_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cContainmentAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cContainmentExam_TypeParserRuleCall_4_1_0 = (RuleCall)cContainmentAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cORKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cContainmentAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cContainmentExam_TypeParserRuleCall_4_2_1_0 = (RuleCall)cContainmentAssignment_4_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Course_exam_OrGroup Exam_Containment_OrGroup:
		//	{Exam_Containment_OrGroup} 'exam' (negated?='!'? & transitive?='+'? & generalized?='*'?) name=ID (':'
		//	containment+=Exam_Type ('OR' containment+=Exam_Type)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Exam_Containment_OrGroup} 'exam' (negated?='!'? & transitive?='+'? & generalized?='*'?) name=ID (':'
		//containment+=Exam_Type ('OR' containment+=Exam_Type)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//{Exam_Containment_OrGroup}
		public Action getExam_Containment_OrGroupAction_0() { return cExam_Containment_OrGroupAction_0; }
		
		//'exam'
		public Keyword getExamKeyword_1() { return cExamKeyword_1; }
		
		//negated?='!'? & transitive?='+'? & generalized?='*'?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2_0() { return cNegatedAssignment_2_0; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0_0() { return cNegatedExclamationMarkKeyword_2_0_0; }
		
		//transitive?='+'?
		public Assignment getTransitiveAssignment_2_1() { return cTransitiveAssignment_2_1; }
		
		//'+'
		public Keyword getTransitivePlusSignKeyword_2_1_0() { return cTransitivePlusSignKeyword_2_1_0; }
		
		//generalized?='*'?
		public Assignment getGeneralizedAssignment_2_2() { return cGeneralizedAssignment_2_2; }
		
		//'*'
		public Keyword getGeneralizedAsteriskKeyword_2_2_0() { return cGeneralizedAsteriskKeyword_2_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(':' containment+=Exam_Type ('OR' containment+=Exam_Type)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//containment+=Exam_Type
		public Assignment getContainmentAssignment_4_1() { return cContainmentAssignment_4_1; }
		
		//Exam_Type
		public RuleCall getContainmentExam_TypeParserRuleCall_4_1_0() { return cContainmentExam_TypeParserRuleCall_4_1_0; }
		
		//('OR' containment+=Exam_Type)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'OR'
		public Keyword getORKeyword_4_2_0() { return cORKeyword_4_2_0; }
		
		//containment+=Exam_Type
		public Assignment getContainmentAssignment_4_2_1() { return cContainmentAssignment_4_2_1; }
		
		//Exam_Type
		public RuleCall getContainmentExam_TypeParserRuleCall_4_2_1_0() { return cContainmentExam_TypeParserRuleCall_4_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class Course_mandatoryFor_OrGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Course_mandatoryFor_OrGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCourse_Reference_OrGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMandatoryForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cNegatedAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cNegatedExclamationMarkKeyword_2_0_0 = (Keyword)cNegatedAssignment_2_0.eContents().get(0);
		private final Assignment cTransitiveAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cTransitivePlusSignKeyword_2_1_0 = (Keyword)cTransitiveAssignment_2_1.eContents().get(0);
		private final Assignment cGeneralizedAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cGeneralizedAsteriskKeyword_2_2_0 = (Keyword)cGeneralizedAssignment_2_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cReferenceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cReferenceCourseCrossReference_4_1_0 = (CrossReference)cReferenceAssignment_4_1.eContents().get(0);
		private final RuleCall cReferenceCourseIDTerminalRuleCall_4_1_0_1 = (RuleCall)cReferenceCourseCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cORKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cReferenceAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cReferenceCourseCrossReference_4_2_1_0 = (CrossReference)cReferenceAssignment_4_2_1.eContents().get(0);
		private final RuleCall cReferenceCourseIDTerminalRuleCall_4_2_1_0_1 = (RuleCall)cReferenceCourseCrossReference_4_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Course_mandatoryFor_OrGroup Course_Reference_OrGroup:
		//	{Course_Reference_OrGroup} 'mandatoryFor' (negated?='!'? & transitive?='+'? & generalized?='*'?) name=ID (':'
		//	reference+=[Course] ('OR' reference+=[Course])*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Course_Reference_OrGroup} 'mandatoryFor' (negated?='!'? & transitive?='+'? & generalized?='*'?) name=ID (':'
		//reference+=[Course] ('OR' reference+=[Course])*)? ';'
		public Group getGroup() { return cGroup; }
		
		//{Course_Reference_OrGroup}
		public Action getCourse_Reference_OrGroupAction_0() { return cCourse_Reference_OrGroupAction_0; }
		
		//'mandatoryFor'
		public Keyword getMandatoryForKeyword_1() { return cMandatoryForKeyword_1; }
		
		//negated?='!'? & transitive?='+'? & generalized?='*'?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2_0() { return cNegatedAssignment_2_0; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0_0() { return cNegatedExclamationMarkKeyword_2_0_0; }
		
		//transitive?='+'?
		public Assignment getTransitiveAssignment_2_1() { return cTransitiveAssignment_2_1; }
		
		//'+'
		public Keyword getTransitivePlusSignKeyword_2_1_0() { return cTransitivePlusSignKeyword_2_1_0; }
		
		//generalized?='*'?
		public Assignment getGeneralizedAssignment_2_2() { return cGeneralizedAssignment_2_2; }
		
		//'*'
		public Keyword getGeneralizedAsteriskKeyword_2_2_0() { return cGeneralizedAsteriskKeyword_2_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(':' reference+=[Course] ('OR' reference+=[Course])*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//reference+=[Course]
		public Assignment getReferenceAssignment_4_1() { return cReferenceAssignment_4_1; }
		
		//[Course]
		public CrossReference getReferenceCourseCrossReference_4_1_0() { return cReferenceCourseCrossReference_4_1_0; }
		
		//ID
		public RuleCall getReferenceCourseIDTerminalRuleCall_4_1_0_1() { return cReferenceCourseIDTerminalRuleCall_4_1_0_1; }
		
		//('OR' reference+=[Course])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'OR'
		public Keyword getORKeyword_4_2_0() { return cORKeyword_4_2_0; }
		
		//reference+=[Course]
		public Assignment getReferenceAssignment_4_2_1() { return cReferenceAssignment_4_2_1; }
		
		//[Course]
		public CrossReference getReferenceCourseCrossReference_4_2_1_0() { return cReferenceCourseCrossReference_4_2_1_0; }
		
		//ID
		public RuleCall getReferenceCourseIDTerminalRuleCall_4_2_1_0_1() { return cReferenceCourseIDTerminalRuleCall_4_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class UniversityManagementSystem_person_OrGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.UniversityManagementSystem_person_OrGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPerson_Containment_OrGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPersonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cNegatedAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cNegatedExclamationMarkKeyword_2_0_0 = (Keyword)cNegatedAssignment_2_0.eContents().get(0);
		private final Assignment cTransitiveAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cTransitivePlusSignKeyword_2_1_0 = (Keyword)cTransitiveAssignment_2_1.eContents().get(0);
		private final Assignment cGeneralizedAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cGeneralizedAsteriskKeyword_2_2_0 = (Keyword)cGeneralizedAssignment_2_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cContainmentAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cContainmentPerson_TypeParserRuleCall_4_1_0 = (RuleCall)cContainmentAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cORKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cContainmentAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cContainmentPerson_TypeParserRuleCall_4_2_1_0 = (RuleCall)cContainmentAssignment_4_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//UniversityManagementSystem_person_OrGroup Person_Containment_OrGroup:
		//	{Person_Containment_OrGroup} 'person' (negated?='!'? & transitive?='+'? & generalized?='*'?) name=ID (':'
		//	containment+=Person_Type ('OR' containment+=Person_Type)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Person_Containment_OrGroup} 'person' (negated?='!'? & transitive?='+'? & generalized?='*'?) name=ID (':'
		//containment+=Person_Type ('OR' containment+=Person_Type)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//{Person_Containment_OrGroup}
		public Action getPerson_Containment_OrGroupAction_0() { return cPerson_Containment_OrGroupAction_0; }
		
		//'person'
		public Keyword getPersonKeyword_1() { return cPersonKeyword_1; }
		
		//negated?='!'? & transitive?='+'? & generalized?='*'?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2_0() { return cNegatedAssignment_2_0; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0_0() { return cNegatedExclamationMarkKeyword_2_0_0; }
		
		//transitive?='+'?
		public Assignment getTransitiveAssignment_2_1() { return cTransitiveAssignment_2_1; }
		
		//'+'
		public Keyword getTransitivePlusSignKeyword_2_1_0() { return cTransitivePlusSignKeyword_2_1_0; }
		
		//generalized?='*'?
		public Assignment getGeneralizedAssignment_2_2() { return cGeneralizedAssignment_2_2; }
		
		//'*'
		public Keyword getGeneralizedAsteriskKeyword_2_2_0() { return cGeneralizedAsteriskKeyword_2_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(':' containment+=Person_Type ('OR' containment+=Person_Type)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//containment+=Person_Type
		public Assignment getContainmentAssignment_4_1() { return cContainmentAssignment_4_1; }
		
		//Person_Type
		public RuleCall getContainmentPerson_TypeParserRuleCall_4_1_0() { return cContainmentPerson_TypeParserRuleCall_4_1_0; }
		
		//('OR' containment+=Person_Type)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'OR'
		public Keyword getORKeyword_4_2_0() { return cORKeyword_4_2_0; }
		
		//containment+=Person_Type
		public Assignment getContainmentAssignment_4_2_1() { return cContainmentAssignment_4_2_1; }
		
		//Person_Type
		public RuleCall getContainmentPerson_TypeParserRuleCall_4_2_1_0() { return cContainmentPerson_TypeParserRuleCall_4_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class UniversityManagementSystem_course_OrGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.UniversityManagementSystem_course_OrGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCourse_Containment_OrGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCourseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cNegatedAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cNegatedExclamationMarkKeyword_2_0_0 = (Keyword)cNegatedAssignment_2_0.eContents().get(0);
		private final Assignment cTransitiveAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cTransitivePlusSignKeyword_2_1_0 = (Keyword)cTransitiveAssignment_2_1.eContents().get(0);
		private final Assignment cGeneralizedAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cGeneralizedAsteriskKeyword_2_2_0 = (Keyword)cGeneralizedAssignment_2_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cContainmentAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cContainmentCourse_TypeParserRuleCall_4_1_0 = (RuleCall)cContainmentAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cORKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cContainmentAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cContainmentCourse_TypeParserRuleCall_4_2_1_0 = (RuleCall)cContainmentAssignment_4_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//UniversityManagementSystem_course_OrGroup Course_Containment_OrGroup:
		//	{Course_Containment_OrGroup} 'course' (negated?='!'? & transitive?='+'? & generalized?='*'?) name=ID (':'
		//	containment+=Course_Type ('OR' containment+=Course_Type)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Course_Containment_OrGroup} 'course' (negated?='!'? & transitive?='+'? & generalized?='*'?) name=ID (':'
		//containment+=Course_Type ('OR' containment+=Course_Type)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//{Course_Containment_OrGroup}
		public Action getCourse_Containment_OrGroupAction_0() { return cCourse_Containment_OrGroupAction_0; }
		
		//'course'
		public Keyword getCourseKeyword_1() { return cCourseKeyword_1; }
		
		//negated?='!'? & transitive?='+'? & generalized?='*'?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2_0() { return cNegatedAssignment_2_0; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0_0() { return cNegatedExclamationMarkKeyword_2_0_0; }
		
		//transitive?='+'?
		public Assignment getTransitiveAssignment_2_1() { return cTransitiveAssignment_2_1; }
		
		//'+'
		public Keyword getTransitivePlusSignKeyword_2_1_0() { return cTransitivePlusSignKeyword_2_1_0; }
		
		//generalized?='*'?
		public Assignment getGeneralizedAssignment_2_2() { return cGeneralizedAssignment_2_2; }
		
		//'*'
		public Keyword getGeneralizedAsteriskKeyword_2_2_0() { return cGeneralizedAsteriskKeyword_2_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(':' containment+=Course_Type ('OR' containment+=Course_Type)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//containment+=Course_Type
		public Assignment getContainmentAssignment_4_1() { return cContainmentAssignment_4_1; }
		
		//Course_Type
		public RuleCall getContainmentCourse_TypeParserRuleCall_4_1_0() { return cContainmentCourse_TypeParserRuleCall_4_1_0; }
		
		//('OR' containment+=Course_Type)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'OR'
		public Keyword getORKeyword_4_2_0() { return cORKeyword_4_2_0; }
		
		//containment+=Course_Type
		public Assignment getContainmentAssignment_4_2_1() { return cContainmentAssignment_4_2_1; }
		
		//Course_Type
		public RuleCall getContainmentCourse_TypeParserRuleCall_4_2_1_0() { return cContainmentCourse_TypeParserRuleCall_4_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class FunctionalArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.FunctionalArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveArgumentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCalculateable_ArgumentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunctionalArgument:
		//	PrimitiveArgument | Calculateable_Argument;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveArgument | Calculateable_Argument
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveArgument
		public RuleCall getPrimitiveArgumentParserRuleCall_0() { return cPrimitiveArgumentParserRuleCall_0; }
		
		//Calculateable_Argument
		public RuleCall getCalculateable_ArgumentParserRuleCall_1() { return cCalculateable_ArgumentParserRuleCall_1; }
	}
	public class Calculateable_ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Calculateable_Argument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCalculateableElement_ReferenceArgumentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEvaluationOperation_ArgumentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Calculateable_Argument:
		//	CalculateableElement_ReferenceArgument | EvaluationOperation_Argument;
		@Override public ParserRule getRule() { return rule; }
		
		//CalculateableElement_ReferenceArgument | EvaluationOperation_Argument
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CalculateableElement_ReferenceArgument
		public RuleCall getCalculateableElement_ReferenceArgumentParserRuleCall_0() { return cCalculateableElement_ReferenceArgumentParserRuleCall_0; }
		
		//EvaluationOperation_Argument
		public RuleCall getEvaluationOperation_ArgumentParserRuleCall_1() { return cEvaluationOperation_ArgumentParserRuleCall_1; }
	}
	public class PrimitiveArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.PrimitiveArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInteger_PrimitiveArgumentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cString_PrimitiveArgumentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimitiveArgument:
		//	Integer_PrimitiveArgument | String_PrimitiveArgument;
		@Override public ParserRule getRule() { return rule; }
		
		//Integer_PrimitiveArgument | String_PrimitiveArgument
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Integer_PrimitiveArgument
		public RuleCall getInteger_PrimitiveArgumentParserRuleCall_0() { return cInteger_PrimitiveArgumentParserRuleCall_0; }
		
		//String_PrimitiveArgument
		public RuleCall getString_PrimitiveArgumentParserRuleCall_1() { return cString_PrimitiveArgumentParserRuleCall_1; }
	}
	public class Integer_PrimitiveArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Integer_PrimitiveArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInteger_PrimitiveArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		
		//Integer_PrimitiveArgument:
		//	{Integer_PrimitiveArgument} value=INT operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Integer_PrimitiveArgument} value=INT operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Integer_PrimitiveArgument}
		public Action getInteger_PrimitiveArgumentAction_0() { return cInteger_PrimitiveArgumentAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_2_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_2_0; }
	}
	public class String_PrimitiveArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.String_PrimitiveArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cString_PrimitiveArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorString_FunctionalOperatorParserRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		
		//String_PrimitiveArgument:
		//	{String_PrimitiveArgument} value=STRING operator=String_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{String_PrimitiveArgument} value=STRING operator=String_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{String_PrimitiveArgument}
		public Action getString_PrimitiveArgumentAction_0() { return cString_PrimitiveArgumentAction_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
		
		//operator=String_FunctionalOperator?
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//String_FunctionalOperator
		public RuleCall getOperatorString_FunctionalOperatorParserRuleCall_2_0() { return cOperatorString_FunctionalOperatorParserRuleCall_2_0; }
	}
	public class CalculateableElement_ReferenceArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.CalculateableElement_ReferenceArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInteger_CalculateableElementReferenceArgumentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cString_CalculateableElementReferenceArgumentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CalculateableElement_ReferenceArgument:
		//	Integer_CalculateableElementReferenceArgument | String_CalculateableElementReferenceArgument;
		@Override public ParserRule getRule() { return rule; }
		
		//Integer_CalculateableElementReferenceArgument | String_CalculateableElementReferenceArgument
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Integer_CalculateableElementReferenceArgument
		public RuleCall getInteger_CalculateableElementReferenceArgumentParserRuleCall_0() { return cInteger_CalculateableElementReferenceArgumentParserRuleCall_0; }
		
		//String_CalculateableElementReferenceArgument
		public RuleCall getString_CalculateableElementReferenceArgumentParserRuleCall_1() { return cString_CalculateableElementReferenceArgumentParserRuleCall_1; }
	}
	public class Integer_CalculateableElementReferenceArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Integer_CalculateableElementReferenceArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInteger_CalculateableElementReferenceArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntegerRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReferenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cReferenceInteger_CalculateableElementCrossReference_2_0 = (CrossReference)cReferenceAssignment_2.eContents().get(0);
		private final RuleCall cReferenceInteger_CalculateableElementIDTerminalRuleCall_2_0_1 = (RuleCall)cReferenceInteger_CalculateableElementCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_4_0 = (RuleCall)cOperatorAssignment_4.eContents().get(0);
		
		//Integer_CalculateableElementReferenceArgument:
		//	{Integer_CalculateableElementReferenceArgument} 'IntegerRef(' reference=[Integer_CalculateableElement] ')'
		//	operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Integer_CalculateableElementReferenceArgument} 'IntegerRef(' reference=[Integer_CalculateableElement] ')'
		//operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Integer_CalculateableElementReferenceArgument}
		public Action getInteger_CalculateableElementReferenceArgumentAction_0() { return cInteger_CalculateableElementReferenceArgumentAction_0; }
		
		//'IntegerRef('
		public Keyword getIntegerRefKeyword_1() { return cIntegerRefKeyword_1; }
		
		//reference=[Integer_CalculateableElement]
		public Assignment getReferenceAssignment_2() { return cReferenceAssignment_2; }
		
		//[Integer_CalculateableElement]
		public CrossReference getReferenceInteger_CalculateableElementCrossReference_2_0() { return cReferenceInteger_CalculateableElementCrossReference_2_0; }
		
		//ID
		public RuleCall getReferenceInteger_CalculateableElementIDTerminalRuleCall_2_0_1() { return cReferenceInteger_CalculateableElementIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_4() { return cOperatorAssignment_4; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_4_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_4_0; }
	}
	public class String_CalculateableElementReferenceArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.String_CalculateableElementReferenceArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cString_CalculateableElementReferenceArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReferenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cReferenceString_CalculateableElementCrossReference_2_0 = (CrossReference)cReferenceAssignment_2.eContents().get(0);
		private final RuleCall cReferenceString_CalculateableElementIDTerminalRuleCall_2_0_1 = (RuleCall)cReferenceString_CalculateableElementCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperatorString_FunctionalOperatorParserRuleCall_4_0 = (RuleCall)cOperatorAssignment_4.eContents().get(0);
		
		//String_CalculateableElementReferenceArgument:
		//	{String_CalculateableElementReferenceArgument} 'StringRef(' reference=[String_CalculateableElement] ')'
		//	operator=String_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{String_CalculateableElementReferenceArgument} 'StringRef(' reference=[String_CalculateableElement] ')'
		//operator=String_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{String_CalculateableElementReferenceArgument}
		public Action getString_CalculateableElementReferenceArgumentAction_0() { return cString_CalculateableElementReferenceArgumentAction_0; }
		
		//'StringRef('
		public Keyword getStringRefKeyword_1() { return cStringRefKeyword_1; }
		
		//reference=[String_CalculateableElement]
		public Assignment getReferenceAssignment_2() { return cReferenceAssignment_2; }
		
		//[String_CalculateableElement]
		public CrossReference getReferenceString_CalculateableElementCrossReference_2_0() { return cReferenceString_CalculateableElementCrossReference_2_0; }
		
		//ID
		public RuleCall getReferenceString_CalculateableElementIDTerminalRuleCall_2_0_1() { return cReferenceString_CalculateableElementIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//operator=String_FunctionalOperator?
		public Assignment getOperatorAssignment_4() { return cOperatorAssignment_4; }
		
		//String_FunctionalOperator
		public RuleCall getOperatorString_FunctionalOperatorParserRuleCall_4_0() { return cOperatorString_FunctionalOperatorParserRuleCall_4_0; }
	}
	public class EvaluationOperation_ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.EvaluationOperation_Argument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInteger_EvaluationOperation_ArgumentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDouble_EvaluationOperation_ArgumentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EvaluationOperation_Argument:
		//	Integer_EvaluationOperation_Argument | Double_EvaluationOperation_Argument;
		@Override public ParserRule getRule() { return rule; }
		
		//Integer_EvaluationOperation_Argument | Double_EvaluationOperation_Argument
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Integer_EvaluationOperation_Argument
		public RuleCall getInteger_EvaluationOperation_ArgumentParserRuleCall_0() { return cInteger_EvaluationOperation_ArgumentParserRuleCall_0; }
		
		//Double_EvaluationOperation_Argument
		public RuleCall getDouble_EvaluationOperation_ArgumentParserRuleCall_1() { return cDouble_EvaluationOperation_ArgumentParserRuleCall_1; }
	}
	public class Integer_EvaluationOperation_ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Integer_EvaluationOperation_Argument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCount_AggregationOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSum_AggregationOperator_IntegerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMin_AggregationOperator_IntegerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMax_AggregationOperator_IntegerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIntegerParseInt_ClassOperatorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Integer_EvaluationOperation_Argument:
		//	Count_AggregationOperator | Sum_AggregationOperator_Integer | Min_AggregationOperator_Integer |
		//	Max_AggregationOperator_Integer | IntegerParseInt_ClassOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//Count_AggregationOperator | Sum_AggregationOperator_Integer | Min_AggregationOperator_Integer |
		//Max_AggregationOperator_Integer | IntegerParseInt_ClassOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Count_AggregationOperator
		public RuleCall getCount_AggregationOperatorParserRuleCall_0() { return cCount_AggregationOperatorParserRuleCall_0; }
		
		//Sum_AggregationOperator_Integer
		public RuleCall getSum_AggregationOperator_IntegerParserRuleCall_1() { return cSum_AggregationOperator_IntegerParserRuleCall_1; }
		
		//Min_AggregationOperator_Integer
		public RuleCall getMin_AggregationOperator_IntegerParserRuleCall_2() { return cMin_AggregationOperator_IntegerParserRuleCall_2; }
		
		//Max_AggregationOperator_Integer
		public RuleCall getMax_AggregationOperator_IntegerParserRuleCall_3() { return cMax_AggregationOperator_IntegerParserRuleCall_3; }
		
		//IntegerParseInt_ClassOperator
		public RuleCall getIntegerParseInt_ClassOperatorParserRuleCall_4() { return cIntegerParseInt_ClassOperatorParserRuleCall_4; }
	}
	public class Double_EvaluationOperation_ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Double_EvaluationOperation_Argument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSum_AggregationOperator_DoubleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMin_AggregationOperator_DoubleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMax_AggregationOperator_DoubleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Double_EvaluationOperation_Argument:
		//	Sum_AggregationOperator_Double | Min_AggregationOperator_Double | Max_AggregationOperator_Double;
		@Override public ParserRule getRule() { return rule; }
		
		//Sum_AggregationOperator_Double | Min_AggregationOperator_Double | Max_AggregationOperator_Double
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sum_AggregationOperator_Double
		public RuleCall getSum_AggregationOperator_DoubleParserRuleCall_0() { return cSum_AggregationOperator_DoubleParserRuleCall_0; }
		
		//Min_AggregationOperator_Double
		public RuleCall getMin_AggregationOperator_DoubleParserRuleCall_1() { return cMin_AggregationOperator_DoubleParserRuleCall_1; }
		
		//Max_AggregationOperator_Double
		public RuleCall getMax_AggregationOperator_DoubleParserRuleCall_2() { return cMax_AggregationOperator_DoubleParserRuleCall_2; }
	}
	public class Countable_ReferenceArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Countable_ReferenceArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCountable_ReferenceArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceCountableCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceCountableIDTerminalRuleCall_1_0_1 = (RuleCall)cReferenceCountableCrossReference_1_0.eContents().get(1);
		
		//Countable_ReferenceArgument:
		//	{Countable_ReferenceArgument} reference=[Countable];
		@Override public ParserRule getRule() { return rule; }
		
		//{Countable_ReferenceArgument} reference=[Countable]
		public Group getGroup() { return cGroup; }
		
		//{Countable_ReferenceArgument}
		public Action getCountable_ReferenceArgumentAction_0() { return cCountable_ReferenceArgumentAction_0; }
		
		//reference=[Countable]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//[Countable]
		public CrossReference getReferenceCountableCrossReference_1_0() { return cReferenceCountableCrossReference_1_0; }
		
		//ID
		public RuleCall getReferenceCountableIDTerminalRuleCall_1_0_1() { return cReferenceCountableIDTerminalRuleCall_1_0_1; }
	}
	public class Integer_FunctionalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Integer_FunctionalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInteger_FunctionalParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentFunctionalArgumentParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		
		//Integer_FunctionalParameter:
		//	{Integer_FunctionalParameter} argument=FunctionalArgument;
		@Override public ParserRule getRule() { return rule; }
		
		//{Integer_FunctionalParameter} argument=FunctionalArgument
		public Group getGroup() { return cGroup; }
		
		//{Integer_FunctionalParameter}
		public Action getInteger_FunctionalParameterAction_0() { return cInteger_FunctionalParameterAction_0; }
		
		//argument=FunctionalArgument
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//FunctionalArgument
		public RuleCall getArgumentFunctionalArgumentParserRuleCall_1_0() { return cArgumentFunctionalArgumentParserRuleCall_1_0; }
	}
	public class Character_FunctionalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Character_FunctionalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCharacter_FunctionalParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentFunctionalArgumentParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		
		//Character_FunctionalParameter:
		//	{Character_FunctionalParameter} argument=FunctionalArgument;
		@Override public ParserRule getRule() { return rule; }
		
		//{Character_FunctionalParameter} argument=FunctionalArgument
		public Group getGroup() { return cGroup; }
		
		//{Character_FunctionalParameter}
		public Action getCharacter_FunctionalParameterAction_0() { return cCharacter_FunctionalParameterAction_0; }
		
		//argument=FunctionalArgument
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//FunctionalArgument
		public RuleCall getArgumentFunctionalArgumentParserRuleCall_1_0() { return cArgumentFunctionalArgumentParserRuleCall_1_0; }
	}
	public class Number_FunctionalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_FunctionalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumber_FunctionalParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentFunctionalArgumentParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		
		//Number_FunctionalParameter:
		//	{Number_FunctionalParameter} argument=FunctionalArgument;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number_FunctionalParameter} argument=FunctionalArgument
		public Group getGroup() { return cGroup; }
		
		//{Number_FunctionalParameter}
		public Action getNumber_FunctionalParameterAction_0() { return cNumber_FunctionalParameterAction_0; }
		
		//argument=FunctionalArgument
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//FunctionalArgument
		public RuleCall getArgumentFunctionalArgumentParserRuleCall_1_0() { return cArgumentFunctionalArgumentParserRuleCall_1_0; }
	}
	public class CharSequence_FunctionalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.CharSequence_FunctionalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCharSequence_FunctionalParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentFunctionalArgumentParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		
		//CharSequence_FunctionalParameter:
		//	{CharSequence_FunctionalParameter} argument=FunctionalArgument;
		@Override public ParserRule getRule() { return rule; }
		
		//{CharSequence_FunctionalParameter} argument=FunctionalArgument
		public Group getGroup() { return cGroup; }
		
		//{CharSequence_FunctionalParameter}
		public Action getCharSequence_FunctionalParameterAction_0() { return cCharSequence_FunctionalParameterAction_0; }
		
		//argument=FunctionalArgument
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//FunctionalArgument
		public RuleCall getArgumentFunctionalArgumentParserRuleCall_1_0() { return cArgumentFunctionalArgumentParserRuleCall_1_0; }
	}
	public class Object_FunctionalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Object_FunctionalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObject_FunctionalParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentFunctionalArgumentParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		
		//Object_FunctionalParameter:
		//	{Object_FunctionalParameter} argument=FunctionalArgument;
		@Override public ParserRule getRule() { return rule; }
		
		//{Object_FunctionalParameter} argument=FunctionalArgument
		public Group getGroup() { return cGroup; }
		
		//{Object_FunctionalParameter}
		public Action getObject_FunctionalParameterAction_0() { return cObject_FunctionalParameterAction_0; }
		
		//argument=FunctionalArgument
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//FunctionalArgument
		public RuleCall getArgumentFunctionalArgumentParserRuleCall_1_0() { return cArgumentFunctionalArgumentParserRuleCall_1_0; }
	}
	public class String_FunctionalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.String_FunctionalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cString_FunctionalParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentFunctionalArgumentParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		
		//String_FunctionalParameter:
		//	{String_FunctionalParameter} argument=FunctionalArgument;
		@Override public ParserRule getRule() { return rule; }
		
		//{String_FunctionalParameter} argument=FunctionalArgument
		public Group getGroup() { return cGroup; }
		
		//{String_FunctionalParameter}
		public Action getString_FunctionalParameterAction_0() { return cString_FunctionalParameterAction_0; }
		
		//argument=FunctionalArgument
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//FunctionalArgument
		public RuleCall getArgumentFunctionalArgumentParserRuleCall_1_0() { return cArgumentFunctionalArgumentParserRuleCall_1_0; }
	}
	public class Boolean_FunctionalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Boolean_FunctionalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolean_FunctionalParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentFunctionalArgumentParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		
		//Boolean_FunctionalParameter:
		//	{Boolean_FunctionalParameter} argument=FunctionalArgument;
		@Override public ParserRule getRule() { return rule; }
		
		//{Boolean_FunctionalParameter} argument=FunctionalArgument
		public Group getGroup() { return cGroup; }
		
		//{Boolean_FunctionalParameter}
		public Action getBoolean_FunctionalParameterAction_0() { return cBoolean_FunctionalParameterAction_0; }
		
		//argument=FunctionalArgument
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//FunctionalArgument
		public RuleCall getArgumentFunctionalArgumentParserRuleCall_1_0() { return cArgumentFunctionalArgumentParserRuleCall_1_0; }
	}
	public class Double_FunctionalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Double_FunctionalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDouble_FunctionalParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentFunctionalArgumentParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		
		//Double_FunctionalParameter:
		//	{Double_FunctionalParameter} argument=FunctionalArgument;
		@Override public ParserRule getRule() { return rule; }
		
		//{Double_FunctionalParameter} argument=FunctionalArgument
		public Group getGroup() { return cGroup; }
		
		//{Double_FunctionalParameter}
		public Action getDouble_FunctionalParameterAction_0() { return cDouble_FunctionalParameterAction_0; }
		
		//argument=FunctionalArgument
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//FunctionalArgument
		public RuleCall getArgumentFunctionalArgumentParserRuleCall_1_0() { return cArgumentFunctionalArgumentParserRuleCall_1_0; }
	}
	public class CountableReferenceParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.CountableReferenceParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCountableReferenceParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentCountable_ReferenceArgumentParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		
		//CountableReferenceParameter:
		//	{CountableReferenceParameter} argument=Countable_ReferenceArgument;
		@Override public ParserRule getRule() { return rule; }
		
		//{CountableReferenceParameter} argument=Countable_ReferenceArgument
		public Group getGroup() { return cGroup; }
		
		//{CountableReferenceParameter}
		public Action getCountableReferenceParameterAction_0() { return cCountableReferenceParameterAction_0; }
		
		//argument=Countable_ReferenceArgument
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//Countable_ReferenceArgument
		public RuleCall getArgumentCountable_ReferenceArgumentParserRuleCall_1_0() { return cArgumentCountable_ReferenceArgumentParserRuleCall_1_0; }
	}
	public class Integer_CalculateableParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Integer_CalculateableParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInteger_CalculateableParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentCalculateable_ArgumentParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		
		//Integer_CalculateableParameter:
		//	{Integer_CalculateableParameter} argument=Calculateable_Argument;
		@Override public ParserRule getRule() { return rule; }
		
		//{Integer_CalculateableParameter} argument=Calculateable_Argument
		public Group getGroup() { return cGroup; }
		
		//{Integer_CalculateableParameter}
		public Action getInteger_CalculateableParameterAction_0() { return cInteger_CalculateableParameterAction_0; }
		
		//argument=Calculateable_Argument
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//Calculateable_Argument
		public RuleCall getArgumentCalculateable_ArgumentParserRuleCall_1_0() { return cArgumentCalculateable_ArgumentParserRuleCall_1_0; }
	}
	public class Character_CalculateableParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Character_CalculateableParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCharacter_CalculateableParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentCalculateable_ArgumentParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		
		//Character_CalculateableParameter:
		//	{Character_CalculateableParameter} argument=Calculateable_Argument;
		@Override public ParserRule getRule() { return rule; }
		
		//{Character_CalculateableParameter} argument=Calculateable_Argument
		public Group getGroup() { return cGroup; }
		
		//{Character_CalculateableParameter}
		public Action getCharacter_CalculateableParameterAction_0() { return cCharacter_CalculateableParameterAction_0; }
		
		//argument=Calculateable_Argument
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//Calculateable_Argument
		public RuleCall getArgumentCalculateable_ArgumentParserRuleCall_1_0() { return cArgumentCalculateable_ArgumentParserRuleCall_1_0; }
	}
	public class Number_CalculateableParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_CalculateableParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumber_CalculateableParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentCalculateable_ArgumentParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		
		//Number_CalculateableParameter:
		//	{Number_CalculateableParameter} argument=Calculateable_Argument;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number_CalculateableParameter} argument=Calculateable_Argument
		public Group getGroup() { return cGroup; }
		
		//{Number_CalculateableParameter}
		public Action getNumber_CalculateableParameterAction_0() { return cNumber_CalculateableParameterAction_0; }
		
		//argument=Calculateable_Argument
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//Calculateable_Argument
		public RuleCall getArgumentCalculateable_ArgumentParserRuleCall_1_0() { return cArgumentCalculateable_ArgumentParserRuleCall_1_0; }
	}
	public class CharSequence_CalculateableParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.CharSequence_CalculateableParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCharSequence_CalculateableParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentCalculateable_ArgumentParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		
		//CharSequence_CalculateableParameter:
		//	{CharSequence_CalculateableParameter} argument=Calculateable_Argument;
		@Override public ParserRule getRule() { return rule; }
		
		//{CharSequence_CalculateableParameter} argument=Calculateable_Argument
		public Group getGroup() { return cGroup; }
		
		//{CharSequence_CalculateableParameter}
		public Action getCharSequence_CalculateableParameterAction_0() { return cCharSequence_CalculateableParameterAction_0; }
		
		//argument=Calculateable_Argument
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//Calculateable_Argument
		public RuleCall getArgumentCalculateable_ArgumentParserRuleCall_1_0() { return cArgumentCalculateable_ArgumentParserRuleCall_1_0; }
	}
	public class Object_CalculateableParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Object_CalculateableParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObject_CalculateableParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentCalculateable_ArgumentParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		
		//Object_CalculateableParameter:
		//	{Object_CalculateableParameter} argument=Calculateable_Argument;
		@Override public ParserRule getRule() { return rule; }
		
		//{Object_CalculateableParameter} argument=Calculateable_Argument
		public Group getGroup() { return cGroup; }
		
		//{Object_CalculateableParameter}
		public Action getObject_CalculateableParameterAction_0() { return cObject_CalculateableParameterAction_0; }
		
		//argument=Calculateable_Argument
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//Calculateable_Argument
		public RuleCall getArgumentCalculateable_ArgumentParserRuleCall_1_0() { return cArgumentCalculateable_ArgumentParserRuleCall_1_0; }
	}
	public class String_CalculateableParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.String_CalculateableParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cString_CalculateableParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentCalculateable_ArgumentParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		
		//String_CalculateableParameter:
		//	{String_CalculateableParameter} argument=Calculateable_Argument;
		@Override public ParserRule getRule() { return rule; }
		
		//{String_CalculateableParameter} argument=Calculateable_Argument
		public Group getGroup() { return cGroup; }
		
		//{String_CalculateableParameter}
		public Action getString_CalculateableParameterAction_0() { return cString_CalculateableParameterAction_0; }
		
		//argument=Calculateable_Argument
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//Calculateable_Argument
		public RuleCall getArgumentCalculateable_ArgumentParserRuleCall_1_0() { return cArgumentCalculateable_ArgumentParserRuleCall_1_0; }
	}
	public class Boolean_CalculateableParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Boolean_CalculateableParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolean_CalculateableParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentCalculateable_ArgumentParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		
		//Boolean_CalculateableParameter:
		//	{Boolean_CalculateableParameter} argument=Calculateable_Argument;
		@Override public ParserRule getRule() { return rule; }
		
		//{Boolean_CalculateableParameter} argument=Calculateable_Argument
		public Group getGroup() { return cGroup; }
		
		//{Boolean_CalculateableParameter}
		public Action getBoolean_CalculateableParameterAction_0() { return cBoolean_CalculateableParameterAction_0; }
		
		//argument=Calculateable_Argument
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//Calculateable_Argument
		public RuleCall getArgumentCalculateable_ArgumentParserRuleCall_1_0() { return cArgumentCalculateable_ArgumentParserRuleCall_1_0; }
	}
	public class Double_CalculateableParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Double_CalculateableParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDouble_CalculateableParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentCalculateable_ArgumentParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		
		//Double_CalculateableParameter:
		//	{Double_CalculateableParameter} argument=Calculateable_Argument;
		@Override public ParserRule getRule() { return rule; }
		
		//{Double_CalculateableParameter} argument=Calculateable_Argument
		public Group getGroup() { return cGroup; }
		
		//{Double_CalculateableParameter}
		public Action getDouble_CalculateableParameterAction_0() { return cDouble_CalculateableParameterAction_0; }
		
		//argument=Calculateable_Argument
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//Calculateable_Argument
		public RuleCall getArgumentCalculateable_ArgumentParserRuleCall_1_0() { return cArgumentCalculateable_ArgumentParserRuleCall_1_0; }
	}
	public class CourseType_EnumerationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.CourseType_EnumerationOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCourseType_EnumerationOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentCourseTypeEnumRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOrKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOrAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOrCourseType_EnumerationOperatorParserRuleCall_2_1_0 = (RuleCall)cOrAssignment_2_1.eContents().get(0);
		
		//CourseType_EnumerationOperator:
		//	{CourseType_EnumerationOperator} argument=CourseType ('or' or=CourseType_EnumerationOperator)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{CourseType_EnumerationOperator} argument=CourseType ('or' or=CourseType_EnumerationOperator)?
		public Group getGroup() { return cGroup; }
		
		//{CourseType_EnumerationOperator}
		public Action getCourseType_EnumerationOperatorAction_0() { return cCourseType_EnumerationOperatorAction_0; }
		
		//argument=CourseType
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//CourseType
		public RuleCall getArgumentCourseTypeEnumRuleCall_1_0() { return cArgumentCourseTypeEnumRuleCall_1_0; }
		
		//('or' or=CourseType_EnumerationOperator)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'or'
		public Keyword getOrKeyword_2_0() { return cOrKeyword_2_0; }
		
		//or=CourseType_EnumerationOperator
		public Assignment getOrAssignment_2_1() { return cOrAssignment_2_1; }
		
		//CourseType_EnumerationOperator
		public RuleCall getOrCourseType_EnumerationOperatorParserRuleCall_2_1_0() { return cOrCourseType_EnumerationOperatorParserRuleCall_2_1_0; }
	}
	public class Integer_ExpressionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Integer_ExpressionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInteger_BitOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInteger_FunctionalOperator_BeginParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Integer_ExpressionOperator:
		//	Integer_BitOperator | Integer_FunctionalOperator_Begin;
		@Override public ParserRule getRule() { return rule; }
		
		//Integer_BitOperator | Integer_FunctionalOperator_Begin
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Integer_BitOperator
		public RuleCall getInteger_BitOperatorParserRuleCall_0() { return cInteger_BitOperatorParserRuleCall_0; }
		
		//Integer_FunctionalOperator_Begin
		public RuleCall getInteger_FunctionalOperator_BeginParserRuleCall_1() { return cInteger_FunctionalOperator_BeginParserRuleCall_1; }
	}
	public class Integer_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Integer_BitOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInteger_And_BitOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInteger_Or_BitOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Integer_BitOperator:
		//	Integer_And_BitOperator | Integer_Or_BitOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//Integer_And_BitOperator | Integer_Or_BitOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Integer_And_BitOperator
		public RuleCall getInteger_And_BitOperatorParserRuleCall_0() { return cInteger_And_BitOperatorParserRuleCall_0; }
		
		//Integer_Or_BitOperator
		public RuleCall getInteger_Or_BitOperatorParserRuleCall_1() { return cInteger_Or_BitOperatorParserRuleCall_1; }
	}
	public class Integer_And_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Integer_And_BitOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInteger_And_BitOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConnectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectsInteger_ExpressionOperatorParserRuleCall_4_0 = (RuleCall)cConnectsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConnectsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConnectsInteger_ExpressionOperatorParserRuleCall_5_1_0 = (RuleCall)cConnectsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Integer_And_BitOperator:
		//	{Integer_And_BitOperator} 'And' negated?='!'? '(' connects+=Integer_ExpressionOperator (','
		//	connects+=Integer_ExpressionOperator)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Integer_And_BitOperator} 'And' negated?='!'? '(' connects+=Integer_ExpressionOperator (','
		//connects+=Integer_ExpressionOperator)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{Integer_And_BitOperator}
		public Action getInteger_And_BitOperatorAction_0() { return cInteger_And_BitOperatorAction_0; }
		
		//'And'
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//connects+=Integer_ExpressionOperator
		public Assignment getConnectsAssignment_4() { return cConnectsAssignment_4; }
		
		//Integer_ExpressionOperator
		public RuleCall getConnectsInteger_ExpressionOperatorParserRuleCall_4_0() { return cConnectsInteger_ExpressionOperatorParserRuleCall_4_0; }
		
		//(',' connects+=Integer_ExpressionOperator)+
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//connects+=Integer_ExpressionOperator
		public Assignment getConnectsAssignment_5_1() { return cConnectsAssignment_5_1; }
		
		//Integer_ExpressionOperator
		public RuleCall getConnectsInteger_ExpressionOperatorParserRuleCall_5_1_0() { return cConnectsInteger_ExpressionOperatorParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class Integer_Or_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Integer_Or_BitOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInteger_Or_BitOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConnectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectsInteger_ExpressionOperatorParserRuleCall_4_0 = (RuleCall)cConnectsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConnectsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConnectsInteger_ExpressionOperatorParserRuleCall_5_1_0 = (RuleCall)cConnectsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Integer_Or_BitOperator:
		//	{Integer_Or_BitOperator} 'Or' negated?='!'? '(' connects+=Integer_ExpressionOperator (','
		//	connects+=Integer_ExpressionOperator)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Integer_Or_BitOperator} 'Or' negated?='!'? '(' connects+=Integer_ExpressionOperator (','
		//connects+=Integer_ExpressionOperator)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{Integer_Or_BitOperator}
		public Action getInteger_Or_BitOperatorAction_0() { return cInteger_Or_BitOperatorAction_0; }
		
		//'Or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//connects+=Integer_ExpressionOperator
		public Assignment getConnectsAssignment_4() { return cConnectsAssignment_4; }
		
		//Integer_ExpressionOperator
		public RuleCall getConnectsInteger_ExpressionOperatorParserRuleCall_4_0() { return cConnectsInteger_ExpressionOperatorParserRuleCall_4_0; }
		
		//(',' connects+=Integer_ExpressionOperator)+
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//connects+=Integer_ExpressionOperator
		public Assignment getConnectsAssignment_5_1() { return cConnectsAssignment_5_1; }
		
		//Integer_ExpressionOperator
		public RuleCall getConnectsInteger_ExpressionOperatorParserRuleCall_5_1_0() { return cConnectsInteger_ExpressionOperatorParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class Integer_FunctionalOperator_BeginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Integer_FunctionalOperator_Begin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cInteger_FunctionalOperatorParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Integer_FunctionalOperator_Begin Integer_FunctionalOperator:
		//	'self' Integer_FunctionalOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//'self' Integer_FunctionalOperator
		public Group getGroup() { return cGroup; }
		
		//'self'
		public Keyword getSelfKeyword_0() { return cSelfKeyword_0; }
		
		//Integer_FunctionalOperator
		public RuleCall getInteger_FunctionalOperatorParserRuleCall_1() { return cInteger_FunctionalOperatorParserRuleCall_1; }
	}
	public class Number_ExpressionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_ExpressionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumber_BitOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumber_FunctionalOperator_BeginParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Number_ExpressionOperator:
		//	Number_BitOperator | Number_FunctionalOperator_Begin;
		@Override public ParserRule getRule() { return rule; }
		
		//Number_BitOperator | Number_FunctionalOperator_Begin
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Number_BitOperator
		public RuleCall getNumber_BitOperatorParserRuleCall_0() { return cNumber_BitOperatorParserRuleCall_0; }
		
		//Number_FunctionalOperator_Begin
		public RuleCall getNumber_FunctionalOperator_BeginParserRuleCall_1() { return cNumber_FunctionalOperator_BeginParserRuleCall_1; }
	}
	public class Number_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_BitOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumber_And_BitOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumber_Or_BitOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Number_BitOperator:
		//	Number_And_BitOperator | Number_Or_BitOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//Number_And_BitOperator | Number_Or_BitOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Number_And_BitOperator
		public RuleCall getNumber_And_BitOperatorParserRuleCall_0() { return cNumber_And_BitOperatorParserRuleCall_0; }
		
		//Number_Or_BitOperator
		public RuleCall getNumber_Or_BitOperatorParserRuleCall_1() { return cNumber_Or_BitOperatorParserRuleCall_1; }
	}
	public class Number_And_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_And_BitOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumber_And_BitOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConnectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectsNumber_ExpressionOperatorParserRuleCall_4_0 = (RuleCall)cConnectsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConnectsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConnectsNumber_ExpressionOperatorParserRuleCall_5_1_0 = (RuleCall)cConnectsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Number_And_BitOperator:
		//	{Number_And_BitOperator} 'And' negated?='!'? '(' connects+=Number_ExpressionOperator (','
		//	connects+=Number_ExpressionOperator)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Number_And_BitOperator} 'And' negated?='!'? '(' connects+=Number_ExpressionOperator (','
		//connects+=Number_ExpressionOperator)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{Number_And_BitOperator}
		public Action getNumber_And_BitOperatorAction_0() { return cNumber_And_BitOperatorAction_0; }
		
		//'And'
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//connects+=Number_ExpressionOperator
		public Assignment getConnectsAssignment_4() { return cConnectsAssignment_4; }
		
		//Number_ExpressionOperator
		public RuleCall getConnectsNumber_ExpressionOperatorParserRuleCall_4_0() { return cConnectsNumber_ExpressionOperatorParserRuleCall_4_0; }
		
		//(',' connects+=Number_ExpressionOperator)+
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//connects+=Number_ExpressionOperator
		public Assignment getConnectsAssignment_5_1() { return cConnectsAssignment_5_1; }
		
		//Number_ExpressionOperator
		public RuleCall getConnectsNumber_ExpressionOperatorParserRuleCall_5_1_0() { return cConnectsNumber_ExpressionOperatorParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class Number_Or_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_Or_BitOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumber_Or_BitOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConnectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectsNumber_ExpressionOperatorParserRuleCall_4_0 = (RuleCall)cConnectsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConnectsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConnectsNumber_ExpressionOperatorParserRuleCall_5_1_0 = (RuleCall)cConnectsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Number_Or_BitOperator:
		//	{Number_Or_BitOperator} 'Or' negated?='!'? '(' connects+=Number_ExpressionOperator (','
		//	connects+=Number_ExpressionOperator)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Number_Or_BitOperator} 'Or' negated?='!'? '(' connects+=Number_ExpressionOperator (','
		//connects+=Number_ExpressionOperator)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{Number_Or_BitOperator}
		public Action getNumber_Or_BitOperatorAction_0() { return cNumber_Or_BitOperatorAction_0; }
		
		//'Or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//connects+=Number_ExpressionOperator
		public Assignment getConnectsAssignment_4() { return cConnectsAssignment_4; }
		
		//Number_ExpressionOperator
		public RuleCall getConnectsNumber_ExpressionOperatorParserRuleCall_4_0() { return cConnectsNumber_ExpressionOperatorParserRuleCall_4_0; }
		
		//(',' connects+=Number_ExpressionOperator)+
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//connects+=Number_ExpressionOperator
		public Assignment getConnectsAssignment_5_1() { return cConnectsAssignment_5_1; }
		
		//Number_ExpressionOperator
		public RuleCall getConnectsNumber_ExpressionOperatorParserRuleCall_5_1_0() { return cConnectsNumber_ExpressionOperatorParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class Number_FunctionalOperator_BeginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_FunctionalOperator_Begin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNumber_FunctionalOperatorParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Number_FunctionalOperator_Begin Number_FunctionalOperator:
		//	'self' Number_FunctionalOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//'self' Number_FunctionalOperator
		public Group getGroup() { return cGroup; }
		
		//'self'
		public Keyword getSelfKeyword_0() { return cSelfKeyword_0; }
		
		//Number_FunctionalOperator
		public RuleCall getNumber_FunctionalOperatorParserRuleCall_1() { return cNumber_FunctionalOperatorParserRuleCall_1; }
	}
	public class Character_ExpressionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Character_ExpressionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharacter_BitOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharacter_FunctionalOperator_BeginParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Character_ExpressionOperator:
		//	Character_BitOperator | Character_FunctionalOperator_Begin;
		@Override public ParserRule getRule() { return rule; }
		
		//Character_BitOperator | Character_FunctionalOperator_Begin
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Character_BitOperator
		public RuleCall getCharacter_BitOperatorParserRuleCall_0() { return cCharacter_BitOperatorParserRuleCall_0; }
		
		//Character_FunctionalOperator_Begin
		public RuleCall getCharacter_FunctionalOperator_BeginParserRuleCall_1() { return cCharacter_FunctionalOperator_BeginParserRuleCall_1; }
	}
	public class Character_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Character_BitOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharacter_And_BitOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharacter_Or_BitOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Character_BitOperator:
		//	Character_And_BitOperator | Character_Or_BitOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//Character_And_BitOperator | Character_Or_BitOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Character_And_BitOperator
		public RuleCall getCharacter_And_BitOperatorParserRuleCall_0() { return cCharacter_And_BitOperatorParserRuleCall_0; }
		
		//Character_Or_BitOperator
		public RuleCall getCharacter_Or_BitOperatorParserRuleCall_1() { return cCharacter_Or_BitOperatorParserRuleCall_1; }
	}
	public class Character_And_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Character_And_BitOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCharacter_And_BitOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConnectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectsCharacter_ExpressionOperatorParserRuleCall_4_0 = (RuleCall)cConnectsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConnectsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConnectsCharacter_ExpressionOperatorParserRuleCall_5_1_0 = (RuleCall)cConnectsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Character_And_BitOperator:
		//	{Character_And_BitOperator} 'And' negated?='!'? '(' connects+=Character_ExpressionOperator (','
		//	connects+=Character_ExpressionOperator)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Character_And_BitOperator} 'And' negated?='!'? '(' connects+=Character_ExpressionOperator (','
		//connects+=Character_ExpressionOperator)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{Character_And_BitOperator}
		public Action getCharacter_And_BitOperatorAction_0() { return cCharacter_And_BitOperatorAction_0; }
		
		//'And'
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//connects+=Character_ExpressionOperator
		public Assignment getConnectsAssignment_4() { return cConnectsAssignment_4; }
		
		//Character_ExpressionOperator
		public RuleCall getConnectsCharacter_ExpressionOperatorParserRuleCall_4_0() { return cConnectsCharacter_ExpressionOperatorParserRuleCall_4_0; }
		
		//(',' connects+=Character_ExpressionOperator)+
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//connects+=Character_ExpressionOperator
		public Assignment getConnectsAssignment_5_1() { return cConnectsAssignment_5_1; }
		
		//Character_ExpressionOperator
		public RuleCall getConnectsCharacter_ExpressionOperatorParserRuleCall_5_1_0() { return cConnectsCharacter_ExpressionOperatorParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class Character_Or_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Character_Or_BitOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCharacter_Or_BitOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConnectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectsCharacter_ExpressionOperatorParserRuleCall_4_0 = (RuleCall)cConnectsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConnectsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConnectsCharacter_ExpressionOperatorParserRuleCall_5_1_0 = (RuleCall)cConnectsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Character_Or_BitOperator:
		//	{Character_Or_BitOperator} 'Or' negated?='!'? '(' connects+=Character_ExpressionOperator (','
		//	connects+=Character_ExpressionOperator)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Character_Or_BitOperator} 'Or' negated?='!'? '(' connects+=Character_ExpressionOperator (','
		//connects+=Character_ExpressionOperator)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{Character_Or_BitOperator}
		public Action getCharacter_Or_BitOperatorAction_0() { return cCharacter_Or_BitOperatorAction_0; }
		
		//'Or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//connects+=Character_ExpressionOperator
		public Assignment getConnectsAssignment_4() { return cConnectsAssignment_4; }
		
		//Character_ExpressionOperator
		public RuleCall getConnectsCharacter_ExpressionOperatorParserRuleCall_4_0() { return cConnectsCharacter_ExpressionOperatorParserRuleCall_4_0; }
		
		//(',' connects+=Character_ExpressionOperator)+
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//connects+=Character_ExpressionOperator
		public Assignment getConnectsAssignment_5_1() { return cConnectsAssignment_5_1; }
		
		//Character_ExpressionOperator
		public RuleCall getConnectsCharacter_ExpressionOperatorParserRuleCall_5_1_0() { return cConnectsCharacter_ExpressionOperatorParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class Character_FunctionalOperator_BeginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Character_FunctionalOperator_Begin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCharacter_FunctionalOperatorParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Character_FunctionalOperator_Begin Character_FunctionalOperator:
		//	'self' Character_FunctionalOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//'self' Character_FunctionalOperator
		public Group getGroup() { return cGroup; }
		
		//'self'
		public Keyword getSelfKeyword_0() { return cSelfKeyword_0; }
		
		//Character_FunctionalOperator
		public RuleCall getCharacter_FunctionalOperatorParserRuleCall_1() { return cCharacter_FunctionalOperatorParserRuleCall_1; }
	}
	public class CharSequence_ExpressionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.CharSequence_ExpressionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharSequence_BitOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharSequence_FunctionalOperator_BeginParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CharSequence_ExpressionOperator:
		//	CharSequence_BitOperator | CharSequence_FunctionalOperator_Begin;
		@Override public ParserRule getRule() { return rule; }
		
		//CharSequence_BitOperator | CharSequence_FunctionalOperator_Begin
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CharSequence_BitOperator
		public RuleCall getCharSequence_BitOperatorParserRuleCall_0() { return cCharSequence_BitOperatorParserRuleCall_0; }
		
		//CharSequence_FunctionalOperator_Begin
		public RuleCall getCharSequence_FunctionalOperator_BeginParserRuleCall_1() { return cCharSequence_FunctionalOperator_BeginParserRuleCall_1; }
	}
	public class CharSequence_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.CharSequence_BitOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharSequence_And_BitOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharSequence_Or_BitOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CharSequence_BitOperator:
		//	CharSequence_And_BitOperator | CharSequence_Or_BitOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//CharSequence_And_BitOperator | CharSequence_Or_BitOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CharSequence_And_BitOperator
		public RuleCall getCharSequence_And_BitOperatorParserRuleCall_0() { return cCharSequence_And_BitOperatorParserRuleCall_0; }
		
		//CharSequence_Or_BitOperator
		public RuleCall getCharSequence_Or_BitOperatorParserRuleCall_1() { return cCharSequence_Or_BitOperatorParserRuleCall_1; }
	}
	public class CharSequence_And_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.CharSequence_And_BitOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCharSequence_And_BitOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConnectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectsCharSequence_ExpressionOperatorParserRuleCall_4_0 = (RuleCall)cConnectsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConnectsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConnectsCharSequence_ExpressionOperatorParserRuleCall_5_1_0 = (RuleCall)cConnectsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CharSequence_And_BitOperator:
		//	{CharSequence_And_BitOperator} 'And' negated?='!'? '(' connects+=CharSequence_ExpressionOperator (','
		//	connects+=CharSequence_ExpressionOperator)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{CharSequence_And_BitOperator} 'And' negated?='!'? '(' connects+=CharSequence_ExpressionOperator (','
		//connects+=CharSequence_ExpressionOperator)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{CharSequence_And_BitOperator}
		public Action getCharSequence_And_BitOperatorAction_0() { return cCharSequence_And_BitOperatorAction_0; }
		
		//'And'
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//connects+=CharSequence_ExpressionOperator
		public Assignment getConnectsAssignment_4() { return cConnectsAssignment_4; }
		
		//CharSequence_ExpressionOperator
		public RuleCall getConnectsCharSequence_ExpressionOperatorParserRuleCall_4_0() { return cConnectsCharSequence_ExpressionOperatorParserRuleCall_4_0; }
		
		//(',' connects+=CharSequence_ExpressionOperator)+
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//connects+=CharSequence_ExpressionOperator
		public Assignment getConnectsAssignment_5_1() { return cConnectsAssignment_5_1; }
		
		//CharSequence_ExpressionOperator
		public RuleCall getConnectsCharSequence_ExpressionOperatorParserRuleCall_5_1_0() { return cConnectsCharSequence_ExpressionOperatorParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class CharSequence_Or_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.CharSequence_Or_BitOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCharSequence_Or_BitOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConnectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectsCharSequence_ExpressionOperatorParserRuleCall_4_0 = (RuleCall)cConnectsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConnectsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConnectsCharSequence_ExpressionOperatorParserRuleCall_5_1_0 = (RuleCall)cConnectsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CharSequence_Or_BitOperator:
		//	{CharSequence_Or_BitOperator} 'Or' negated?='!'? '(' connects+=CharSequence_ExpressionOperator (','
		//	connects+=CharSequence_ExpressionOperator)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{CharSequence_Or_BitOperator} 'Or' negated?='!'? '(' connects+=CharSequence_ExpressionOperator (','
		//connects+=CharSequence_ExpressionOperator)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{CharSequence_Or_BitOperator}
		public Action getCharSequence_Or_BitOperatorAction_0() { return cCharSequence_Or_BitOperatorAction_0; }
		
		//'Or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//connects+=CharSequence_ExpressionOperator
		public Assignment getConnectsAssignment_4() { return cConnectsAssignment_4; }
		
		//CharSequence_ExpressionOperator
		public RuleCall getConnectsCharSequence_ExpressionOperatorParserRuleCall_4_0() { return cConnectsCharSequence_ExpressionOperatorParserRuleCall_4_0; }
		
		//(',' connects+=CharSequence_ExpressionOperator)+
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//connects+=CharSequence_ExpressionOperator
		public Assignment getConnectsAssignment_5_1() { return cConnectsAssignment_5_1; }
		
		//CharSequence_ExpressionOperator
		public RuleCall getConnectsCharSequence_ExpressionOperatorParserRuleCall_5_1_0() { return cConnectsCharSequence_ExpressionOperatorParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class CharSequence_FunctionalOperator_BeginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.CharSequence_FunctionalOperator_Begin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCharSequence_FunctionalOperatorParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//CharSequence_FunctionalOperator_Begin CharSequence_FunctionalOperator:
		//	'self' CharSequence_FunctionalOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//'self' CharSequence_FunctionalOperator
		public Group getGroup() { return cGroup; }
		
		//'self'
		public Keyword getSelfKeyword_0() { return cSelfKeyword_0; }
		
		//CharSequence_FunctionalOperator
		public RuleCall getCharSequence_FunctionalOperatorParserRuleCall_1() { return cCharSequence_FunctionalOperatorParserRuleCall_1; }
	}
	public class Object_ExpressionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Object_ExpressionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObject_BitOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObject_FunctionalOperator_BeginParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Object_ExpressionOperator:
		//	Object_BitOperator | Object_FunctionalOperator_Begin;
		@Override public ParserRule getRule() { return rule; }
		
		//Object_BitOperator | Object_FunctionalOperator_Begin
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Object_BitOperator
		public RuleCall getObject_BitOperatorParserRuleCall_0() { return cObject_BitOperatorParserRuleCall_0; }
		
		//Object_FunctionalOperator_Begin
		public RuleCall getObject_FunctionalOperator_BeginParserRuleCall_1() { return cObject_FunctionalOperator_BeginParserRuleCall_1; }
	}
	public class Object_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Object_BitOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObject_And_BitOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObject_Or_BitOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Object_BitOperator:
		//	Object_And_BitOperator | Object_Or_BitOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//Object_And_BitOperator | Object_Or_BitOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Object_And_BitOperator
		public RuleCall getObject_And_BitOperatorParserRuleCall_0() { return cObject_And_BitOperatorParserRuleCall_0; }
		
		//Object_Or_BitOperator
		public RuleCall getObject_Or_BitOperatorParserRuleCall_1() { return cObject_Or_BitOperatorParserRuleCall_1; }
	}
	public class Object_And_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Object_And_BitOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObject_And_BitOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConnectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectsObject_ExpressionOperatorParserRuleCall_4_0 = (RuleCall)cConnectsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConnectsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConnectsObject_ExpressionOperatorParserRuleCall_5_1_0 = (RuleCall)cConnectsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Object_And_BitOperator:
		//	{Object_And_BitOperator} 'And' negated?='!'? '(' connects+=Object_ExpressionOperator (','
		//	connects+=Object_ExpressionOperator)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Object_And_BitOperator} 'And' negated?='!'? '(' connects+=Object_ExpressionOperator (','
		//connects+=Object_ExpressionOperator)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{Object_And_BitOperator}
		public Action getObject_And_BitOperatorAction_0() { return cObject_And_BitOperatorAction_0; }
		
		//'And'
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//connects+=Object_ExpressionOperator
		public Assignment getConnectsAssignment_4() { return cConnectsAssignment_4; }
		
		//Object_ExpressionOperator
		public RuleCall getConnectsObject_ExpressionOperatorParserRuleCall_4_0() { return cConnectsObject_ExpressionOperatorParserRuleCall_4_0; }
		
		//(',' connects+=Object_ExpressionOperator)+
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//connects+=Object_ExpressionOperator
		public Assignment getConnectsAssignment_5_1() { return cConnectsAssignment_5_1; }
		
		//Object_ExpressionOperator
		public RuleCall getConnectsObject_ExpressionOperatorParserRuleCall_5_1_0() { return cConnectsObject_ExpressionOperatorParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class Object_Or_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Object_Or_BitOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObject_Or_BitOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConnectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectsObject_ExpressionOperatorParserRuleCall_4_0 = (RuleCall)cConnectsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConnectsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConnectsObject_ExpressionOperatorParserRuleCall_5_1_0 = (RuleCall)cConnectsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Object_Or_BitOperator:
		//	{Object_Or_BitOperator} 'Or' negated?='!'? '(' connects+=Object_ExpressionOperator (','
		//	connects+=Object_ExpressionOperator)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Object_Or_BitOperator} 'Or' negated?='!'? '(' connects+=Object_ExpressionOperator (','
		//connects+=Object_ExpressionOperator)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{Object_Or_BitOperator}
		public Action getObject_Or_BitOperatorAction_0() { return cObject_Or_BitOperatorAction_0; }
		
		//'Or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//connects+=Object_ExpressionOperator
		public Assignment getConnectsAssignment_4() { return cConnectsAssignment_4; }
		
		//Object_ExpressionOperator
		public RuleCall getConnectsObject_ExpressionOperatorParserRuleCall_4_0() { return cConnectsObject_ExpressionOperatorParserRuleCall_4_0; }
		
		//(',' connects+=Object_ExpressionOperator)+
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//connects+=Object_ExpressionOperator
		public Assignment getConnectsAssignment_5_1() { return cConnectsAssignment_5_1; }
		
		//Object_ExpressionOperator
		public RuleCall getConnectsObject_ExpressionOperatorParserRuleCall_5_1_0() { return cConnectsObject_ExpressionOperatorParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class Object_FunctionalOperator_BeginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Object_FunctionalOperator_Begin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cObject_FunctionalOperatorParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Object_FunctionalOperator_Begin Object_FunctionalOperator:
		//	'self' Object_FunctionalOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//'self' Object_FunctionalOperator
		public Group getGroup() { return cGroup; }
		
		//'self'
		public Keyword getSelfKeyword_0() { return cSelfKeyword_0; }
		
		//Object_FunctionalOperator
		public RuleCall getObject_FunctionalOperatorParserRuleCall_1() { return cObject_FunctionalOperatorParserRuleCall_1; }
	}
	public class String_ExpressionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.String_ExpressionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cString_BitOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cString_FunctionalOperator_BeginParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//String_ExpressionOperator:
		//	String_BitOperator | String_FunctionalOperator_Begin;
		@Override public ParserRule getRule() { return rule; }
		
		//String_BitOperator | String_FunctionalOperator_Begin
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//String_BitOperator
		public RuleCall getString_BitOperatorParserRuleCall_0() { return cString_BitOperatorParserRuleCall_0; }
		
		//String_FunctionalOperator_Begin
		public RuleCall getString_FunctionalOperator_BeginParserRuleCall_1() { return cString_FunctionalOperator_BeginParserRuleCall_1; }
	}
	public class String_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.String_BitOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cString_And_BitOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cString_Or_BitOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//String_BitOperator:
		//	String_And_BitOperator | String_Or_BitOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//String_And_BitOperator | String_Or_BitOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//String_And_BitOperator
		public RuleCall getString_And_BitOperatorParserRuleCall_0() { return cString_And_BitOperatorParserRuleCall_0; }
		
		//String_Or_BitOperator
		public RuleCall getString_Or_BitOperatorParserRuleCall_1() { return cString_Or_BitOperatorParserRuleCall_1; }
	}
	public class String_And_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.String_And_BitOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cString_And_BitOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConnectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectsString_ExpressionOperatorParserRuleCall_4_0 = (RuleCall)cConnectsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConnectsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConnectsString_ExpressionOperatorParserRuleCall_5_1_0 = (RuleCall)cConnectsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//String_And_BitOperator:
		//	{String_And_BitOperator} 'And' negated?='!'? '(' connects+=String_ExpressionOperator (','
		//	connects+=String_ExpressionOperator)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{String_And_BitOperator} 'And' negated?='!'? '(' connects+=String_ExpressionOperator (','
		//connects+=String_ExpressionOperator)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{String_And_BitOperator}
		public Action getString_And_BitOperatorAction_0() { return cString_And_BitOperatorAction_0; }
		
		//'And'
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//connects+=String_ExpressionOperator
		public Assignment getConnectsAssignment_4() { return cConnectsAssignment_4; }
		
		//String_ExpressionOperator
		public RuleCall getConnectsString_ExpressionOperatorParserRuleCall_4_0() { return cConnectsString_ExpressionOperatorParserRuleCall_4_0; }
		
		//(',' connects+=String_ExpressionOperator)+
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//connects+=String_ExpressionOperator
		public Assignment getConnectsAssignment_5_1() { return cConnectsAssignment_5_1; }
		
		//String_ExpressionOperator
		public RuleCall getConnectsString_ExpressionOperatorParserRuleCall_5_1_0() { return cConnectsString_ExpressionOperatorParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class String_Or_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.String_Or_BitOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cString_Or_BitOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConnectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectsString_ExpressionOperatorParserRuleCall_4_0 = (RuleCall)cConnectsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConnectsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConnectsString_ExpressionOperatorParserRuleCall_5_1_0 = (RuleCall)cConnectsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//String_Or_BitOperator:
		//	{String_Or_BitOperator} 'Or' negated?='!'? '(' connects+=String_ExpressionOperator (','
		//	connects+=String_ExpressionOperator)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{String_Or_BitOperator} 'Or' negated?='!'? '(' connects+=String_ExpressionOperator (','
		//connects+=String_ExpressionOperator)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{String_Or_BitOperator}
		public Action getString_Or_BitOperatorAction_0() { return cString_Or_BitOperatorAction_0; }
		
		//'Or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//connects+=String_ExpressionOperator
		public Assignment getConnectsAssignment_4() { return cConnectsAssignment_4; }
		
		//String_ExpressionOperator
		public RuleCall getConnectsString_ExpressionOperatorParserRuleCall_4_0() { return cConnectsString_ExpressionOperatorParserRuleCall_4_0; }
		
		//(',' connects+=String_ExpressionOperator)+
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//connects+=String_ExpressionOperator
		public Assignment getConnectsAssignment_5_1() { return cConnectsAssignment_5_1; }
		
		//String_ExpressionOperator
		public RuleCall getConnectsString_ExpressionOperatorParserRuleCall_5_1_0() { return cConnectsString_ExpressionOperatorParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class String_FunctionalOperator_BeginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.String_FunctionalOperator_Begin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cString_FunctionalOperatorParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//String_FunctionalOperator_Begin String_FunctionalOperator:
		//	'self' String_FunctionalOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//'self' String_FunctionalOperator
		public Group getGroup() { return cGroup; }
		
		//'self'
		public Keyword getSelfKeyword_0() { return cSelfKeyword_0; }
		
		//String_FunctionalOperator
		public RuleCall getString_FunctionalOperatorParserRuleCall_1() { return cString_FunctionalOperatorParserRuleCall_1; }
	}
	public class Boolean_ExpressionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Boolean_ExpressionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolean_BitOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoolean_FunctionalOperator_BeginParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Boolean_ExpressionOperator:
		//	Boolean_BitOperator | Boolean_FunctionalOperator_Begin;
		@Override public ParserRule getRule() { return rule; }
		
		//Boolean_BitOperator | Boolean_FunctionalOperator_Begin
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Boolean_BitOperator
		public RuleCall getBoolean_BitOperatorParserRuleCall_0() { return cBoolean_BitOperatorParserRuleCall_0; }
		
		//Boolean_FunctionalOperator_Begin
		public RuleCall getBoolean_FunctionalOperator_BeginParserRuleCall_1() { return cBoolean_FunctionalOperator_BeginParserRuleCall_1; }
	}
	public class Boolean_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Boolean_BitOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolean_And_BitOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoolean_Or_BitOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Boolean_BitOperator:
		//	Boolean_And_BitOperator | Boolean_Or_BitOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//Boolean_And_BitOperator | Boolean_Or_BitOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Boolean_And_BitOperator
		public RuleCall getBoolean_And_BitOperatorParserRuleCall_0() { return cBoolean_And_BitOperatorParserRuleCall_0; }
		
		//Boolean_Or_BitOperator
		public RuleCall getBoolean_Or_BitOperatorParserRuleCall_1() { return cBoolean_Or_BitOperatorParserRuleCall_1; }
	}
	public class Boolean_And_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Boolean_And_BitOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolean_And_BitOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConnectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectsBoolean_ExpressionOperatorParserRuleCall_4_0 = (RuleCall)cConnectsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConnectsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConnectsBoolean_ExpressionOperatorParserRuleCall_5_1_0 = (RuleCall)cConnectsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Boolean_And_BitOperator:
		//	{Boolean_And_BitOperator} 'And' negated?='!'? '(' connects+=Boolean_ExpressionOperator (','
		//	connects+=Boolean_ExpressionOperator)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Boolean_And_BitOperator} 'And' negated?='!'? '(' connects+=Boolean_ExpressionOperator (','
		//connects+=Boolean_ExpressionOperator)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{Boolean_And_BitOperator}
		public Action getBoolean_And_BitOperatorAction_0() { return cBoolean_And_BitOperatorAction_0; }
		
		//'And'
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//connects+=Boolean_ExpressionOperator
		public Assignment getConnectsAssignment_4() { return cConnectsAssignment_4; }
		
		//Boolean_ExpressionOperator
		public RuleCall getConnectsBoolean_ExpressionOperatorParserRuleCall_4_0() { return cConnectsBoolean_ExpressionOperatorParserRuleCall_4_0; }
		
		//(',' connects+=Boolean_ExpressionOperator)+
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//connects+=Boolean_ExpressionOperator
		public Assignment getConnectsAssignment_5_1() { return cConnectsAssignment_5_1; }
		
		//Boolean_ExpressionOperator
		public RuleCall getConnectsBoolean_ExpressionOperatorParserRuleCall_5_1_0() { return cConnectsBoolean_ExpressionOperatorParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class Boolean_Or_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Boolean_Or_BitOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolean_Or_BitOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConnectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectsBoolean_ExpressionOperatorParserRuleCall_4_0 = (RuleCall)cConnectsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConnectsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConnectsBoolean_ExpressionOperatorParserRuleCall_5_1_0 = (RuleCall)cConnectsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Boolean_Or_BitOperator:
		//	{Boolean_Or_BitOperator} 'Or' negated?='!'? '(' connects+=Boolean_ExpressionOperator (','
		//	connects+=Boolean_ExpressionOperator)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Boolean_Or_BitOperator} 'Or' negated?='!'? '(' connects+=Boolean_ExpressionOperator (','
		//connects+=Boolean_ExpressionOperator)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{Boolean_Or_BitOperator}
		public Action getBoolean_Or_BitOperatorAction_0() { return cBoolean_Or_BitOperatorAction_0; }
		
		//'Or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//connects+=Boolean_ExpressionOperator
		public Assignment getConnectsAssignment_4() { return cConnectsAssignment_4; }
		
		//Boolean_ExpressionOperator
		public RuleCall getConnectsBoolean_ExpressionOperatorParserRuleCall_4_0() { return cConnectsBoolean_ExpressionOperatorParserRuleCall_4_0; }
		
		//(',' connects+=Boolean_ExpressionOperator)+
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//connects+=Boolean_ExpressionOperator
		public Assignment getConnectsAssignment_5_1() { return cConnectsAssignment_5_1; }
		
		//Boolean_ExpressionOperator
		public RuleCall getConnectsBoolean_ExpressionOperatorParserRuleCall_5_1_0() { return cConnectsBoolean_ExpressionOperatorParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class Boolean_FunctionalOperator_BeginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Boolean_FunctionalOperator_Begin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBoolean_FunctionalOperatorParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Boolean_FunctionalOperator_Begin Boolean_FunctionalOperator:
		//	'self' Boolean_FunctionalOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//'self' Boolean_FunctionalOperator
		public Group getGroup() { return cGroup; }
		
		//'self'
		public Keyword getSelfKeyword_0() { return cSelfKeyword_0; }
		
		//Boolean_FunctionalOperator
		public RuleCall getBoolean_FunctionalOperatorParserRuleCall_1() { return cBoolean_FunctionalOperatorParserRuleCall_1; }
	}
	public class Double_ExpressionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Double_ExpressionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDouble_BitOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDouble_FunctionalOperator_BeginParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Double_ExpressionOperator:
		//	Double_BitOperator | Double_FunctionalOperator_Begin;
		@Override public ParserRule getRule() { return rule; }
		
		//Double_BitOperator | Double_FunctionalOperator_Begin
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Double_BitOperator
		public RuleCall getDouble_BitOperatorParserRuleCall_0() { return cDouble_BitOperatorParserRuleCall_0; }
		
		//Double_FunctionalOperator_Begin
		public RuleCall getDouble_FunctionalOperator_BeginParserRuleCall_1() { return cDouble_FunctionalOperator_BeginParserRuleCall_1; }
	}
	public class Double_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Double_BitOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDouble_And_BitOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDouble_Or_BitOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Double_BitOperator:
		//	Double_And_BitOperator | Double_Or_BitOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//Double_And_BitOperator | Double_Or_BitOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Double_And_BitOperator
		public RuleCall getDouble_And_BitOperatorParserRuleCall_0() { return cDouble_And_BitOperatorParserRuleCall_0; }
		
		//Double_Or_BitOperator
		public RuleCall getDouble_Or_BitOperatorParserRuleCall_1() { return cDouble_Or_BitOperatorParserRuleCall_1; }
	}
	public class Double_And_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Double_And_BitOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDouble_And_BitOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConnectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectsDouble_ExpressionOperatorParserRuleCall_4_0 = (RuleCall)cConnectsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConnectsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConnectsDouble_ExpressionOperatorParserRuleCall_5_1_0 = (RuleCall)cConnectsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Double_And_BitOperator:
		//	{Double_And_BitOperator} 'And' negated?='!'? '(' connects+=Double_ExpressionOperator (','
		//	connects+=Double_ExpressionOperator)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Double_And_BitOperator} 'And' negated?='!'? '(' connects+=Double_ExpressionOperator (','
		//connects+=Double_ExpressionOperator)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{Double_And_BitOperator}
		public Action getDouble_And_BitOperatorAction_0() { return cDouble_And_BitOperatorAction_0; }
		
		//'And'
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//connects+=Double_ExpressionOperator
		public Assignment getConnectsAssignment_4() { return cConnectsAssignment_4; }
		
		//Double_ExpressionOperator
		public RuleCall getConnectsDouble_ExpressionOperatorParserRuleCall_4_0() { return cConnectsDouble_ExpressionOperatorParserRuleCall_4_0; }
		
		//(',' connects+=Double_ExpressionOperator)+
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//connects+=Double_ExpressionOperator
		public Assignment getConnectsAssignment_5_1() { return cConnectsAssignment_5_1; }
		
		//Double_ExpressionOperator
		public RuleCall getConnectsDouble_ExpressionOperatorParserRuleCall_5_1_0() { return cConnectsDouble_ExpressionOperatorParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class Double_Or_BitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Double_Or_BitOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDouble_Or_BitOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConnectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectsDouble_ExpressionOperatorParserRuleCall_4_0 = (RuleCall)cConnectsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConnectsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConnectsDouble_ExpressionOperatorParserRuleCall_5_1_0 = (RuleCall)cConnectsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Double_Or_BitOperator:
		//	{Double_Or_BitOperator} 'Or' negated?='!'? '(' connects+=Double_ExpressionOperator (','
		//	connects+=Double_ExpressionOperator)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Double_Or_BitOperator} 'Or' negated?='!'? '(' connects+=Double_ExpressionOperator (','
		//connects+=Double_ExpressionOperator)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{Double_Or_BitOperator}
		public Action getDouble_Or_BitOperatorAction_0() { return cDouble_Or_BitOperatorAction_0; }
		
		//'Or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//connects+=Double_ExpressionOperator
		public Assignment getConnectsAssignment_4() { return cConnectsAssignment_4; }
		
		//Double_ExpressionOperator
		public RuleCall getConnectsDouble_ExpressionOperatorParserRuleCall_4_0() { return cConnectsDouble_ExpressionOperatorParserRuleCall_4_0; }
		
		//(',' connects+=Double_ExpressionOperator)+
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//connects+=Double_ExpressionOperator
		public Assignment getConnectsAssignment_5_1() { return cConnectsAssignment_5_1; }
		
		//Double_ExpressionOperator
		public RuleCall getConnectsDouble_ExpressionOperatorParserRuleCall_5_1_0() { return cConnectsDouble_ExpressionOperatorParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class Double_FunctionalOperator_BeginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Double_FunctionalOperator_Begin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDouble_FunctionalOperatorParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Double_FunctionalOperator_Begin Double_FunctionalOperator:
		//	'self' Double_FunctionalOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//'self' Double_FunctionalOperator
		public Group getGroup() { return cGroup; }
		
		//'self'
		public Keyword getSelfKeyword_0() { return cSelfKeyword_0; }
		
		//Double_FunctionalOperator
		public RuleCall getDouble_FunctionalOperatorParserRuleCall_1() { return cDouble_FunctionalOperatorParserRuleCall_1; }
	}
	public class Integer_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Integer_FunctionalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDoubleValue_FunctionalOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumber_Integer_greaterThan_FunctionalOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumber_Integer_greaterEquals_FunctionalOperatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumber_Integer_smallerThan_FunctionalOperatorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNumber_Integer_smallerEquals_FunctionalOperatorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNumber_Integer_Object_Number_equals_FunctionalOperatorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cNumber_Integer_Object_Number_toString_FunctionalOperatorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNumber_Integer_Object_Number_hashCode_FunctionalOperatorParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Integer_FunctionalOperator:
		//	doubleValue_FunctionalOperator | Number_Integer_greaterThan_FunctionalOperator |
		//	Number_Integer_greaterEquals_FunctionalOperator | Number_Integer_smallerThan_FunctionalOperator |
		//	Number_Integer_smallerEquals_FunctionalOperator | Number_Integer_Object_Number_equals_FunctionalOperator |
		//	Number_Integer_Object_Number_toString_FunctionalOperator | Number_Integer_Object_Number_hashCode_FunctionalOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//doubleValue_FunctionalOperator | Number_Integer_greaterThan_FunctionalOperator |
		//Number_Integer_greaterEquals_FunctionalOperator | Number_Integer_smallerThan_FunctionalOperator |
		//Number_Integer_smallerEquals_FunctionalOperator | Number_Integer_Object_Number_equals_FunctionalOperator |
		//Number_Integer_Object_Number_toString_FunctionalOperator | Number_Integer_Object_Number_hashCode_FunctionalOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//doubleValue_FunctionalOperator
		public RuleCall getDoubleValue_FunctionalOperatorParserRuleCall_0() { return cDoubleValue_FunctionalOperatorParserRuleCall_0; }
		
		//Number_Integer_greaterThan_FunctionalOperator
		public RuleCall getNumber_Integer_greaterThan_FunctionalOperatorParserRuleCall_1() { return cNumber_Integer_greaterThan_FunctionalOperatorParserRuleCall_1; }
		
		//Number_Integer_greaterEquals_FunctionalOperator
		public RuleCall getNumber_Integer_greaterEquals_FunctionalOperatorParserRuleCall_2() { return cNumber_Integer_greaterEquals_FunctionalOperatorParserRuleCall_2; }
		
		//Number_Integer_smallerThan_FunctionalOperator
		public RuleCall getNumber_Integer_smallerThan_FunctionalOperatorParserRuleCall_3() { return cNumber_Integer_smallerThan_FunctionalOperatorParserRuleCall_3; }
		
		//Number_Integer_smallerEquals_FunctionalOperator
		public RuleCall getNumber_Integer_smallerEquals_FunctionalOperatorParserRuleCall_4() { return cNumber_Integer_smallerEquals_FunctionalOperatorParserRuleCall_4; }
		
		//Number_Integer_Object_Number_equals_FunctionalOperator
		public RuleCall getNumber_Integer_Object_Number_equals_FunctionalOperatorParserRuleCall_5() { return cNumber_Integer_Object_Number_equals_FunctionalOperatorParserRuleCall_5; }
		
		//Number_Integer_Object_Number_toString_FunctionalOperator
		public RuleCall getNumber_Integer_Object_Number_toString_FunctionalOperatorParserRuleCall_6() { return cNumber_Integer_Object_Number_toString_FunctionalOperatorParserRuleCall_6; }
		
		//Number_Integer_Object_Number_hashCode_FunctionalOperator
		public RuleCall getNumber_Integer_Object_Number_hashCode_FunctionalOperatorParserRuleCall_7() { return cNumber_Integer_Object_Number_hashCode_FunctionalOperatorParserRuleCall_7; }
	}
	public class Number_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_FunctionalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGreaterThan_FunctionalOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGreaterEquals_FunctionalOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSmallerThan_FunctionalOperatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSmallerEquals_FunctionalOperatorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cObject_Number_equals_FunctionalOperatorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cObject_Number_toString_FunctionalOperatorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cObject_Number_hashCode_FunctionalOperatorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Number_FunctionalOperator:
		//	greaterThan_FunctionalOperator | greaterEquals_FunctionalOperator | smallerThan_FunctionalOperator |
		//	smallerEquals_FunctionalOperator | Object_Number_equals_FunctionalOperator |
		//	Object_Number_toString_FunctionalOperator | Object_Number_hashCode_FunctionalOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//greaterThan_FunctionalOperator | greaterEquals_FunctionalOperator | smallerThan_FunctionalOperator |
		//smallerEquals_FunctionalOperator | Object_Number_equals_FunctionalOperator | Object_Number_toString_FunctionalOperator
		//| Object_Number_hashCode_FunctionalOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//greaterThan_FunctionalOperator
		public RuleCall getGreaterThan_FunctionalOperatorParserRuleCall_0() { return cGreaterThan_FunctionalOperatorParserRuleCall_0; }
		
		//greaterEquals_FunctionalOperator
		public RuleCall getGreaterEquals_FunctionalOperatorParserRuleCall_1() { return cGreaterEquals_FunctionalOperatorParserRuleCall_1; }
		
		//smallerThan_FunctionalOperator
		public RuleCall getSmallerThan_FunctionalOperatorParserRuleCall_2() { return cSmallerThan_FunctionalOperatorParserRuleCall_2; }
		
		//smallerEquals_FunctionalOperator
		public RuleCall getSmallerEquals_FunctionalOperatorParserRuleCall_3() { return cSmallerEquals_FunctionalOperatorParserRuleCall_3; }
		
		//Object_Number_equals_FunctionalOperator
		public RuleCall getObject_Number_equals_FunctionalOperatorParserRuleCall_4() { return cObject_Number_equals_FunctionalOperatorParserRuleCall_4; }
		
		//Object_Number_toString_FunctionalOperator
		public RuleCall getObject_Number_toString_FunctionalOperatorParserRuleCall_5() { return cObject_Number_toString_FunctionalOperatorParserRuleCall_5; }
		
		//Object_Number_hashCode_FunctionalOperator
		public RuleCall getObject_Number_hashCode_FunctionalOperatorParserRuleCall_6() { return cObject_Number_hashCode_FunctionalOperatorParserRuleCall_6; }
	}
	public class Character_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Character_FunctionalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObject_Character_equals_FunctionalOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObject_Character_toString_FunctionalOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cObject_Character_hashCode_FunctionalOperatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Character_FunctionalOperator:
		//	Object_Character_equals_FunctionalOperator | Object_Character_toString_FunctionalOperator |
		//	Object_Character_hashCode_FunctionalOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//Object_Character_equals_FunctionalOperator | Object_Character_toString_FunctionalOperator |
		//Object_Character_hashCode_FunctionalOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Object_Character_equals_FunctionalOperator
		public RuleCall getObject_Character_equals_FunctionalOperatorParserRuleCall_0() { return cObject_Character_equals_FunctionalOperatorParserRuleCall_0; }
		
		//Object_Character_toString_FunctionalOperator
		public RuleCall getObject_Character_toString_FunctionalOperatorParserRuleCall_1() { return cObject_Character_toString_FunctionalOperatorParserRuleCall_1; }
		
		//Object_Character_hashCode_FunctionalOperator
		public RuleCall getObject_Character_hashCode_FunctionalOperatorParserRuleCall_2() { return cObject_Character_hashCode_FunctionalOperatorParserRuleCall_2; }
	}
	public class CharSequence_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.CharSequence_FunctionalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLength_FunctionalOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObject_CharSequence_equals_FunctionalOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cObject_CharSequence_toString_FunctionalOperatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cObject_CharSequence_hashCode_FunctionalOperatorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//CharSequence_FunctionalOperator:
		//	length_FunctionalOperator | Object_CharSequence_equals_FunctionalOperator |
		//	Object_CharSequence_toString_FunctionalOperator | Object_CharSequence_hashCode_FunctionalOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//length_FunctionalOperator | Object_CharSequence_equals_FunctionalOperator |
		//Object_CharSequence_toString_FunctionalOperator | Object_CharSequence_hashCode_FunctionalOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//length_FunctionalOperator
		public RuleCall getLength_FunctionalOperatorParserRuleCall_0() { return cLength_FunctionalOperatorParserRuleCall_0; }
		
		//Object_CharSequence_equals_FunctionalOperator
		public RuleCall getObject_CharSequence_equals_FunctionalOperatorParserRuleCall_1() { return cObject_CharSequence_equals_FunctionalOperatorParserRuleCall_1; }
		
		//Object_CharSequence_toString_FunctionalOperator
		public RuleCall getObject_CharSequence_toString_FunctionalOperatorParserRuleCall_2() { return cObject_CharSequence_toString_FunctionalOperatorParserRuleCall_2; }
		
		//Object_CharSequence_hashCode_FunctionalOperator
		public RuleCall getObject_CharSequence_hashCode_FunctionalOperatorParserRuleCall_3() { return cObject_CharSequence_hashCode_FunctionalOperatorParserRuleCall_3; }
	}
	public class Object_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Object_FunctionalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEquals_FunctionalOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cToString_FunctionalOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHashCode_FunctionalOperatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Object_FunctionalOperator:
		//	equals_FunctionalOperator | toString_FunctionalOperator | hashCode_FunctionalOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//equals_FunctionalOperator | toString_FunctionalOperator | hashCode_FunctionalOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//equals_FunctionalOperator
		public RuleCall getEquals_FunctionalOperatorParserRuleCall_0() { return cEquals_FunctionalOperatorParserRuleCall_0; }
		
		//toString_FunctionalOperator
		public RuleCall getToString_FunctionalOperatorParserRuleCall_1() { return cToString_FunctionalOperatorParserRuleCall_1; }
		
		//hashCode_FunctionalOperator
		public RuleCall getHashCode_FunctionalOperatorParserRuleCall_2() { return cHashCode_FunctionalOperatorParserRuleCall_2; }
	}
	public class String_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.String_FunctionalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharAt_FunctionalOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCodePointAt_FunctionalOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCodePointBefore_FunctionalOperatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCompareToString_FunctionalOperatorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCompareToStringIgnoreCase_FunctionalOperatorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cContains_FunctionalOperatorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSubstring_FunctionalOperatorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cConcat_FunctionalOperatorParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cEndsWith_FunctionalOperatorParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cEqualsIgnoreCase_FunctionalOperatorParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cIndexOfString_FunctionalOperatorParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cIndexOfChar_FunctionalOperatorParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cIndexOfCharFromIndex_FunctionalOperatorParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cIsEmpty_FunctionalOperatorParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cOffsetByCodePoints_FunctionalOperatorParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cStartsWith_FunctionalOperatorParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cStartsWithOffset_FunctionalOperatorParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cToLowerCase_FunctionalOperatorParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cToUpperCase_FunctionalOperatorParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cTrim_FunctionalOperatorParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cCharSequence_String_length_FunctionalOperatorParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cCharSequence_String_Object_CharSequence_equals_FunctionalOperatorParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cCharSequence_String_Object_CharSequence_toString_FunctionalOperatorParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cCharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		
		//String_FunctionalOperator:
		//	charAt_FunctionalOperator | codePointAt_FunctionalOperator | codePointBefore_FunctionalOperator |
		//	compareToString_FunctionalOperator | compareToStringIgnoreCase_FunctionalOperator | contains_FunctionalOperator |
		//	substring_FunctionalOperator | concat_FunctionalOperator | endsWith_FunctionalOperator |
		//	equalsIgnoreCase_FunctionalOperator | indexOfString_FunctionalOperator | indexOfChar_FunctionalOperator |
		//	indexOfCharFromIndex_FunctionalOperator | isEmpty_FunctionalOperator | offsetByCodePoints_FunctionalOperator |
		//	startsWith_FunctionalOperator | startsWithOffset_FunctionalOperator | toLowerCase_FunctionalOperator |
		//	toUpperCase_FunctionalOperator | trim_FunctionalOperator | CharSequence_String_length_FunctionalOperator |
		//	CharSequence_String_Object_CharSequence_equals_FunctionalOperator |
		//	CharSequence_String_Object_CharSequence_toString_FunctionalOperator |
		//	CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//charAt_FunctionalOperator | codePointAt_FunctionalOperator | codePointBefore_FunctionalOperator |
		//compareToString_FunctionalOperator | compareToStringIgnoreCase_FunctionalOperator | contains_FunctionalOperator |
		//substring_FunctionalOperator | concat_FunctionalOperator | endsWith_FunctionalOperator |
		//equalsIgnoreCase_FunctionalOperator | indexOfString_FunctionalOperator | indexOfChar_FunctionalOperator |
		//indexOfCharFromIndex_FunctionalOperator | isEmpty_FunctionalOperator | offsetByCodePoints_FunctionalOperator |
		//startsWith_FunctionalOperator | startsWithOffset_FunctionalOperator | toLowerCase_FunctionalOperator |
		//toUpperCase_FunctionalOperator | trim_FunctionalOperator | CharSequence_String_length_FunctionalOperator |
		//CharSequence_String_Object_CharSequence_equals_FunctionalOperator |
		//CharSequence_String_Object_CharSequence_toString_FunctionalOperator |
		//CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//charAt_FunctionalOperator
		public RuleCall getCharAt_FunctionalOperatorParserRuleCall_0() { return cCharAt_FunctionalOperatorParserRuleCall_0; }
		
		//codePointAt_FunctionalOperator
		public RuleCall getCodePointAt_FunctionalOperatorParserRuleCall_1() { return cCodePointAt_FunctionalOperatorParserRuleCall_1; }
		
		//codePointBefore_FunctionalOperator
		public RuleCall getCodePointBefore_FunctionalOperatorParserRuleCall_2() { return cCodePointBefore_FunctionalOperatorParserRuleCall_2; }
		
		//compareToString_FunctionalOperator
		public RuleCall getCompareToString_FunctionalOperatorParserRuleCall_3() { return cCompareToString_FunctionalOperatorParserRuleCall_3; }
		
		//compareToStringIgnoreCase_FunctionalOperator
		public RuleCall getCompareToStringIgnoreCase_FunctionalOperatorParserRuleCall_4() { return cCompareToStringIgnoreCase_FunctionalOperatorParserRuleCall_4; }
		
		//contains_FunctionalOperator
		public RuleCall getContains_FunctionalOperatorParserRuleCall_5() { return cContains_FunctionalOperatorParserRuleCall_5; }
		
		//substring_FunctionalOperator
		public RuleCall getSubstring_FunctionalOperatorParserRuleCall_6() { return cSubstring_FunctionalOperatorParserRuleCall_6; }
		
		//concat_FunctionalOperator
		public RuleCall getConcat_FunctionalOperatorParserRuleCall_7() { return cConcat_FunctionalOperatorParserRuleCall_7; }
		
		//endsWith_FunctionalOperator
		public RuleCall getEndsWith_FunctionalOperatorParserRuleCall_8() { return cEndsWith_FunctionalOperatorParserRuleCall_8; }
		
		//equalsIgnoreCase_FunctionalOperator
		public RuleCall getEqualsIgnoreCase_FunctionalOperatorParserRuleCall_9() { return cEqualsIgnoreCase_FunctionalOperatorParserRuleCall_9; }
		
		//indexOfString_FunctionalOperator
		public RuleCall getIndexOfString_FunctionalOperatorParserRuleCall_10() { return cIndexOfString_FunctionalOperatorParserRuleCall_10; }
		
		//indexOfChar_FunctionalOperator
		public RuleCall getIndexOfChar_FunctionalOperatorParserRuleCall_11() { return cIndexOfChar_FunctionalOperatorParserRuleCall_11; }
		
		//indexOfCharFromIndex_FunctionalOperator
		public RuleCall getIndexOfCharFromIndex_FunctionalOperatorParserRuleCall_12() { return cIndexOfCharFromIndex_FunctionalOperatorParserRuleCall_12; }
		
		//isEmpty_FunctionalOperator
		public RuleCall getIsEmpty_FunctionalOperatorParserRuleCall_13() { return cIsEmpty_FunctionalOperatorParserRuleCall_13; }
		
		//offsetByCodePoints_FunctionalOperator
		public RuleCall getOffsetByCodePoints_FunctionalOperatorParserRuleCall_14() { return cOffsetByCodePoints_FunctionalOperatorParserRuleCall_14; }
		
		//startsWith_FunctionalOperator
		public RuleCall getStartsWith_FunctionalOperatorParserRuleCall_15() { return cStartsWith_FunctionalOperatorParserRuleCall_15; }
		
		//startsWithOffset_FunctionalOperator
		public RuleCall getStartsWithOffset_FunctionalOperatorParserRuleCall_16() { return cStartsWithOffset_FunctionalOperatorParserRuleCall_16; }
		
		//toLowerCase_FunctionalOperator
		public RuleCall getToLowerCase_FunctionalOperatorParserRuleCall_17() { return cToLowerCase_FunctionalOperatorParserRuleCall_17; }
		
		//toUpperCase_FunctionalOperator
		public RuleCall getToUpperCase_FunctionalOperatorParserRuleCall_18() { return cToUpperCase_FunctionalOperatorParserRuleCall_18; }
		
		//trim_FunctionalOperator
		public RuleCall getTrim_FunctionalOperatorParserRuleCall_19() { return cTrim_FunctionalOperatorParserRuleCall_19; }
		
		//CharSequence_String_length_FunctionalOperator
		public RuleCall getCharSequence_String_length_FunctionalOperatorParserRuleCall_20() { return cCharSequence_String_length_FunctionalOperatorParserRuleCall_20; }
		
		//CharSequence_String_Object_CharSequence_equals_FunctionalOperator
		public RuleCall getCharSequence_String_Object_CharSequence_equals_FunctionalOperatorParserRuleCall_21() { return cCharSequence_String_Object_CharSequence_equals_FunctionalOperatorParserRuleCall_21; }
		
		//CharSequence_String_Object_CharSequence_toString_FunctionalOperator
		public RuleCall getCharSequence_String_Object_CharSequence_toString_FunctionalOperatorParserRuleCall_22() { return cCharSequence_String_Object_CharSequence_toString_FunctionalOperatorParserRuleCall_22; }
		
		//CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator
		public RuleCall getCharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorParserRuleCall_23() { return cCharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorParserRuleCall_23; }
	}
	public class Boolean_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Boolean_FunctionalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParseBoolean_FunctionalOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompareToBoolean_FunctionalOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cObject_Boolean_equals_FunctionalOperatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cObject_Boolean_toString_FunctionalOperatorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cObject_Boolean_hashCode_FunctionalOperatorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Boolean_FunctionalOperator:
		//	parseBoolean_FunctionalOperator | compareToBoolean_FunctionalOperator | Object_Boolean_equals_FunctionalOperator |
		//	Object_Boolean_toString_FunctionalOperator | Object_Boolean_hashCode_FunctionalOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//parseBoolean_FunctionalOperator | compareToBoolean_FunctionalOperator | Object_Boolean_equals_FunctionalOperator |
		//Object_Boolean_toString_FunctionalOperator | Object_Boolean_hashCode_FunctionalOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//parseBoolean_FunctionalOperator
		public RuleCall getParseBoolean_FunctionalOperatorParserRuleCall_0() { return cParseBoolean_FunctionalOperatorParserRuleCall_0; }
		
		//compareToBoolean_FunctionalOperator
		public RuleCall getCompareToBoolean_FunctionalOperatorParserRuleCall_1() { return cCompareToBoolean_FunctionalOperatorParserRuleCall_1; }
		
		//Object_Boolean_equals_FunctionalOperator
		public RuleCall getObject_Boolean_equals_FunctionalOperatorParserRuleCall_2() { return cObject_Boolean_equals_FunctionalOperatorParserRuleCall_2; }
		
		//Object_Boolean_toString_FunctionalOperator
		public RuleCall getObject_Boolean_toString_FunctionalOperatorParserRuleCall_3() { return cObject_Boolean_toString_FunctionalOperatorParserRuleCall_3; }
		
		//Object_Boolean_hashCode_FunctionalOperator
		public RuleCall getObject_Boolean_hashCode_FunctionalOperatorParserRuleCall_4() { return cObject_Boolean_hashCode_FunctionalOperatorParserRuleCall_4; }
	}
	public class Double_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Double_FunctionalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumber_Double_greaterThan_FunctionalOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumber_Double_greaterEquals_FunctionalOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumber_Double_smallerThan_FunctionalOperatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumber_Double_smallerEquals_FunctionalOperatorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNumber_Double_Object_Number_equals_FunctionalOperatorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNumber_Double_Object_Number_toString_FunctionalOperatorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cNumber_Double_Object_Number_hashCode_FunctionalOperatorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Double_FunctionalOperator:
		//	Number_Double_greaterThan_FunctionalOperator | Number_Double_greaterEquals_FunctionalOperator |
		//	Number_Double_smallerThan_FunctionalOperator | Number_Double_smallerEquals_FunctionalOperator |
		//	Number_Double_Object_Number_equals_FunctionalOperator | Number_Double_Object_Number_toString_FunctionalOperator |
		//	Number_Double_Object_Number_hashCode_FunctionalOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//Number_Double_greaterThan_FunctionalOperator | Number_Double_greaterEquals_FunctionalOperator |
		//Number_Double_smallerThan_FunctionalOperator | Number_Double_smallerEquals_FunctionalOperator |
		//Number_Double_Object_Number_equals_FunctionalOperator | Number_Double_Object_Number_toString_FunctionalOperator |
		//Number_Double_Object_Number_hashCode_FunctionalOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Number_Double_greaterThan_FunctionalOperator
		public RuleCall getNumber_Double_greaterThan_FunctionalOperatorParserRuleCall_0() { return cNumber_Double_greaterThan_FunctionalOperatorParserRuleCall_0; }
		
		//Number_Double_greaterEquals_FunctionalOperator
		public RuleCall getNumber_Double_greaterEquals_FunctionalOperatorParserRuleCall_1() { return cNumber_Double_greaterEquals_FunctionalOperatorParserRuleCall_1; }
		
		//Number_Double_smallerThan_FunctionalOperator
		public RuleCall getNumber_Double_smallerThan_FunctionalOperatorParserRuleCall_2() { return cNumber_Double_smallerThan_FunctionalOperatorParserRuleCall_2; }
		
		//Number_Double_smallerEquals_FunctionalOperator
		public RuleCall getNumber_Double_smallerEquals_FunctionalOperatorParserRuleCall_3() { return cNumber_Double_smallerEquals_FunctionalOperatorParserRuleCall_3; }
		
		//Number_Double_Object_Number_equals_FunctionalOperator
		public RuleCall getNumber_Double_Object_Number_equals_FunctionalOperatorParserRuleCall_4() { return cNumber_Double_Object_Number_equals_FunctionalOperatorParserRuleCall_4; }
		
		//Number_Double_Object_Number_toString_FunctionalOperator
		public RuleCall getNumber_Double_Object_Number_toString_FunctionalOperatorParserRuleCall_5() { return cNumber_Double_Object_Number_toString_FunctionalOperatorParserRuleCall_5; }
		
		//Number_Double_Object_Number_hashCode_FunctionalOperator
		public RuleCall getNumber_Double_Object_Number_hashCode_FunctionalOperatorParserRuleCall_6() { return cNumber_Double_Object_Number_hashCode_FunctionalOperatorParserRuleCall_6; }
	}
	public class DoubleValue_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.doubleValue_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDoubleValue_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDoubleValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorDouble_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//doubleValue_FunctionalOperator:
		//	{doubleValue_FunctionalOperator} '.doubleValue' '()' operator=Double_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{doubleValue_FunctionalOperator} '.doubleValue' '()' operator=Double_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{doubleValue_FunctionalOperator}
		public Action getDoubleValue_FunctionalOperatorAction_0() { return cDoubleValue_FunctionalOperatorAction_0; }
		
		//'.doubleValue'
		public Keyword getDoubleValueKeyword_1() { return cDoubleValueKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=Double_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//Double_FunctionalOperator
		public RuleCall getOperatorDouble_FunctionalOperatorParserRuleCall_3_0() { return cOperatorDouble_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class Number_Integer_greaterThan_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_Integer_greaterThan_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumber_Integer_greaterThan_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGreaterThanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cINumber_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cIAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//Number_Integer_greaterThan_FunctionalOperator:
		//	{Number_Integer_greaterThan_FunctionalOperator} '.greaterThan' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number_Integer_greaterThan_FunctionalOperator} '.greaterThan' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Number_Integer_greaterThan_FunctionalOperator}
		public Action getNumber_Integer_greaterThan_FunctionalOperatorAction_0() { return cNumber_Integer_greaterThan_FunctionalOperatorAction_0; }
		
		//'.greaterThan'
		public Keyword getGreaterThanKeyword_1() { return cGreaterThanKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//i=Number_FunctionalParameter
		public Assignment getIAssignment_4() { return cIAssignment_4; }
		
		//Number_FunctionalParameter
		public RuleCall getINumber_FunctionalParameterParserRuleCall_4_0() { return cINumber_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class Number_Integer_greaterEquals_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_Integer_greaterEquals_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumber_Integer_greaterEquals_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGreaterEqualsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cINumber_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cIAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//Number_Integer_greaterEquals_FunctionalOperator:
		//	{Number_Integer_greaterEquals_FunctionalOperator} '.greaterEquals' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number_Integer_greaterEquals_FunctionalOperator} '.greaterEquals' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Number_Integer_greaterEquals_FunctionalOperator}
		public Action getNumber_Integer_greaterEquals_FunctionalOperatorAction_0() { return cNumber_Integer_greaterEquals_FunctionalOperatorAction_0; }
		
		//'.greaterEquals'
		public Keyword getGreaterEqualsKeyword_1() { return cGreaterEqualsKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//i=Number_FunctionalParameter
		public Assignment getIAssignment_4() { return cIAssignment_4; }
		
		//Number_FunctionalParameter
		public RuleCall getINumber_FunctionalParameterParserRuleCall_4_0() { return cINumber_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class Number_Integer_smallerThan_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_Integer_smallerThan_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumber_Integer_smallerThan_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSmallerThanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cINumber_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cIAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//Number_Integer_smallerThan_FunctionalOperator:
		//	{Number_Integer_smallerThan_FunctionalOperator} '.smallerThan' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number_Integer_smallerThan_FunctionalOperator} '.smallerThan' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Number_Integer_smallerThan_FunctionalOperator}
		public Action getNumber_Integer_smallerThan_FunctionalOperatorAction_0() { return cNumber_Integer_smallerThan_FunctionalOperatorAction_0; }
		
		//'.smallerThan'
		public Keyword getSmallerThanKeyword_1() { return cSmallerThanKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//i=Number_FunctionalParameter
		public Assignment getIAssignment_4() { return cIAssignment_4; }
		
		//Number_FunctionalParameter
		public RuleCall getINumber_FunctionalParameterParserRuleCall_4_0() { return cINumber_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class Number_Integer_smallerEquals_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_Integer_smallerEquals_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumber_Integer_smallerEquals_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSmallerEqualsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cINumber_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cIAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//Number_Integer_smallerEquals_FunctionalOperator:
		//	{Number_Integer_smallerEquals_FunctionalOperator} '.smallerEquals' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number_Integer_smallerEquals_FunctionalOperator} '.smallerEquals' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Number_Integer_smallerEquals_FunctionalOperator}
		public Action getNumber_Integer_smallerEquals_FunctionalOperatorAction_0() { return cNumber_Integer_smallerEquals_FunctionalOperatorAction_0; }
		
		//'.smallerEquals'
		public Keyword getSmallerEqualsKeyword_1() { return cSmallerEqualsKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//i=Number_FunctionalParameter
		public Assignment getIAssignment_4() { return cIAssignment_4; }
		
		//Number_FunctionalParameter
		public RuleCall getINumber_FunctionalParameterParserRuleCall_4_0() { return cINumber_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class Number_Integer_Object_Number_equals_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_Integer_Object_Number_equals_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumber_Integer_Object_Number_equals_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEqualsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cObjAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjObject_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cObjAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//Number_Integer_Object_Number_equals_FunctionalOperator:
		//	{Number_Integer_Object_Number_equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter
		//	')' operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number_Integer_Object_Number_equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Number_Integer_Object_Number_equals_FunctionalOperator}
		public Action getNumber_Integer_Object_Number_equals_FunctionalOperatorAction_0() { return cNumber_Integer_Object_Number_equals_FunctionalOperatorAction_0; }
		
		//'.equals'
		public Keyword getEqualsKeyword_1() { return cEqualsKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//obj=Object_FunctionalParameter
		public Assignment getObjAssignment_4() { return cObjAssignment_4; }
		
		//Object_FunctionalParameter
		public RuleCall getObjObject_FunctionalParameterParserRuleCall_4_0() { return cObjObject_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class Number_Integer_Object_Number_toString_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_Integer_Object_Number_toString_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumber_Integer_Object_Number_toString_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cToStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorString_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//Number_Integer_Object_Number_toString_FunctionalOperator:
		//	{Number_Integer_Object_Number_toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number_Integer_Object_Number_toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Number_Integer_Object_Number_toString_FunctionalOperator}
		public Action getNumber_Integer_Object_Number_toString_FunctionalOperatorAction_0() { return cNumber_Integer_Object_Number_toString_FunctionalOperatorAction_0; }
		
		//'.toString'
		public Keyword getToStringKeyword_1() { return cToStringKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=String_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//String_FunctionalOperator
		public RuleCall getOperatorString_FunctionalOperatorParserRuleCall_3_0() { return cOperatorString_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class Number_Integer_Object_Number_hashCode_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_Integer_Object_Number_hashCode_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumber_Integer_Object_Number_hashCode_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHashCodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//Number_Integer_Object_Number_hashCode_FunctionalOperator:
		//	{Number_Integer_Object_Number_hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number_Integer_Object_Number_hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Number_Integer_Object_Number_hashCode_FunctionalOperator}
		public Action getNumber_Integer_Object_Number_hashCode_FunctionalOperatorAction_0() { return cNumber_Integer_Object_Number_hashCode_FunctionalOperatorAction_0; }
		
		//'.hashCode'
		public Keyword getHashCodeKeyword_1() { return cHashCodeKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_3_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class GreaterThan_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.greaterThan_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGreaterThan_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGreaterThanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cINumber_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cIAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//greaterThan_FunctionalOperator:
		//	{greaterThan_FunctionalOperator} '.greaterThan' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{greaterThan_FunctionalOperator} '.greaterThan' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{greaterThan_FunctionalOperator}
		public Action getGreaterThan_FunctionalOperatorAction_0() { return cGreaterThan_FunctionalOperatorAction_0; }
		
		//'.greaterThan'
		public Keyword getGreaterThanKeyword_1() { return cGreaterThanKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//i=Number_FunctionalParameter
		public Assignment getIAssignment_4() { return cIAssignment_4; }
		
		//Number_FunctionalParameter
		public RuleCall getINumber_FunctionalParameterParserRuleCall_4_0() { return cINumber_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class GreaterEquals_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.greaterEquals_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGreaterEquals_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGreaterEqualsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cINumber_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cIAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//greaterEquals_FunctionalOperator:
		//	{greaterEquals_FunctionalOperator} '.greaterEquals' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{greaterEquals_FunctionalOperator} '.greaterEquals' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{greaterEquals_FunctionalOperator}
		public Action getGreaterEquals_FunctionalOperatorAction_0() { return cGreaterEquals_FunctionalOperatorAction_0; }
		
		//'.greaterEquals'
		public Keyword getGreaterEqualsKeyword_1() { return cGreaterEqualsKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//i=Number_FunctionalParameter
		public Assignment getIAssignment_4() { return cIAssignment_4; }
		
		//Number_FunctionalParameter
		public RuleCall getINumber_FunctionalParameterParserRuleCall_4_0() { return cINumber_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class SmallerThan_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.smallerThan_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSmallerThan_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSmallerThanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cINumber_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cIAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//smallerThan_FunctionalOperator:
		//	{smallerThan_FunctionalOperator} '.smallerThan' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{smallerThan_FunctionalOperator} '.smallerThan' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{smallerThan_FunctionalOperator}
		public Action getSmallerThan_FunctionalOperatorAction_0() { return cSmallerThan_FunctionalOperatorAction_0; }
		
		//'.smallerThan'
		public Keyword getSmallerThanKeyword_1() { return cSmallerThanKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//i=Number_FunctionalParameter
		public Assignment getIAssignment_4() { return cIAssignment_4; }
		
		//Number_FunctionalParameter
		public RuleCall getINumber_FunctionalParameterParserRuleCall_4_0() { return cINumber_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class SmallerEquals_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.smallerEquals_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSmallerEquals_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSmallerEqualsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cINumber_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cIAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//smallerEquals_FunctionalOperator:
		//	{smallerEquals_FunctionalOperator} '.smallerEquals' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{smallerEquals_FunctionalOperator} '.smallerEquals' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{smallerEquals_FunctionalOperator}
		public Action getSmallerEquals_FunctionalOperatorAction_0() { return cSmallerEquals_FunctionalOperatorAction_0; }
		
		//'.smallerEquals'
		public Keyword getSmallerEqualsKeyword_1() { return cSmallerEqualsKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//i=Number_FunctionalParameter
		public Assignment getIAssignment_4() { return cIAssignment_4; }
		
		//Number_FunctionalParameter
		public RuleCall getINumber_FunctionalParameterParserRuleCall_4_0() { return cINumber_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class Object_Number_equals_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Object_Number_equals_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObject_Number_equals_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEqualsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cObjAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjObject_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cObjAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//Object_Number_equals_FunctionalOperator:
		//	{Object_Number_equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Object_Number_equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Object_Number_equals_FunctionalOperator}
		public Action getObject_Number_equals_FunctionalOperatorAction_0() { return cObject_Number_equals_FunctionalOperatorAction_0; }
		
		//'.equals'
		public Keyword getEqualsKeyword_1() { return cEqualsKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//obj=Object_FunctionalParameter
		public Assignment getObjAssignment_4() { return cObjAssignment_4; }
		
		//Object_FunctionalParameter
		public RuleCall getObjObject_FunctionalParameterParserRuleCall_4_0() { return cObjObject_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class Object_Number_toString_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Object_Number_toString_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObject_Number_toString_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cToStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorString_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//Object_Number_toString_FunctionalOperator:
		//	{Object_Number_toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Object_Number_toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Object_Number_toString_FunctionalOperator}
		public Action getObject_Number_toString_FunctionalOperatorAction_0() { return cObject_Number_toString_FunctionalOperatorAction_0; }
		
		//'.toString'
		public Keyword getToStringKeyword_1() { return cToStringKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=String_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//String_FunctionalOperator
		public RuleCall getOperatorString_FunctionalOperatorParserRuleCall_3_0() { return cOperatorString_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class Object_Number_hashCode_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Object_Number_hashCode_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObject_Number_hashCode_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHashCodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//Object_Number_hashCode_FunctionalOperator:
		//	{Object_Number_hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Object_Number_hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Object_Number_hashCode_FunctionalOperator}
		public Action getObject_Number_hashCode_FunctionalOperatorAction_0() { return cObject_Number_hashCode_FunctionalOperatorAction_0; }
		
		//'.hashCode'
		public Keyword getHashCodeKeyword_1() { return cHashCodeKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_3_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class Object_Character_equals_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Object_Character_equals_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObject_Character_equals_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEqualsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cObjAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjObject_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cObjAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//Object_Character_equals_FunctionalOperator:
		//	{Object_Character_equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Object_Character_equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Object_Character_equals_FunctionalOperator}
		public Action getObject_Character_equals_FunctionalOperatorAction_0() { return cObject_Character_equals_FunctionalOperatorAction_0; }
		
		//'.equals'
		public Keyword getEqualsKeyword_1() { return cEqualsKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//obj=Object_FunctionalParameter
		public Assignment getObjAssignment_4() { return cObjAssignment_4; }
		
		//Object_FunctionalParameter
		public RuleCall getObjObject_FunctionalParameterParserRuleCall_4_0() { return cObjObject_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class Object_Character_toString_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Object_Character_toString_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObject_Character_toString_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cToStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorString_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//Object_Character_toString_FunctionalOperator:
		//	{Object_Character_toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Object_Character_toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Object_Character_toString_FunctionalOperator}
		public Action getObject_Character_toString_FunctionalOperatorAction_0() { return cObject_Character_toString_FunctionalOperatorAction_0; }
		
		//'.toString'
		public Keyword getToStringKeyword_1() { return cToStringKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=String_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//String_FunctionalOperator
		public RuleCall getOperatorString_FunctionalOperatorParserRuleCall_3_0() { return cOperatorString_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class Object_Character_hashCode_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Object_Character_hashCode_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObject_Character_hashCode_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHashCodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//Object_Character_hashCode_FunctionalOperator:
		//	{Object_Character_hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Object_Character_hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Object_Character_hashCode_FunctionalOperator}
		public Action getObject_Character_hashCode_FunctionalOperatorAction_0() { return cObject_Character_hashCode_FunctionalOperatorAction_0; }
		
		//'.hashCode'
		public Keyword getHashCodeKeyword_1() { return cHashCodeKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_3_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class Length_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.length_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLength_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLengthKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//length_FunctionalOperator:
		//	{length_FunctionalOperator} '.length' '()' operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{length_FunctionalOperator} '.length' '()' operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{length_FunctionalOperator}
		public Action getLength_FunctionalOperatorAction_0() { return cLength_FunctionalOperatorAction_0; }
		
		//'.length'
		public Keyword getLengthKeyword_1() { return cLengthKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_3_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class Object_CharSequence_equals_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Object_CharSequence_equals_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObject_CharSequence_equals_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEqualsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cObjAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjObject_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cObjAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//Object_CharSequence_equals_FunctionalOperator:
		//	{Object_CharSequence_equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Object_CharSequence_equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Object_CharSequence_equals_FunctionalOperator}
		public Action getObject_CharSequence_equals_FunctionalOperatorAction_0() { return cObject_CharSequence_equals_FunctionalOperatorAction_0; }
		
		//'.equals'
		public Keyword getEqualsKeyword_1() { return cEqualsKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//obj=Object_FunctionalParameter
		public Assignment getObjAssignment_4() { return cObjAssignment_4; }
		
		//Object_FunctionalParameter
		public RuleCall getObjObject_FunctionalParameterParserRuleCall_4_0() { return cObjObject_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class Object_CharSequence_toString_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Object_CharSequence_toString_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObject_CharSequence_toString_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cToStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorString_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//Object_CharSequence_toString_FunctionalOperator:
		//	{Object_CharSequence_toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Object_CharSequence_toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Object_CharSequence_toString_FunctionalOperator}
		public Action getObject_CharSequence_toString_FunctionalOperatorAction_0() { return cObject_CharSequence_toString_FunctionalOperatorAction_0; }
		
		//'.toString'
		public Keyword getToStringKeyword_1() { return cToStringKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=String_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//String_FunctionalOperator
		public RuleCall getOperatorString_FunctionalOperatorParserRuleCall_3_0() { return cOperatorString_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class Object_CharSequence_hashCode_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Object_CharSequence_hashCode_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObject_CharSequence_hashCode_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHashCodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//Object_CharSequence_hashCode_FunctionalOperator:
		//	{Object_CharSequence_hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Object_CharSequence_hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Object_CharSequence_hashCode_FunctionalOperator}
		public Action getObject_CharSequence_hashCode_FunctionalOperatorAction_0() { return cObject_CharSequence_hashCode_FunctionalOperatorAction_0; }
		
		//'.hashCode'
		public Keyword getHashCodeKeyword_1() { return cHashCodeKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_3_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class Equals_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.equals_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEquals_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEqualsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cObjAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjObject_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cObjAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//equals_FunctionalOperator:
		//	{equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{equals_FunctionalOperator}
		public Action getEquals_FunctionalOperatorAction_0() { return cEquals_FunctionalOperatorAction_0; }
		
		//'.equals'
		public Keyword getEqualsKeyword_1() { return cEqualsKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//obj=Object_FunctionalParameter
		public Assignment getObjAssignment_4() { return cObjAssignment_4; }
		
		//Object_FunctionalParameter
		public RuleCall getObjObject_FunctionalParameterParserRuleCall_4_0() { return cObjObject_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class ToString_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.toString_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cToString_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cToStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorString_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//toString_FunctionalOperator:
		//	{toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{toString_FunctionalOperator}
		public Action getToString_FunctionalOperatorAction_0() { return cToString_FunctionalOperatorAction_0; }
		
		//'.toString'
		public Keyword getToStringKeyword_1() { return cToStringKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=String_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//String_FunctionalOperator
		public RuleCall getOperatorString_FunctionalOperatorParserRuleCall_3_0() { return cOperatorString_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class HashCode_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.hashCode_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHashCode_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHashCodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//hashCode_FunctionalOperator:
		//	{hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{hashCode_FunctionalOperator}
		public Action getHashCode_FunctionalOperatorAction_0() { return cHashCode_FunctionalOperatorAction_0; }
		
		//'.hashCode'
		public Keyword getHashCodeKeyword_1() { return cHashCodeKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_3_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class CharAt_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.charAt_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCharAt_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCharAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIInteger_FunctionalParameterParserRuleCall_3_0 = (RuleCall)cIAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperatorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperatorCharacter_FunctionalOperatorParserRuleCall_5_0 = (RuleCall)cOperatorAssignment_5.eContents().get(0);
		
		//charAt_FunctionalOperator:
		//	{charAt_FunctionalOperator} '.charAt' '(' i=Integer_FunctionalParameter ')' operator=Character_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{charAt_FunctionalOperator} '.charAt' '(' i=Integer_FunctionalParameter ')' operator=Character_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{charAt_FunctionalOperator}
		public Action getCharAt_FunctionalOperatorAction_0() { return cCharAt_FunctionalOperatorAction_0; }
		
		//'.charAt'
		public Keyword getCharAtKeyword_1() { return cCharAtKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//i=Integer_FunctionalParameter
		public Assignment getIAssignment_3() { return cIAssignment_3; }
		
		//Integer_FunctionalParameter
		public RuleCall getIInteger_FunctionalParameterParserRuleCall_3_0() { return cIInteger_FunctionalParameterParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//operator=Character_FunctionalOperator?
		public Assignment getOperatorAssignment_5() { return cOperatorAssignment_5; }
		
		//Character_FunctionalOperator
		public RuleCall getOperatorCharacter_FunctionalOperatorParserRuleCall_5_0() { return cOperatorCharacter_FunctionalOperatorParserRuleCall_5_0; }
	}
	public class CodePointAt_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.codePointAt_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCodePointAt_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCodePointAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIndexAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndexInteger_FunctionalParameterParserRuleCall_3_0 = (RuleCall)cIndexAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperatorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_5_0 = (RuleCall)cOperatorAssignment_5.eContents().get(0);
		
		//codePointAt_FunctionalOperator:
		//	{codePointAt_FunctionalOperator} '.codePointAt' '(' index=Integer_FunctionalParameter ')'
		//	operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{codePointAt_FunctionalOperator} '.codePointAt' '(' index=Integer_FunctionalParameter ')'
		//operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{codePointAt_FunctionalOperator}
		public Action getCodePointAt_FunctionalOperatorAction_0() { return cCodePointAt_FunctionalOperatorAction_0; }
		
		//'.codePointAt'
		public Keyword getCodePointAtKeyword_1() { return cCodePointAtKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//index=Integer_FunctionalParameter
		public Assignment getIndexAssignment_3() { return cIndexAssignment_3; }
		
		//Integer_FunctionalParameter
		public RuleCall getIndexInteger_FunctionalParameterParserRuleCall_3_0() { return cIndexInteger_FunctionalParameterParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_5() { return cOperatorAssignment_5; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_5_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_5_0; }
	}
	public class CodePointBefore_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.codePointBefore_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCodePointBefore_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCodePointBeforeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIndexAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndexInteger_FunctionalParameterParserRuleCall_3_0 = (RuleCall)cIndexAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperatorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_5_0 = (RuleCall)cOperatorAssignment_5.eContents().get(0);
		
		//codePointBefore_FunctionalOperator:
		//	{codePointBefore_FunctionalOperator} '.codePointBefore' '(' index=Integer_FunctionalParameter ')'
		//	operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{codePointBefore_FunctionalOperator} '.codePointBefore' '(' index=Integer_FunctionalParameter ')'
		//operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{codePointBefore_FunctionalOperator}
		public Action getCodePointBefore_FunctionalOperatorAction_0() { return cCodePointBefore_FunctionalOperatorAction_0; }
		
		//'.codePointBefore'
		public Keyword getCodePointBeforeKeyword_1() { return cCodePointBeforeKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//index=Integer_FunctionalParameter
		public Assignment getIndexAssignment_3() { return cIndexAssignment_3; }
		
		//Integer_FunctionalParameter
		public RuleCall getIndexInteger_FunctionalParameterParserRuleCall_3_0() { return cIndexInteger_FunctionalParameterParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_5() { return cOperatorAssignment_5; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_5_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_5_0; }
	}
	public class CompareToString_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.compareToString_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompareToString_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCompareToStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAnotherStringAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnotherStringString_FunctionalParameterParserRuleCall_3_0 = (RuleCall)cAnotherStringAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperatorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_5_0 = (RuleCall)cOperatorAssignment_5.eContents().get(0);
		
		//compareToString_FunctionalOperator:
		//	{compareToString_FunctionalOperator} '.compareToString' '(' anotherString=String_FunctionalParameter ')'
		//	operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{compareToString_FunctionalOperator} '.compareToString' '(' anotherString=String_FunctionalParameter ')'
		//operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{compareToString_FunctionalOperator}
		public Action getCompareToString_FunctionalOperatorAction_0() { return cCompareToString_FunctionalOperatorAction_0; }
		
		//'.compareToString'
		public Keyword getCompareToStringKeyword_1() { return cCompareToStringKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//anotherString=String_FunctionalParameter
		public Assignment getAnotherStringAssignment_3() { return cAnotherStringAssignment_3; }
		
		//String_FunctionalParameter
		public RuleCall getAnotherStringString_FunctionalParameterParserRuleCall_3_0() { return cAnotherStringString_FunctionalParameterParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_5() { return cOperatorAssignment_5; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_5_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_5_0; }
	}
	public class CompareToStringIgnoreCase_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.compareToStringIgnoreCase_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompareToStringIgnoreCase_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCompareToStringIgnoreCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStrAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStrString_FunctionalParameterParserRuleCall_3_0 = (RuleCall)cStrAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperatorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_5_0 = (RuleCall)cOperatorAssignment_5.eContents().get(0);
		
		//compareToStringIgnoreCase_FunctionalOperator:
		//	{compareToStringIgnoreCase_FunctionalOperator} '.compareToStringIgnoreCase' '(' str=String_FunctionalParameter ')'
		//	operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{compareToStringIgnoreCase_FunctionalOperator} '.compareToStringIgnoreCase' '(' str=String_FunctionalParameter ')'
		//operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{compareToStringIgnoreCase_FunctionalOperator}
		public Action getCompareToStringIgnoreCase_FunctionalOperatorAction_0() { return cCompareToStringIgnoreCase_FunctionalOperatorAction_0; }
		
		//'.compareToStringIgnoreCase'
		public Keyword getCompareToStringIgnoreCaseKeyword_1() { return cCompareToStringIgnoreCaseKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//str=String_FunctionalParameter
		public Assignment getStrAssignment_3() { return cStrAssignment_3; }
		
		//String_FunctionalParameter
		public RuleCall getStrString_FunctionalParameterParserRuleCall_3_0() { return cStrString_FunctionalParameterParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_5() { return cOperatorAssignment_5; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_5_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_5_0; }
	}
	public class Contains_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.contains_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContains_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContainsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCharSequenceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCharSequenceCharSequence_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cCharSequenceAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//contains_FunctionalOperator:
		//	{contains_FunctionalOperator} '.contains' negated?='!'? '(' charSequence=CharSequence_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{contains_FunctionalOperator} '.contains' negated?='!'? '(' charSequence=CharSequence_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{contains_FunctionalOperator}
		public Action getContains_FunctionalOperatorAction_0() { return cContains_FunctionalOperatorAction_0; }
		
		//'.contains'
		public Keyword getContainsKeyword_1() { return cContainsKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//charSequence=CharSequence_FunctionalParameter
		public Assignment getCharSequenceAssignment_4() { return cCharSequenceAssignment_4; }
		
		//CharSequence_FunctionalParameter
		public RuleCall getCharSequenceCharSequence_FunctionalParameterParserRuleCall_4_0() { return cCharSequenceCharSequence_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class Substring_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.substring_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubstring_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSubstringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStartIndexAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStartIndexInteger_FunctionalParameterParserRuleCall_3_0 = (RuleCall)cStartIndexAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEndIndexAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEndIndexInteger_FunctionalParameterParserRuleCall_5_0 = (RuleCall)cEndIndexAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOperatorAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOperatorString_FunctionalOperatorParserRuleCall_7_0 = (RuleCall)cOperatorAssignment_7.eContents().get(0);
		
		//substring_FunctionalOperator:
		//	{substring_FunctionalOperator} '.substring' '(' startIndex=Integer_FunctionalParameter ','
		//	endIndex=Integer_FunctionalParameter ')' operator=String_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{substring_FunctionalOperator} '.substring' '(' startIndex=Integer_FunctionalParameter ','
		//endIndex=Integer_FunctionalParameter ')' operator=String_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{substring_FunctionalOperator}
		public Action getSubstring_FunctionalOperatorAction_0() { return cSubstring_FunctionalOperatorAction_0; }
		
		//'.substring'
		public Keyword getSubstringKeyword_1() { return cSubstringKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//startIndex=Integer_FunctionalParameter
		public Assignment getStartIndexAssignment_3() { return cStartIndexAssignment_3; }
		
		//Integer_FunctionalParameter
		public RuleCall getStartIndexInteger_FunctionalParameterParserRuleCall_3_0() { return cStartIndexInteger_FunctionalParameterParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//endIndex=Integer_FunctionalParameter
		public Assignment getEndIndexAssignment_5() { return cEndIndexAssignment_5; }
		
		//Integer_FunctionalParameter
		public RuleCall getEndIndexInteger_FunctionalParameterParserRuleCall_5_0() { return cEndIndexInteger_FunctionalParameterParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//operator=String_FunctionalOperator?
		public Assignment getOperatorAssignment_7() { return cOperatorAssignment_7; }
		
		//String_FunctionalOperator
		public RuleCall getOperatorString_FunctionalOperatorParserRuleCall_7_0() { return cOperatorString_FunctionalOperatorParserRuleCall_7_0; }
	}
	public class Concat_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.concat_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConcat_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConcatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStrAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStrString_FunctionalParameterParserRuleCall_3_0 = (RuleCall)cStrAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperatorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperatorString_FunctionalOperatorParserRuleCall_5_0 = (RuleCall)cOperatorAssignment_5.eContents().get(0);
		
		//concat_FunctionalOperator:
		//	{concat_FunctionalOperator} '.concat' '(' str=String_FunctionalParameter ')' operator=String_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{concat_FunctionalOperator} '.concat' '(' str=String_FunctionalParameter ')' operator=String_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{concat_FunctionalOperator}
		public Action getConcat_FunctionalOperatorAction_0() { return cConcat_FunctionalOperatorAction_0; }
		
		//'.concat'
		public Keyword getConcatKeyword_1() { return cConcatKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//str=String_FunctionalParameter
		public Assignment getStrAssignment_3() { return cStrAssignment_3; }
		
		//String_FunctionalParameter
		public RuleCall getStrString_FunctionalParameterParserRuleCall_3_0() { return cStrString_FunctionalParameterParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//operator=String_FunctionalOperator?
		public Assignment getOperatorAssignment_5() { return cOperatorAssignment_5; }
		
		//String_FunctionalOperator
		public RuleCall getOperatorString_FunctionalOperatorParserRuleCall_5_0() { return cOperatorString_FunctionalOperatorParserRuleCall_5_0; }
	}
	public class EndsWith_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.endsWith_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEndsWith_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEndsWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSuffixAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSuffixString_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cSuffixAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//endsWith_FunctionalOperator:
		//	{endsWith_FunctionalOperator} '.endsWith' negated?='!'? '(' suffix=String_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{endsWith_FunctionalOperator} '.endsWith' negated?='!'? '(' suffix=String_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{endsWith_FunctionalOperator}
		public Action getEndsWith_FunctionalOperatorAction_0() { return cEndsWith_FunctionalOperatorAction_0; }
		
		//'.endsWith'
		public Keyword getEndsWithKeyword_1() { return cEndsWithKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//suffix=String_FunctionalParameter
		public Assignment getSuffixAssignment_4() { return cSuffixAssignment_4; }
		
		//String_FunctionalParameter
		public RuleCall getSuffixString_FunctionalParameterParserRuleCall_4_0() { return cSuffixString_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class EqualsIgnoreCase_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.equalsIgnoreCase_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEqualsIgnoreCase_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEqualsIgnoreCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnotherStringAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnotherStringString_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cAnotherStringAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//equalsIgnoreCase_FunctionalOperator:
		//	{equalsIgnoreCase_FunctionalOperator} '.equalsIgnoreCase' negated?='!'? '(' anotherString=String_FunctionalParameter
		//	')' operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{equalsIgnoreCase_FunctionalOperator} '.equalsIgnoreCase' negated?='!'? '(' anotherString=String_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{equalsIgnoreCase_FunctionalOperator}
		public Action getEqualsIgnoreCase_FunctionalOperatorAction_0() { return cEqualsIgnoreCase_FunctionalOperatorAction_0; }
		
		//'.equalsIgnoreCase'
		public Keyword getEqualsIgnoreCaseKeyword_1() { return cEqualsIgnoreCaseKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//anotherString=String_FunctionalParameter
		public Assignment getAnotherStringAssignment_4() { return cAnotherStringAssignment_4; }
		
		//String_FunctionalParameter
		public RuleCall getAnotherStringString_FunctionalParameterParserRuleCall_4_0() { return cAnotherStringString_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class IndexOfString_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.indexOfString_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIndexOfString_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIndexOfStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStrAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStrString_FunctionalParameterParserRuleCall_3_0 = (RuleCall)cStrAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperatorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_5_0 = (RuleCall)cOperatorAssignment_5.eContents().get(0);
		
		//indexOfString_FunctionalOperator:
		//	{indexOfString_FunctionalOperator} '.indexOfString' '(' str=String_FunctionalParameter ')'
		//	operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{indexOfString_FunctionalOperator} '.indexOfString' '(' str=String_FunctionalParameter ')'
		//operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{indexOfString_FunctionalOperator}
		public Action getIndexOfString_FunctionalOperatorAction_0() { return cIndexOfString_FunctionalOperatorAction_0; }
		
		//'.indexOfString'
		public Keyword getIndexOfStringKeyword_1() { return cIndexOfStringKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//str=String_FunctionalParameter
		public Assignment getStrAssignment_3() { return cStrAssignment_3; }
		
		//String_FunctionalParameter
		public RuleCall getStrString_FunctionalParameterParserRuleCall_3_0() { return cStrString_FunctionalParameterParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_5() { return cOperatorAssignment_5; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_5_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_5_0; }
	}
	public class IndexOfChar_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.indexOfChar_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIndexOfChar_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIndexOfCharKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cChAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChInteger_FunctionalParameterParserRuleCall_3_0 = (RuleCall)cChAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperatorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_5_0 = (RuleCall)cOperatorAssignment_5.eContents().get(0);
		
		//indexOfChar_FunctionalOperator:
		//	{indexOfChar_FunctionalOperator} '.indexOfChar' '(' ch=Integer_FunctionalParameter ')'
		//	operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{indexOfChar_FunctionalOperator} '.indexOfChar' '(' ch=Integer_FunctionalParameter ')'
		//operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{indexOfChar_FunctionalOperator}
		public Action getIndexOfChar_FunctionalOperatorAction_0() { return cIndexOfChar_FunctionalOperatorAction_0; }
		
		//'.indexOfChar'
		public Keyword getIndexOfCharKeyword_1() { return cIndexOfCharKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//ch=Integer_FunctionalParameter
		public Assignment getChAssignment_3() { return cChAssignment_3; }
		
		//Integer_FunctionalParameter
		public RuleCall getChInteger_FunctionalParameterParserRuleCall_3_0() { return cChInteger_FunctionalParameterParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_5() { return cOperatorAssignment_5; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_5_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_5_0; }
	}
	public class IndexOfCharFromIndex_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.indexOfCharFromIndex_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIndexOfCharFromIndex_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIndexOfCharFromIndexKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cChAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChInteger_FunctionalParameterParserRuleCall_3_0 = (RuleCall)cChAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFromIndexAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFromIndexInteger_FunctionalParameterParserRuleCall_5_0 = (RuleCall)cFromIndexAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOperatorAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_7_0 = (RuleCall)cOperatorAssignment_7.eContents().get(0);
		
		//indexOfCharFromIndex_FunctionalOperator:
		//	{indexOfCharFromIndex_FunctionalOperator} '.indexOfCharFromIndex' '(' ch=Integer_FunctionalParameter ','
		//	fromIndex=Integer_FunctionalParameter ')' operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{indexOfCharFromIndex_FunctionalOperator} '.indexOfCharFromIndex' '(' ch=Integer_FunctionalParameter ','
		//fromIndex=Integer_FunctionalParameter ')' operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{indexOfCharFromIndex_FunctionalOperator}
		public Action getIndexOfCharFromIndex_FunctionalOperatorAction_0() { return cIndexOfCharFromIndex_FunctionalOperatorAction_0; }
		
		//'.indexOfCharFromIndex'
		public Keyword getIndexOfCharFromIndexKeyword_1() { return cIndexOfCharFromIndexKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//ch=Integer_FunctionalParameter
		public Assignment getChAssignment_3() { return cChAssignment_3; }
		
		//Integer_FunctionalParameter
		public RuleCall getChInteger_FunctionalParameterParserRuleCall_3_0() { return cChInteger_FunctionalParameterParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//fromIndex=Integer_FunctionalParameter
		public Assignment getFromIndexAssignment_5() { return cFromIndexAssignment_5; }
		
		//Integer_FunctionalParameter
		public RuleCall getFromIndexInteger_FunctionalParameterParserRuleCall_5_0() { return cFromIndexInteger_FunctionalParameterParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_7() { return cOperatorAssignment_7; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_7_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_7_0; }
	}
	public class IsEmpty_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.isEmpty_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsEmpty_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsEmptyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_4_0 = (RuleCall)cOperatorAssignment_4.eContents().get(0);
		
		//isEmpty_FunctionalOperator:
		//	{isEmpty_FunctionalOperator} '.isEmpty' negated?='!'? '()' operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{isEmpty_FunctionalOperator} '.isEmpty' negated?='!'? '()' operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{isEmpty_FunctionalOperator}
		public Action getIsEmpty_FunctionalOperatorAction_0() { return cIsEmpty_FunctionalOperatorAction_0; }
		
		//'.isEmpty'
		public Keyword getIsEmptyKeyword_1() { return cIsEmptyKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_3() { return cLeftParenthesisRightParenthesisKeyword_3; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_4() { return cOperatorAssignment_4; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_4_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_4_0; }
	}
	public class OffsetByCodePoints_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.offsetByCodePoints_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOffsetByCodePoints_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOffsetByCodePointsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIndexAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndexInteger_FunctionalParameterParserRuleCall_3_0 = (RuleCall)cIndexAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCodePointOffsetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCodePointOffsetInteger_FunctionalParameterParserRuleCall_5_0 = (RuleCall)cCodePointOffsetAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOperatorAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_7_0 = (RuleCall)cOperatorAssignment_7.eContents().get(0);
		
		//offsetByCodePoints_FunctionalOperator:
		//	{offsetByCodePoints_FunctionalOperator} '.offsetByCodePoints' '(' index=Integer_FunctionalParameter ','
		//	codePointOffset=Integer_FunctionalParameter ')' operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{offsetByCodePoints_FunctionalOperator} '.offsetByCodePoints' '(' index=Integer_FunctionalParameter ','
		//codePointOffset=Integer_FunctionalParameter ')' operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{offsetByCodePoints_FunctionalOperator}
		public Action getOffsetByCodePoints_FunctionalOperatorAction_0() { return cOffsetByCodePoints_FunctionalOperatorAction_0; }
		
		//'.offsetByCodePoints'
		public Keyword getOffsetByCodePointsKeyword_1() { return cOffsetByCodePointsKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//index=Integer_FunctionalParameter
		public Assignment getIndexAssignment_3() { return cIndexAssignment_3; }
		
		//Integer_FunctionalParameter
		public RuleCall getIndexInteger_FunctionalParameterParserRuleCall_3_0() { return cIndexInteger_FunctionalParameterParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//codePointOffset=Integer_FunctionalParameter
		public Assignment getCodePointOffsetAssignment_5() { return cCodePointOffsetAssignment_5; }
		
		//Integer_FunctionalParameter
		public RuleCall getCodePointOffsetInteger_FunctionalParameterParserRuleCall_5_0() { return cCodePointOffsetInteger_FunctionalParameterParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_7() { return cOperatorAssignment_7; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_7_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_7_0; }
	}
	public class StartsWith_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.startsWith_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStartsWith_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStartsWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPrefixAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPrefixString_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cPrefixAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//startsWith_FunctionalOperator:
		//	{startsWith_FunctionalOperator} '.startsWith' negated?='!'? '(' prefix=String_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{startsWith_FunctionalOperator} '.startsWith' negated?='!'? '(' prefix=String_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{startsWith_FunctionalOperator}
		public Action getStartsWith_FunctionalOperatorAction_0() { return cStartsWith_FunctionalOperatorAction_0; }
		
		//'.startsWith'
		public Keyword getStartsWithKeyword_1() { return cStartsWithKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//prefix=String_FunctionalParameter
		public Assignment getPrefixAssignment_4() { return cPrefixAssignment_4; }
		
		//String_FunctionalParameter
		public RuleCall getPrefixString_FunctionalParameterParserRuleCall_4_0() { return cPrefixString_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class StartsWithOffset_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.startsWithOffset_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStartsWithOffset_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStartsWithOffsetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPrefixAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPrefixString_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cPrefixAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cToffsetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cToffsetInteger_FunctionalParameterParserRuleCall_6_0 = (RuleCall)cToffsetAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOperatorAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_8_0 = (RuleCall)cOperatorAssignment_8.eContents().get(0);
		
		//startsWithOffset_FunctionalOperator:
		//	{startsWithOffset_FunctionalOperator} '.startsWithOffset' negated?='!'? '(' prefix=String_FunctionalParameter ','
		//	toffset=Integer_FunctionalParameter ')' operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{startsWithOffset_FunctionalOperator} '.startsWithOffset' negated?='!'? '(' prefix=String_FunctionalParameter ','
		//toffset=Integer_FunctionalParameter ')' operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{startsWithOffset_FunctionalOperator}
		public Action getStartsWithOffset_FunctionalOperatorAction_0() { return cStartsWithOffset_FunctionalOperatorAction_0; }
		
		//'.startsWithOffset'
		public Keyword getStartsWithOffsetKeyword_1() { return cStartsWithOffsetKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//prefix=String_FunctionalParameter
		public Assignment getPrefixAssignment_4() { return cPrefixAssignment_4; }
		
		//String_FunctionalParameter
		public RuleCall getPrefixString_FunctionalParameterParserRuleCall_4_0() { return cPrefixString_FunctionalParameterParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//toffset=Integer_FunctionalParameter
		public Assignment getToffsetAssignment_6() { return cToffsetAssignment_6; }
		
		//Integer_FunctionalParameter
		public RuleCall getToffsetInteger_FunctionalParameterParserRuleCall_6_0() { return cToffsetInteger_FunctionalParameterParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_8() { return cOperatorAssignment_8; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_8_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_8_0; }
	}
	public class ToLowerCase_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.toLowerCase_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cToLowerCase_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cToLowerCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorString_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//toLowerCase_FunctionalOperator:
		//	{toLowerCase_FunctionalOperator} '.toLowerCase' '()' operator=String_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{toLowerCase_FunctionalOperator} '.toLowerCase' '()' operator=String_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{toLowerCase_FunctionalOperator}
		public Action getToLowerCase_FunctionalOperatorAction_0() { return cToLowerCase_FunctionalOperatorAction_0; }
		
		//'.toLowerCase'
		public Keyword getToLowerCaseKeyword_1() { return cToLowerCaseKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=String_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//String_FunctionalOperator
		public RuleCall getOperatorString_FunctionalOperatorParserRuleCall_3_0() { return cOperatorString_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class ToUpperCase_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.toUpperCase_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cToUpperCase_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cToUpperCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorString_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//toUpperCase_FunctionalOperator:
		//	{toUpperCase_FunctionalOperator} '.toUpperCase' '()' operator=String_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{toUpperCase_FunctionalOperator} '.toUpperCase' '()' operator=String_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{toUpperCase_FunctionalOperator}
		public Action getToUpperCase_FunctionalOperatorAction_0() { return cToUpperCase_FunctionalOperatorAction_0; }
		
		//'.toUpperCase'
		public Keyword getToUpperCaseKeyword_1() { return cToUpperCaseKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=String_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//String_FunctionalOperator
		public RuleCall getOperatorString_FunctionalOperatorParserRuleCall_3_0() { return cOperatorString_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class Trim_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.trim_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTrim_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTrimKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorString_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//trim_FunctionalOperator:
		//	{trim_FunctionalOperator} '.trim' '()' operator=String_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{trim_FunctionalOperator} '.trim' '()' operator=String_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{trim_FunctionalOperator}
		public Action getTrim_FunctionalOperatorAction_0() { return cTrim_FunctionalOperatorAction_0; }
		
		//'.trim'
		public Keyword getTrimKeyword_1() { return cTrimKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=String_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//String_FunctionalOperator
		public RuleCall getOperatorString_FunctionalOperatorParserRuleCall_3_0() { return cOperatorString_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class CharSequence_String_length_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.CharSequence_String_length_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCharSequence_String_length_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLengthKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//CharSequence_String_length_FunctionalOperator:
		//	{CharSequence_String_length_FunctionalOperator} '.length' '()' operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{CharSequence_String_length_FunctionalOperator} '.length' '()' operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{CharSequence_String_length_FunctionalOperator}
		public Action getCharSequence_String_length_FunctionalOperatorAction_0() { return cCharSequence_String_length_FunctionalOperatorAction_0; }
		
		//'.length'
		public Keyword getLengthKeyword_1() { return cLengthKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_3_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class CharSequence_String_Object_CharSequence_equals_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.CharSequence_String_Object_CharSequence_equals_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCharSequence_String_Object_CharSequence_equals_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEqualsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cObjAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjObject_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cObjAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//CharSequence_String_Object_CharSequence_equals_FunctionalOperator:
		//	{CharSequence_String_Object_CharSequence_equals_FunctionalOperator} '.equals' negated?='!'? '('
		//	obj=Object_FunctionalParameter ')' operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{CharSequence_String_Object_CharSequence_equals_FunctionalOperator} '.equals' negated?='!'? '('
		//obj=Object_FunctionalParameter ')' operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{CharSequence_String_Object_CharSequence_equals_FunctionalOperator}
		public Action getCharSequence_String_Object_CharSequence_equals_FunctionalOperatorAction_0() { return cCharSequence_String_Object_CharSequence_equals_FunctionalOperatorAction_0; }
		
		//'.equals'
		public Keyword getEqualsKeyword_1() { return cEqualsKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//obj=Object_FunctionalParameter
		public Assignment getObjAssignment_4() { return cObjAssignment_4; }
		
		//Object_FunctionalParameter
		public RuleCall getObjObject_FunctionalParameterParserRuleCall_4_0() { return cObjObject_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class CharSequence_String_Object_CharSequence_toString_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.CharSequence_String_Object_CharSequence_toString_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCharSequence_String_Object_CharSequence_toString_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cToStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorString_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//CharSequence_String_Object_CharSequence_toString_FunctionalOperator:
		//	{CharSequence_String_Object_CharSequence_toString_FunctionalOperator} '.toString' '()'
		//	operator=String_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{CharSequence_String_Object_CharSequence_toString_FunctionalOperator} '.toString' '()'
		//operator=String_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{CharSequence_String_Object_CharSequence_toString_FunctionalOperator}
		public Action getCharSequence_String_Object_CharSequence_toString_FunctionalOperatorAction_0() { return cCharSequence_String_Object_CharSequence_toString_FunctionalOperatorAction_0; }
		
		//'.toString'
		public Keyword getToStringKeyword_1() { return cToStringKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=String_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//String_FunctionalOperator
		public RuleCall getOperatorString_FunctionalOperatorParserRuleCall_3_0() { return cOperatorString_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class CharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHashCodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator:
		//	{CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator} '.hashCode' '()'
		//	operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator} '.hashCode' '()'
		//operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator}
		public Action getCharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorAction_0() { return cCharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorAction_0; }
		
		//'.hashCode'
		public Keyword getHashCodeKeyword_1() { return cHashCodeKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_3_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class ParseBoolean_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.parseBoolean_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParseBoolean_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParseBooleanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSString_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cSAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//parseBoolean_FunctionalOperator:
		//	{parseBoolean_FunctionalOperator} '.parseBoolean' negated?='!'? '(' s=String_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{parseBoolean_FunctionalOperator} '.parseBoolean' negated?='!'? '(' s=String_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{parseBoolean_FunctionalOperator}
		public Action getParseBoolean_FunctionalOperatorAction_0() { return cParseBoolean_FunctionalOperatorAction_0; }
		
		//'.parseBoolean'
		public Keyword getParseBooleanKeyword_1() { return cParseBooleanKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//s=String_FunctionalParameter
		public Assignment getSAssignment_4() { return cSAssignment_4; }
		
		//String_FunctionalParameter
		public RuleCall getSString_FunctionalParameterParserRuleCall_4_0() { return cSString_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class CompareToBoolean_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.compareToBoolean_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompareToBoolean_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCompareToBooleanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBBoolean_FunctionalParameterParserRuleCall_3_0 = (RuleCall)cBAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperatorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_5_0 = (RuleCall)cOperatorAssignment_5.eContents().get(0);
		
		//compareToBoolean_FunctionalOperator:
		//	{compareToBoolean_FunctionalOperator} '.compareToBoolean' '(' b=Boolean_FunctionalParameter ')'
		//	operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{compareToBoolean_FunctionalOperator} '.compareToBoolean' '(' b=Boolean_FunctionalParameter ')'
		//operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{compareToBoolean_FunctionalOperator}
		public Action getCompareToBoolean_FunctionalOperatorAction_0() { return cCompareToBoolean_FunctionalOperatorAction_0; }
		
		//'.compareToBoolean'
		public Keyword getCompareToBooleanKeyword_1() { return cCompareToBooleanKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//b=Boolean_FunctionalParameter
		public Assignment getBAssignment_3() { return cBAssignment_3; }
		
		//Boolean_FunctionalParameter
		public RuleCall getBBoolean_FunctionalParameterParserRuleCall_3_0() { return cBBoolean_FunctionalParameterParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_5() { return cOperatorAssignment_5; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_5_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_5_0; }
	}
	public class Object_Boolean_equals_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Object_Boolean_equals_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObject_Boolean_equals_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEqualsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cObjAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjObject_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cObjAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//Object_Boolean_equals_FunctionalOperator:
		//	{Object_Boolean_equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Object_Boolean_equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Object_Boolean_equals_FunctionalOperator}
		public Action getObject_Boolean_equals_FunctionalOperatorAction_0() { return cObject_Boolean_equals_FunctionalOperatorAction_0; }
		
		//'.equals'
		public Keyword getEqualsKeyword_1() { return cEqualsKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//obj=Object_FunctionalParameter
		public Assignment getObjAssignment_4() { return cObjAssignment_4; }
		
		//Object_FunctionalParameter
		public RuleCall getObjObject_FunctionalParameterParserRuleCall_4_0() { return cObjObject_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class Object_Boolean_toString_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Object_Boolean_toString_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObject_Boolean_toString_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cToStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorString_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//Object_Boolean_toString_FunctionalOperator:
		//	{Object_Boolean_toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Object_Boolean_toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Object_Boolean_toString_FunctionalOperator}
		public Action getObject_Boolean_toString_FunctionalOperatorAction_0() { return cObject_Boolean_toString_FunctionalOperatorAction_0; }
		
		//'.toString'
		public Keyword getToStringKeyword_1() { return cToStringKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=String_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//String_FunctionalOperator
		public RuleCall getOperatorString_FunctionalOperatorParserRuleCall_3_0() { return cOperatorString_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class Object_Boolean_hashCode_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Object_Boolean_hashCode_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObject_Boolean_hashCode_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHashCodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//Object_Boolean_hashCode_FunctionalOperator:
		//	{Object_Boolean_hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Object_Boolean_hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Object_Boolean_hashCode_FunctionalOperator}
		public Action getObject_Boolean_hashCode_FunctionalOperatorAction_0() { return cObject_Boolean_hashCode_FunctionalOperatorAction_0; }
		
		//'.hashCode'
		public Keyword getHashCodeKeyword_1() { return cHashCodeKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_3_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class Number_Double_greaterThan_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_Double_greaterThan_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumber_Double_greaterThan_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGreaterThanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cINumber_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cIAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//Number_Double_greaterThan_FunctionalOperator:
		//	{Number_Double_greaterThan_FunctionalOperator} '.greaterThan' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number_Double_greaterThan_FunctionalOperator} '.greaterThan' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Number_Double_greaterThan_FunctionalOperator}
		public Action getNumber_Double_greaterThan_FunctionalOperatorAction_0() { return cNumber_Double_greaterThan_FunctionalOperatorAction_0; }
		
		//'.greaterThan'
		public Keyword getGreaterThanKeyword_1() { return cGreaterThanKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//i=Number_FunctionalParameter
		public Assignment getIAssignment_4() { return cIAssignment_4; }
		
		//Number_FunctionalParameter
		public RuleCall getINumber_FunctionalParameterParserRuleCall_4_0() { return cINumber_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class Number_Double_greaterEquals_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_Double_greaterEquals_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumber_Double_greaterEquals_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGreaterEqualsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cINumber_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cIAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//Number_Double_greaterEquals_FunctionalOperator:
		//	{Number_Double_greaterEquals_FunctionalOperator} '.greaterEquals' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number_Double_greaterEquals_FunctionalOperator} '.greaterEquals' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Number_Double_greaterEquals_FunctionalOperator}
		public Action getNumber_Double_greaterEquals_FunctionalOperatorAction_0() { return cNumber_Double_greaterEquals_FunctionalOperatorAction_0; }
		
		//'.greaterEquals'
		public Keyword getGreaterEqualsKeyword_1() { return cGreaterEqualsKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//i=Number_FunctionalParameter
		public Assignment getIAssignment_4() { return cIAssignment_4; }
		
		//Number_FunctionalParameter
		public RuleCall getINumber_FunctionalParameterParserRuleCall_4_0() { return cINumber_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class Number_Double_smallerThan_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_Double_smallerThan_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumber_Double_smallerThan_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSmallerThanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cINumber_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cIAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//Number_Double_smallerThan_FunctionalOperator:
		//	{Number_Double_smallerThan_FunctionalOperator} '.smallerThan' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number_Double_smallerThan_FunctionalOperator} '.smallerThan' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Number_Double_smallerThan_FunctionalOperator}
		public Action getNumber_Double_smallerThan_FunctionalOperatorAction_0() { return cNumber_Double_smallerThan_FunctionalOperatorAction_0; }
		
		//'.smallerThan'
		public Keyword getSmallerThanKeyword_1() { return cSmallerThanKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//i=Number_FunctionalParameter
		public Assignment getIAssignment_4() { return cIAssignment_4; }
		
		//Number_FunctionalParameter
		public RuleCall getINumber_FunctionalParameterParserRuleCall_4_0() { return cINumber_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class Number_Double_smallerEquals_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_Double_smallerEquals_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumber_Double_smallerEquals_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSmallerEqualsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cINumber_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cIAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//Number_Double_smallerEquals_FunctionalOperator:
		//	{Number_Double_smallerEquals_FunctionalOperator} '.smallerEquals' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//	operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number_Double_smallerEquals_FunctionalOperator} '.smallerEquals' negated?='!'? '(' i=Number_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Number_Double_smallerEquals_FunctionalOperator}
		public Action getNumber_Double_smallerEquals_FunctionalOperatorAction_0() { return cNumber_Double_smallerEquals_FunctionalOperatorAction_0; }
		
		//'.smallerEquals'
		public Keyword getSmallerEqualsKeyword_1() { return cSmallerEqualsKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//i=Number_FunctionalParameter
		public Assignment getIAssignment_4() { return cIAssignment_4; }
		
		//Number_FunctionalParameter
		public RuleCall getINumber_FunctionalParameterParserRuleCall_4_0() { return cINumber_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class Number_Double_Object_Number_equals_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_Double_Object_Number_equals_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumber_Double_Object_Number_equals_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEqualsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNegatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegatedExclamationMarkKeyword_2_0 = (Keyword)cNegatedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cObjAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjObject_FunctionalParameterParserRuleCall_4_0 = (RuleCall)cObjAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		
		//Number_Double_Object_Number_equals_FunctionalOperator:
		//	{Number_Double_Object_Number_equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter
		//	')' operator=Boolean_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number_Double_Object_Number_equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter ')'
		//operator=Boolean_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Number_Double_Object_Number_equals_FunctionalOperator}
		public Action getNumber_Double_Object_Number_equals_FunctionalOperatorAction_0() { return cNumber_Double_Object_Number_equals_FunctionalOperatorAction_0; }
		
		//'.equals'
		public Keyword getEqualsKeyword_1() { return cEqualsKeyword_1; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2() { return cNegatedAssignment_2; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0() { return cNegatedExclamationMarkKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//obj=Object_FunctionalParameter
		public Assignment getObjAssignment_4() { return cObjAssignment_4; }
		
		//Object_FunctionalParameter
		public RuleCall getObjObject_FunctionalParameterParserRuleCall_4_0() { return cObjObject_FunctionalParameterParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//operator=Boolean_FunctionalOperator?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//Boolean_FunctionalOperator
		public RuleCall getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0() { return cOperatorBoolean_FunctionalOperatorParserRuleCall_6_0; }
	}
	public class Number_Double_Object_Number_toString_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_Double_Object_Number_toString_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumber_Double_Object_Number_toString_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cToStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorString_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//Number_Double_Object_Number_toString_FunctionalOperator:
		//	{Number_Double_Object_Number_toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number_Double_Object_Number_toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Number_Double_Object_Number_toString_FunctionalOperator}
		public Action getNumber_Double_Object_Number_toString_FunctionalOperatorAction_0() { return cNumber_Double_Object_Number_toString_FunctionalOperatorAction_0; }
		
		//'.toString'
		public Keyword getToStringKeyword_1() { return cToStringKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=String_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//String_FunctionalOperator
		public RuleCall getOperatorString_FunctionalOperatorParserRuleCall_3_0() { return cOperatorString_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class Number_Double_Object_Number_hashCode_FunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Number_Double_Object_Number_hashCode_FunctionalOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumber_Double_Object_Number_hashCode_FunctionalOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHashCodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		
		//Number_Double_Object_Number_hashCode_FunctionalOperator:
		//	{Number_Double_Object_Number_hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number_Double_Object_Number_hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Number_Double_Object_Number_hashCode_FunctionalOperator}
		public Action getNumber_Double_Object_Number_hashCode_FunctionalOperatorAction_0() { return cNumber_Double_Object_Number_hashCode_FunctionalOperatorAction_0; }
		
		//'.hashCode'
		public Keyword getHashCodeKeyword_1() { return cHashCodeKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_3_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_3_0; }
	}
	public class EvaluationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.EvaluationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEvaluationBitOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEvaluationFunctionalOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EvaluationOperator:
		//	EvaluationBitOperator | EvaluationFunctionalOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//EvaluationBitOperator | EvaluationFunctionalOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EvaluationBitOperator
		public RuleCall getEvaluationBitOperatorParserRuleCall_0() { return cEvaluationBitOperatorParserRuleCall_0; }
		
		//EvaluationFunctionalOperator
		public RuleCall getEvaluationFunctionalOperatorParserRuleCall_1() { return cEvaluationFunctionalOperatorParserRuleCall_1; }
	}
	public class EvaluationBitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.EvaluationBitOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnd_EvaluationBitOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOr_EvaluationBitOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EvaluationBitOperator:
		//	And_EvaluationBitOperator | Or_EvaluationBitOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//And_EvaluationBitOperator | Or_EvaluationBitOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//And_EvaluationBitOperator
		public RuleCall getAnd_EvaluationBitOperatorParserRuleCall_0() { return cAnd_EvaluationBitOperatorParserRuleCall_0; }
		
		//Or_EvaluationBitOperator
		public RuleCall getOr_EvaluationBitOperatorParserRuleCall_1() { return cOr_EvaluationBitOperatorParserRuleCall_1; }
	}
	public class And_EvaluationBitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.And_EvaluationBitOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNegatedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNegatedExclamationMarkKeyword_1_0 = (Keyword)cNegatedAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConnectsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConnectsEvaluationOperatorParserRuleCall_3_0 = (RuleCall)cConnectsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConnectsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConnectsEvaluationOperatorParserRuleCall_4_1_0 = (RuleCall)cConnectsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//And_EvaluationBitOperator:
		//	'And' negated?='!'? '(' connects+=EvaluationOperator (',' connects+=EvaluationOperator)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'And' negated?='!'? '(' connects+=EvaluationOperator (',' connects+=EvaluationOperator)+ ')'
		public Group getGroup() { return cGroup; }
		
		//'And'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_1() { return cNegatedAssignment_1; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_1_0() { return cNegatedExclamationMarkKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//connects+=EvaluationOperator
		public Assignment getConnectsAssignment_3() { return cConnectsAssignment_3; }
		
		//EvaluationOperator
		public RuleCall getConnectsEvaluationOperatorParserRuleCall_3_0() { return cConnectsEvaluationOperatorParserRuleCall_3_0; }
		
		//(',' connects+=EvaluationOperator)+
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//connects+=EvaluationOperator
		public Assignment getConnectsAssignment_4_1() { return cConnectsAssignment_4_1; }
		
		//EvaluationOperator
		public RuleCall getConnectsEvaluationOperatorParserRuleCall_4_1_0() { return cConnectsEvaluationOperatorParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class Or_EvaluationBitOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Or_EvaluationBitOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNegatedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNegatedExclamationMarkKeyword_1_0 = (Keyword)cNegatedAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConnectsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConnectsEvaluationOperatorParserRuleCall_3_0 = (RuleCall)cConnectsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConnectsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConnectsEvaluationOperatorParserRuleCall_4_1_0 = (RuleCall)cConnectsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Or_EvaluationBitOperator:
		//	'Or' negated?='!'? '(' connects+=EvaluationOperator (',' connects+=EvaluationOperator)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Or' negated?='!'? '(' connects+=EvaluationOperator (',' connects+=EvaluationOperator)+ ')'
		public Group getGroup() { return cGroup; }
		
		//'Or'
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_1() { return cNegatedAssignment_1; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_1_0() { return cNegatedExclamationMarkKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//connects+=EvaluationOperator
		public Assignment getConnectsAssignment_3() { return cConnectsAssignment_3; }
		
		//EvaluationOperator
		public RuleCall getConnectsEvaluationOperatorParserRuleCall_3_0() { return cConnectsEvaluationOperatorParserRuleCall_3_0; }
		
		//(',' connects+=EvaluationOperator)+
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//connects+=EvaluationOperator
		public Assignment getConnectsAssignment_4_1() { return cConnectsAssignment_4_1; }
		
		//EvaluationOperator
		public RuleCall getConnectsEvaluationOperatorParserRuleCall_4_1_0() { return cConnectsEvaluationOperatorParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class EvaluationFunctionalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.EvaluationFunctionalOperator");
		private final RuleCall cAggregationOperatorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EvaluationFunctionalOperator:
		//	AggregationOperator /*| ClassOperator */;
		@Override public ParserRule getRule() { return rule; }
		
		//AggregationOperator
		public RuleCall getAggregationOperatorParserRuleCall() { return cAggregationOperatorParserRuleCall; }
	}
	public class AggregationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.AggregationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCalculatingAggregationOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCountingAggregationOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AggregationOperator:
		//	CalculatingAggregationOperator | CountingAggregationOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//CalculatingAggregationOperator | CountingAggregationOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CalculatingAggregationOperator
		public RuleCall getCalculatingAggregationOperatorParserRuleCall_0() { return cCalculatingAggregationOperatorParserRuleCall_0; }
		
		//CountingAggregationOperator
		public RuleCall getCountingAggregationOperatorParserRuleCall_1() { return cCountingAggregationOperatorParserRuleCall_1; }
	}
	public class CountingAggregationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.CountingAggregationOperator");
		private final RuleCall cCount_AggregationOperatorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CountingAggregationOperator:
		//	Count_AggregationOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//Count_AggregationOperator
		public RuleCall getCount_AggregationOperatorParserRuleCall() { return cCount_AggregationOperatorParserRuleCall; }
	}
	public class CalculatingAggregationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.CalculatingAggregationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSum_AggregationOperator_IntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMin_AggregationOperator_IntegerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMax_AggregationOperator_IntegerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSum_AggregationOperator_DoubleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMin_AggregationOperator_DoubleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMax_AggregationOperator_DoubleParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//CalculatingAggregationOperator:
		//	Sum_AggregationOperator_Integer | Min_AggregationOperator_Integer | Max_AggregationOperator_Integer |
		//	Sum_AggregationOperator_Double | Min_AggregationOperator_Double | Max_AggregationOperator_Double;
		@Override public ParserRule getRule() { return rule; }
		
		//Sum_AggregationOperator_Integer | Min_AggregationOperator_Integer | Max_AggregationOperator_Integer |
		//Sum_AggregationOperator_Double | Min_AggregationOperator_Double | Max_AggregationOperator_Double
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sum_AggregationOperator_Integer
		public RuleCall getSum_AggregationOperator_IntegerParserRuleCall_0() { return cSum_AggregationOperator_IntegerParserRuleCall_0; }
		
		//Min_AggregationOperator_Integer
		public RuleCall getMin_AggregationOperator_IntegerParserRuleCall_1() { return cMin_AggregationOperator_IntegerParserRuleCall_1; }
		
		//Max_AggregationOperator_Integer
		public RuleCall getMax_AggregationOperator_IntegerParserRuleCall_2() { return cMax_AggregationOperator_IntegerParserRuleCall_2; }
		
		//Sum_AggregationOperator_Double
		public RuleCall getSum_AggregationOperator_DoubleParserRuleCall_3() { return cSum_AggregationOperator_DoubleParserRuleCall_3; }
		
		//Min_AggregationOperator_Double
		public RuleCall getMin_AggregationOperator_DoubleParserRuleCall_4() { return cMin_AggregationOperator_DoubleParserRuleCall_4; }
		
		//Max_AggregationOperator_Double
		public RuleCall getMax_AggregationOperator_DoubleParserRuleCall_5() { return cMax_AggregationOperator_DoubleParserRuleCall_5; }
	}
	public class Count_AggregationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Count_AggregationOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCount_AggregationOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCountKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCountableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCountableCountableReferenceParameterParserRuleCall_2_0 = (RuleCall)cCountableAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_4_0 = (RuleCall)cOperatorAssignment_4.eContents().get(0);
		
		//Count_AggregationOperator:
		//	{Count_AggregationOperator} 'count(' countable=CountableReferenceParameter ')' operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Count_AggregationOperator} 'count(' countable=CountableReferenceParameter ')' operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Count_AggregationOperator}
		public Action getCount_AggregationOperatorAction_0() { return cCount_AggregationOperatorAction_0; }
		
		//'count('
		public Keyword getCountKeyword_1() { return cCountKeyword_1; }
		
		//countable=CountableReferenceParameter
		public Assignment getCountableAssignment_2() { return cCountableAssignment_2; }
		
		//CountableReferenceParameter
		public RuleCall getCountableCountableReferenceParameterParserRuleCall_2_0() { return cCountableCountableReferenceParameterParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_4() { return cOperatorAssignment_4; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_4_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_4_0; }
	}
	public class Sum_AggregationOperator_IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Sum_AggregationOperator_Integer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSum_AggregationOperator_IntegerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSum_IntegerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCalculateableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCalculateableInteger_CalculateableParameterParserRuleCall_2_0 = (RuleCall)cCalculateableAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_4_0 = (RuleCall)cOperatorAssignment_4.eContents().get(0);
		
		//Sum_AggregationOperator_Integer:
		//	{Sum_AggregationOperator_Integer} 'sum_Integer(' calculateable=Integer_CalculateableParameter ')'
		//	operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sum_AggregationOperator_Integer} 'sum_Integer(' calculateable=Integer_CalculateableParameter ')'
		//operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Sum_AggregationOperator_Integer}
		public Action getSum_AggregationOperator_IntegerAction_0() { return cSum_AggregationOperator_IntegerAction_0; }
		
		//'sum_Integer('
		public Keyword getSum_IntegerKeyword_1() { return cSum_IntegerKeyword_1; }
		
		//calculateable=Integer_CalculateableParameter
		public Assignment getCalculateableAssignment_2() { return cCalculateableAssignment_2; }
		
		//Integer_CalculateableParameter
		public RuleCall getCalculateableInteger_CalculateableParameterParserRuleCall_2_0() { return cCalculateableInteger_CalculateableParameterParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_4() { return cOperatorAssignment_4; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_4_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_4_0; }
	}
	public class Min_AggregationOperator_IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Min_AggregationOperator_Integer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMin_AggregationOperator_IntegerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMin_IntegerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCalculateableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCalculateableInteger_CalculateableParameterParserRuleCall_2_0 = (RuleCall)cCalculateableAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_4_0 = (RuleCall)cOperatorAssignment_4.eContents().get(0);
		
		//Min_AggregationOperator_Integer:
		//	{Min_AggregationOperator_Integer} 'min_Integer(' calculateable=Integer_CalculateableParameter ')'
		//	operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Min_AggregationOperator_Integer} 'min_Integer(' calculateable=Integer_CalculateableParameter ')'
		//operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Min_AggregationOperator_Integer}
		public Action getMin_AggregationOperator_IntegerAction_0() { return cMin_AggregationOperator_IntegerAction_0; }
		
		//'min_Integer('
		public Keyword getMin_IntegerKeyword_1() { return cMin_IntegerKeyword_1; }
		
		//calculateable=Integer_CalculateableParameter
		public Assignment getCalculateableAssignment_2() { return cCalculateableAssignment_2; }
		
		//Integer_CalculateableParameter
		public RuleCall getCalculateableInteger_CalculateableParameterParserRuleCall_2_0() { return cCalculateableInteger_CalculateableParameterParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_4() { return cOperatorAssignment_4; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_4_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_4_0; }
	}
	public class Max_AggregationOperator_IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Max_AggregationOperator_Integer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMax_AggregationOperator_IntegerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMax_IntegerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCalculateableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCalculateableInteger_CalculateableParameterParserRuleCall_2_0 = (RuleCall)cCalculateableAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_4_0 = (RuleCall)cOperatorAssignment_4.eContents().get(0);
		
		//Max_AggregationOperator_Integer:
		//	{Max_AggregationOperator_Integer} 'max_Integer(' calculateable=Integer_CalculateableParameter ')'
		//	operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Max_AggregationOperator_Integer} 'max_Integer(' calculateable=Integer_CalculateableParameter ')'
		//operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Max_AggregationOperator_Integer}
		public Action getMax_AggregationOperator_IntegerAction_0() { return cMax_AggregationOperator_IntegerAction_0; }
		
		//'max_Integer('
		public Keyword getMax_IntegerKeyword_1() { return cMax_IntegerKeyword_1; }
		
		//calculateable=Integer_CalculateableParameter
		public Assignment getCalculateableAssignment_2() { return cCalculateableAssignment_2; }
		
		//Integer_CalculateableParameter
		public RuleCall getCalculateableInteger_CalculateableParameterParserRuleCall_2_0() { return cCalculateableInteger_CalculateableParameterParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_4() { return cOperatorAssignment_4; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_4_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_4_0; }
	}
	public class IntegerParseInt_ClassOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.IntegerParseInt_ClassOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerParseInt_ClassOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntegerParseIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCalculateableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCalculateableString_FunctionalParameterParserRuleCall_2_0 = (RuleCall)cCalculateableAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperatorInteger_FunctionalOperatorParserRuleCall_4_0 = (RuleCall)cOperatorAssignment_4.eContents().get(0);
		
		//IntegerParseInt_ClassOperator:
		//	{IntegerParseInt_ClassOperator} 'Integer.parseInt(' calculateable=String_FunctionalParameter ')'
		//	operator=Integer_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerParseInt_ClassOperator} 'Integer.parseInt(' calculateable=String_FunctionalParameter ')'
		//operator=Integer_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{IntegerParseInt_ClassOperator}
		public Action getIntegerParseInt_ClassOperatorAction_0() { return cIntegerParseInt_ClassOperatorAction_0; }
		
		//'Integer.parseInt('
		public Keyword getIntegerParseIntKeyword_1() { return cIntegerParseIntKeyword_1; }
		
		//calculateable=String_FunctionalParameter
		public Assignment getCalculateableAssignment_2() { return cCalculateableAssignment_2; }
		
		//String_FunctionalParameter
		public RuleCall getCalculateableString_FunctionalParameterParserRuleCall_2_0() { return cCalculateableString_FunctionalParameterParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//operator=Integer_FunctionalOperator?
		public Assignment getOperatorAssignment_4() { return cOperatorAssignment_4; }
		
		//Integer_FunctionalOperator
		public RuleCall getOperatorInteger_FunctionalOperatorParserRuleCall_4_0() { return cOperatorInteger_FunctionalOperatorParserRuleCall_4_0; }
	}
	public class Sum_AggregationOperator_DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Sum_AggregationOperator_Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSum_AggregationOperator_DoubleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSum_DoubleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCalculateableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCalculateableDouble_CalculateableParameterParserRuleCall_2_0 = (RuleCall)cCalculateableAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperatorDouble_FunctionalOperatorParserRuleCall_4_0 = (RuleCall)cOperatorAssignment_4.eContents().get(0);
		
		//Sum_AggregationOperator_Double:
		//	{Sum_AggregationOperator_Double} 'sum_Double(' calculateable=Double_CalculateableParameter ')'
		//	operator=Double_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sum_AggregationOperator_Double} 'sum_Double(' calculateable=Double_CalculateableParameter ')'
		//operator=Double_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Sum_AggregationOperator_Double}
		public Action getSum_AggregationOperator_DoubleAction_0() { return cSum_AggregationOperator_DoubleAction_0; }
		
		//'sum_Double('
		public Keyword getSum_DoubleKeyword_1() { return cSum_DoubleKeyword_1; }
		
		//calculateable=Double_CalculateableParameter
		public Assignment getCalculateableAssignment_2() { return cCalculateableAssignment_2; }
		
		//Double_CalculateableParameter
		public RuleCall getCalculateableDouble_CalculateableParameterParserRuleCall_2_0() { return cCalculateableDouble_CalculateableParameterParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//operator=Double_FunctionalOperator?
		public Assignment getOperatorAssignment_4() { return cOperatorAssignment_4; }
		
		//Double_FunctionalOperator
		public RuleCall getOperatorDouble_FunctionalOperatorParserRuleCall_4_0() { return cOperatorDouble_FunctionalOperatorParserRuleCall_4_0; }
	}
	public class Min_AggregationOperator_DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Min_AggregationOperator_Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMin_AggregationOperator_DoubleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMin_DoubleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCalculateableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCalculateableDouble_CalculateableParameterParserRuleCall_2_0 = (RuleCall)cCalculateableAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperatorDouble_FunctionalOperatorParserRuleCall_4_0 = (RuleCall)cOperatorAssignment_4.eContents().get(0);
		
		//Min_AggregationOperator_Double:
		//	{Min_AggregationOperator_Double} 'min_Double(' calculateable=Double_CalculateableParameter ')'
		//	operator=Double_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Min_AggregationOperator_Double} 'min_Double(' calculateable=Double_CalculateableParameter ')'
		//operator=Double_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Min_AggregationOperator_Double}
		public Action getMin_AggregationOperator_DoubleAction_0() { return cMin_AggregationOperator_DoubleAction_0; }
		
		//'min_Double('
		public Keyword getMin_DoubleKeyword_1() { return cMin_DoubleKeyword_1; }
		
		//calculateable=Double_CalculateableParameter
		public Assignment getCalculateableAssignment_2() { return cCalculateableAssignment_2; }
		
		//Double_CalculateableParameter
		public RuleCall getCalculateableDouble_CalculateableParameterParserRuleCall_2_0() { return cCalculateableDouble_CalculateableParameterParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//operator=Double_FunctionalOperator?
		public Assignment getOperatorAssignment_4() { return cOperatorAssignment_4; }
		
		//Double_FunctionalOperator
		public RuleCall getOperatorDouble_FunctionalOperatorParserRuleCall_4_0() { return cOperatorDouble_FunctionalOperatorParserRuleCall_4_0; }
	}
	public class Max_AggregationOperator_DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.Max_AggregationOperator_Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMax_AggregationOperator_DoubleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMax_DoubleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCalculateableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCalculateableDouble_CalculateableParameterParserRuleCall_2_0 = (RuleCall)cCalculateableAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperatorDouble_FunctionalOperatorParserRuleCall_4_0 = (RuleCall)cOperatorAssignment_4.eContents().get(0);
		
		//Max_AggregationOperator_Double:
		//	{Max_AggregationOperator_Double} 'max_Double(' calculateable=Double_CalculateableParameter ')'
		//	operator=Double_FunctionalOperator?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Max_AggregationOperator_Double} 'max_Double(' calculateable=Double_CalculateableParameter ')'
		//operator=Double_FunctionalOperator?
		public Group getGroup() { return cGroup; }
		
		//{Max_AggregationOperator_Double}
		public Action getMax_AggregationOperator_DoubleAction_0() { return cMax_AggregationOperator_DoubleAction_0; }
		
		//'max_Double('
		public Keyword getMax_DoubleKeyword_1() { return cMax_DoubleKeyword_1; }
		
		//calculateable=Double_CalculateableParameter
		public Assignment getCalculateableAssignment_2() { return cCalculateableAssignment_2; }
		
		//Double_CalculateableParameter
		public RuleCall getCalculateableDouble_CalculateableParameterParserRuleCall_2_0() { return cCalculateableDouble_CalculateableParameterParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//operator=Double_FunctionalOperator?
		public Assignment getOperatorAssignment_4() { return cOperatorAssignment_4; }
		
		//Double_FunctionalOperator
		public RuleCall getOperatorDouble_FunctionalOperatorParserRuleCall_4_0() { return cOperatorDouble_FunctionalOperatorParserRuleCall_4_0; }
	}
	
	public class CourseTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MQL.CourseType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVOEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVOVOKeyword_0_0 = (Keyword)cVOEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUEUEKeyword_1_0 = (Keyword)cUEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSEMEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSEMSEMKeyword_2_0 = (Keyword)cSEMEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPRPRKeyword_3_0 = (Keyword)cPREnumLiteralDeclaration_3.eContents().get(0);
		
		//enum CourseType:
		//	VO | UE | SEM | PR;
		public EnumRule getRule() { return rule; }
		
		//VO | UE | SEM | PR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VO
		public EnumLiteralDeclaration getVOEnumLiteralDeclaration_0() { return cVOEnumLiteralDeclaration_0; }
		
		//'VO'
		public Keyword getVOVOKeyword_0_0() { return cVOVOKeyword_0_0; }
		
		//UE
		public EnumLiteralDeclaration getUEEnumLiteralDeclaration_1() { return cUEEnumLiteralDeclaration_1; }
		
		//'UE'
		public Keyword getUEUEKeyword_1_0() { return cUEUEKeyword_1_0; }
		
		//SEM
		public EnumLiteralDeclaration getSEMEnumLiteralDeclaration_2() { return cSEMEnumLiteralDeclaration_2; }
		
		//'SEM'
		public Keyword getSEMSEMKeyword_2_0() { return cSEMSEMKeyword_2_0; }
		
		//PR
		public EnumLiteralDeclaration getPREnumLiteralDeclaration_3() { return cPREnumLiteralDeclaration_3; }
		
		//'PR'
		public Keyword getPRPRKeyword_3_0() { return cPRPRKeyword_3_0; }
	}
	
	private final FindQueryCollectionElements pFindQueryCollection;
	private final FindQueryElements pFindQuery;
	private final SelectClauseElements pSelectClause;
	private final Person_TypeElements pPerson_Type;
	private final Exam_TypeElements pExam_Type;
	private final Professor_TypeElements pProfessor_Type;
	private final UniversityManagementSystem_TypeElements pUniversityManagementSystem_Type;
	private final Course_TypeElements pCourse_Type;
	private final Student_TypeElements pStudent_Type;
	private final RootClassElements pRootClass;
	private final PersonElements pPerson;
	private final StudentElements pStudent;
	private final ProfessorElements pProfessor;
	private final CourseElements pCourse;
	private final UniversityManagementSystemElements pUniversityManagementSystem;
	private final ExamElements pExam;
	private final Professor_employeeNumber_AttrEClassElements pProfessor_employeeNumber_AttrEClass;
	private final Student_matriculationNumber_AttrEClassElements pStudent_matriculationNumber_AttrEClass;
	private final Person_name_AttrEClassElements pPerson_name_AttrEClass;
	private final Course_courseType_AttrEClassElements pCourse_courseType_AttrEClass;
	private final Course_courseNumber_AttrEClassElements pCourse_courseNumber_AttrEClass;
	private final Person_email_AttrEClassElements pPerson_email_AttrEClass;
	private final Course_name_AttrEClassElements pCourse_name_AttrEClass;
	private final Exam_examID_AttrEClassElements pExam_examID_AttrEClass;
	private final Student_attends_OrGroupElements pStudent_attends_OrGroup;
	private final Professor_lectures_OrGroupElements pProfessor_lectures_OrGroup;
	private final Course_exam_OrGroupElements pCourse_exam_OrGroup;
	private final Course_mandatoryFor_OrGroupElements pCourse_mandatoryFor_OrGroup;
	private final UniversityManagementSystem_person_OrGroupElements pUniversityManagementSystem_person_OrGroup;
	private final UniversityManagementSystem_course_OrGroupElements pUniversityManagementSystem_course_OrGroup;
	private final FunctionalArgumentElements pFunctionalArgument;
	private final Calculateable_ArgumentElements pCalculateable_Argument;
	private final PrimitiveArgumentElements pPrimitiveArgument;
	private final Integer_PrimitiveArgumentElements pInteger_PrimitiveArgument;
	private final String_PrimitiveArgumentElements pString_PrimitiveArgument;
	private final CalculateableElement_ReferenceArgumentElements pCalculateableElement_ReferenceArgument;
	private final Integer_CalculateableElementReferenceArgumentElements pInteger_CalculateableElementReferenceArgument;
	private final String_CalculateableElementReferenceArgumentElements pString_CalculateableElementReferenceArgument;
	private final EvaluationOperation_ArgumentElements pEvaluationOperation_Argument;
	private final Integer_EvaluationOperation_ArgumentElements pInteger_EvaluationOperation_Argument;
	private final Double_EvaluationOperation_ArgumentElements pDouble_EvaluationOperation_Argument;
	private final Countable_ReferenceArgumentElements pCountable_ReferenceArgument;
	private final Integer_FunctionalParameterElements pInteger_FunctionalParameter;
	private final Character_FunctionalParameterElements pCharacter_FunctionalParameter;
	private final Number_FunctionalParameterElements pNumber_FunctionalParameter;
	private final CharSequence_FunctionalParameterElements pCharSequence_FunctionalParameter;
	private final Object_FunctionalParameterElements pObject_FunctionalParameter;
	private final String_FunctionalParameterElements pString_FunctionalParameter;
	private final Boolean_FunctionalParameterElements pBoolean_FunctionalParameter;
	private final Double_FunctionalParameterElements pDouble_FunctionalParameter;
	private final CountableReferenceParameterElements pCountableReferenceParameter;
	private final Integer_CalculateableParameterElements pInteger_CalculateableParameter;
	private final Character_CalculateableParameterElements pCharacter_CalculateableParameter;
	private final Number_CalculateableParameterElements pNumber_CalculateableParameter;
	private final CharSequence_CalculateableParameterElements pCharSequence_CalculateableParameter;
	private final Object_CalculateableParameterElements pObject_CalculateableParameter;
	private final String_CalculateableParameterElements pString_CalculateableParameter;
	private final Boolean_CalculateableParameterElements pBoolean_CalculateableParameter;
	private final Double_CalculateableParameterElements pDouble_CalculateableParameter;
	private final CourseType_EnumerationOperatorElements pCourseType_EnumerationOperator;
	private final CourseTypeElements eCourseType;
	private final Integer_ExpressionOperatorElements pInteger_ExpressionOperator;
	private final Integer_BitOperatorElements pInteger_BitOperator;
	private final Integer_And_BitOperatorElements pInteger_And_BitOperator;
	private final Integer_Or_BitOperatorElements pInteger_Or_BitOperator;
	private final Integer_FunctionalOperator_BeginElements pInteger_FunctionalOperator_Begin;
	private final Number_ExpressionOperatorElements pNumber_ExpressionOperator;
	private final Number_BitOperatorElements pNumber_BitOperator;
	private final Number_And_BitOperatorElements pNumber_And_BitOperator;
	private final Number_Or_BitOperatorElements pNumber_Or_BitOperator;
	private final Number_FunctionalOperator_BeginElements pNumber_FunctionalOperator_Begin;
	private final Character_ExpressionOperatorElements pCharacter_ExpressionOperator;
	private final Character_BitOperatorElements pCharacter_BitOperator;
	private final Character_And_BitOperatorElements pCharacter_And_BitOperator;
	private final Character_Or_BitOperatorElements pCharacter_Or_BitOperator;
	private final Character_FunctionalOperator_BeginElements pCharacter_FunctionalOperator_Begin;
	private final CharSequence_ExpressionOperatorElements pCharSequence_ExpressionOperator;
	private final CharSequence_BitOperatorElements pCharSequence_BitOperator;
	private final CharSequence_And_BitOperatorElements pCharSequence_And_BitOperator;
	private final CharSequence_Or_BitOperatorElements pCharSequence_Or_BitOperator;
	private final CharSequence_FunctionalOperator_BeginElements pCharSequence_FunctionalOperator_Begin;
	private final Object_ExpressionOperatorElements pObject_ExpressionOperator;
	private final Object_BitOperatorElements pObject_BitOperator;
	private final Object_And_BitOperatorElements pObject_And_BitOperator;
	private final Object_Or_BitOperatorElements pObject_Or_BitOperator;
	private final Object_FunctionalOperator_BeginElements pObject_FunctionalOperator_Begin;
	private final String_ExpressionOperatorElements pString_ExpressionOperator;
	private final String_BitOperatorElements pString_BitOperator;
	private final String_And_BitOperatorElements pString_And_BitOperator;
	private final String_Or_BitOperatorElements pString_Or_BitOperator;
	private final String_FunctionalOperator_BeginElements pString_FunctionalOperator_Begin;
	private final Boolean_ExpressionOperatorElements pBoolean_ExpressionOperator;
	private final Boolean_BitOperatorElements pBoolean_BitOperator;
	private final Boolean_And_BitOperatorElements pBoolean_And_BitOperator;
	private final Boolean_Or_BitOperatorElements pBoolean_Or_BitOperator;
	private final Boolean_FunctionalOperator_BeginElements pBoolean_FunctionalOperator_Begin;
	private final Double_ExpressionOperatorElements pDouble_ExpressionOperator;
	private final Double_BitOperatorElements pDouble_BitOperator;
	private final Double_And_BitOperatorElements pDouble_And_BitOperator;
	private final Double_Or_BitOperatorElements pDouble_Or_BitOperator;
	private final Double_FunctionalOperator_BeginElements pDouble_FunctionalOperator_Begin;
	private final Integer_FunctionalOperatorElements pInteger_FunctionalOperator;
	private final Number_FunctionalOperatorElements pNumber_FunctionalOperator;
	private final Character_FunctionalOperatorElements pCharacter_FunctionalOperator;
	private final CharSequence_FunctionalOperatorElements pCharSequence_FunctionalOperator;
	private final Object_FunctionalOperatorElements pObject_FunctionalOperator;
	private final String_FunctionalOperatorElements pString_FunctionalOperator;
	private final Boolean_FunctionalOperatorElements pBoolean_FunctionalOperator;
	private final Double_FunctionalOperatorElements pDouble_FunctionalOperator;
	private final DoubleValue_FunctionalOperatorElements pDoubleValue_FunctionalOperator;
	private final Number_Integer_greaterThan_FunctionalOperatorElements pNumber_Integer_greaterThan_FunctionalOperator;
	private final Number_Integer_greaterEquals_FunctionalOperatorElements pNumber_Integer_greaterEquals_FunctionalOperator;
	private final Number_Integer_smallerThan_FunctionalOperatorElements pNumber_Integer_smallerThan_FunctionalOperator;
	private final Number_Integer_smallerEquals_FunctionalOperatorElements pNumber_Integer_smallerEquals_FunctionalOperator;
	private final Number_Integer_Object_Number_equals_FunctionalOperatorElements pNumber_Integer_Object_Number_equals_FunctionalOperator;
	private final Number_Integer_Object_Number_toString_FunctionalOperatorElements pNumber_Integer_Object_Number_toString_FunctionalOperator;
	private final Number_Integer_Object_Number_hashCode_FunctionalOperatorElements pNumber_Integer_Object_Number_hashCode_FunctionalOperator;
	private final GreaterThan_FunctionalOperatorElements pGreaterThan_FunctionalOperator;
	private final GreaterEquals_FunctionalOperatorElements pGreaterEquals_FunctionalOperator;
	private final SmallerThan_FunctionalOperatorElements pSmallerThan_FunctionalOperator;
	private final SmallerEquals_FunctionalOperatorElements pSmallerEquals_FunctionalOperator;
	private final Object_Number_equals_FunctionalOperatorElements pObject_Number_equals_FunctionalOperator;
	private final Object_Number_toString_FunctionalOperatorElements pObject_Number_toString_FunctionalOperator;
	private final Object_Number_hashCode_FunctionalOperatorElements pObject_Number_hashCode_FunctionalOperator;
	private final Object_Character_equals_FunctionalOperatorElements pObject_Character_equals_FunctionalOperator;
	private final Object_Character_toString_FunctionalOperatorElements pObject_Character_toString_FunctionalOperator;
	private final Object_Character_hashCode_FunctionalOperatorElements pObject_Character_hashCode_FunctionalOperator;
	private final Length_FunctionalOperatorElements pLength_FunctionalOperator;
	private final Object_CharSequence_equals_FunctionalOperatorElements pObject_CharSequence_equals_FunctionalOperator;
	private final Object_CharSequence_toString_FunctionalOperatorElements pObject_CharSequence_toString_FunctionalOperator;
	private final Object_CharSequence_hashCode_FunctionalOperatorElements pObject_CharSequence_hashCode_FunctionalOperator;
	private final Equals_FunctionalOperatorElements pEquals_FunctionalOperator;
	private final ToString_FunctionalOperatorElements pToString_FunctionalOperator;
	private final HashCode_FunctionalOperatorElements pHashCode_FunctionalOperator;
	private final CharAt_FunctionalOperatorElements pCharAt_FunctionalOperator;
	private final CodePointAt_FunctionalOperatorElements pCodePointAt_FunctionalOperator;
	private final CodePointBefore_FunctionalOperatorElements pCodePointBefore_FunctionalOperator;
	private final CompareToString_FunctionalOperatorElements pCompareToString_FunctionalOperator;
	private final CompareToStringIgnoreCase_FunctionalOperatorElements pCompareToStringIgnoreCase_FunctionalOperator;
	private final Contains_FunctionalOperatorElements pContains_FunctionalOperator;
	private final Substring_FunctionalOperatorElements pSubstring_FunctionalOperator;
	private final Concat_FunctionalOperatorElements pConcat_FunctionalOperator;
	private final EndsWith_FunctionalOperatorElements pEndsWith_FunctionalOperator;
	private final EqualsIgnoreCase_FunctionalOperatorElements pEqualsIgnoreCase_FunctionalOperator;
	private final IndexOfString_FunctionalOperatorElements pIndexOfString_FunctionalOperator;
	private final IndexOfChar_FunctionalOperatorElements pIndexOfChar_FunctionalOperator;
	private final IndexOfCharFromIndex_FunctionalOperatorElements pIndexOfCharFromIndex_FunctionalOperator;
	private final IsEmpty_FunctionalOperatorElements pIsEmpty_FunctionalOperator;
	private final OffsetByCodePoints_FunctionalOperatorElements pOffsetByCodePoints_FunctionalOperator;
	private final StartsWith_FunctionalOperatorElements pStartsWith_FunctionalOperator;
	private final StartsWithOffset_FunctionalOperatorElements pStartsWithOffset_FunctionalOperator;
	private final ToLowerCase_FunctionalOperatorElements pToLowerCase_FunctionalOperator;
	private final ToUpperCase_FunctionalOperatorElements pToUpperCase_FunctionalOperator;
	private final Trim_FunctionalOperatorElements pTrim_FunctionalOperator;
	private final CharSequence_String_length_FunctionalOperatorElements pCharSequence_String_length_FunctionalOperator;
	private final CharSequence_String_Object_CharSequence_equals_FunctionalOperatorElements pCharSequence_String_Object_CharSequence_equals_FunctionalOperator;
	private final CharSequence_String_Object_CharSequence_toString_FunctionalOperatorElements pCharSequence_String_Object_CharSequence_toString_FunctionalOperator;
	private final CharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorElements pCharSequence_String_Object_CharSequence_hashCode_FunctionalOperator;
	private final ParseBoolean_FunctionalOperatorElements pParseBoolean_FunctionalOperator;
	private final CompareToBoolean_FunctionalOperatorElements pCompareToBoolean_FunctionalOperator;
	private final Object_Boolean_equals_FunctionalOperatorElements pObject_Boolean_equals_FunctionalOperator;
	private final Object_Boolean_toString_FunctionalOperatorElements pObject_Boolean_toString_FunctionalOperator;
	private final Object_Boolean_hashCode_FunctionalOperatorElements pObject_Boolean_hashCode_FunctionalOperator;
	private final Number_Double_greaterThan_FunctionalOperatorElements pNumber_Double_greaterThan_FunctionalOperator;
	private final Number_Double_greaterEquals_FunctionalOperatorElements pNumber_Double_greaterEquals_FunctionalOperator;
	private final Number_Double_smallerThan_FunctionalOperatorElements pNumber_Double_smallerThan_FunctionalOperator;
	private final Number_Double_smallerEquals_FunctionalOperatorElements pNumber_Double_smallerEquals_FunctionalOperator;
	private final Number_Double_Object_Number_equals_FunctionalOperatorElements pNumber_Double_Object_Number_equals_FunctionalOperator;
	private final Number_Double_Object_Number_toString_FunctionalOperatorElements pNumber_Double_Object_Number_toString_FunctionalOperator;
	private final Number_Double_Object_Number_hashCode_FunctionalOperatorElements pNumber_Double_Object_Number_hashCode_FunctionalOperator;
	private final EvaluationOperatorElements pEvaluationOperator;
	private final EvaluationBitOperatorElements pEvaluationBitOperator;
	private final And_EvaluationBitOperatorElements pAnd_EvaluationBitOperator;
	private final Or_EvaluationBitOperatorElements pOr_EvaluationBitOperator;
	private final EvaluationFunctionalOperatorElements pEvaluationFunctionalOperator;
	private final AggregationOperatorElements pAggregationOperator;
	private final CountingAggregationOperatorElements pCountingAggregationOperator;
	private final CalculatingAggregationOperatorElements pCalculatingAggregationOperator;
	private final Count_AggregationOperatorElements pCount_AggregationOperator;
	private final Sum_AggregationOperator_IntegerElements pSum_AggregationOperator_Integer;
	private final Min_AggregationOperator_IntegerElements pMin_AggregationOperator_Integer;
	private final Max_AggregationOperator_IntegerElements pMax_AggregationOperator_Integer;
	private final IntegerParseInt_ClassOperatorElements pIntegerParseInt_ClassOperator;
	private final Sum_AggregationOperator_DoubleElements pSum_AggregationOperator_Double;
	private final Min_AggregationOperator_DoubleElements pMin_AggregationOperator_Double;
	private final Max_AggregationOperator_DoubleElements pMax_AggregationOperator_Double;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MQLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFindQueryCollection = new FindQueryCollectionElements();
		this.pFindQuery = new FindQueryElements();
		this.pSelectClause = new SelectClauseElements();
		this.pPerson_Type = new Person_TypeElements();
		this.pExam_Type = new Exam_TypeElements();
		this.pProfessor_Type = new Professor_TypeElements();
		this.pUniversityManagementSystem_Type = new UniversityManagementSystem_TypeElements();
		this.pCourse_Type = new Course_TypeElements();
		this.pStudent_Type = new Student_TypeElements();
		this.pRootClass = new RootClassElements();
		this.pPerson = new PersonElements();
		this.pStudent = new StudentElements();
		this.pProfessor = new ProfessorElements();
		this.pCourse = new CourseElements();
		this.pUniversityManagementSystem = new UniversityManagementSystemElements();
		this.pExam = new ExamElements();
		this.pProfessor_employeeNumber_AttrEClass = new Professor_employeeNumber_AttrEClassElements();
		this.pStudent_matriculationNumber_AttrEClass = new Student_matriculationNumber_AttrEClassElements();
		this.pPerson_name_AttrEClass = new Person_name_AttrEClassElements();
		this.pCourse_courseType_AttrEClass = new Course_courseType_AttrEClassElements();
		this.pCourse_courseNumber_AttrEClass = new Course_courseNumber_AttrEClassElements();
		this.pPerson_email_AttrEClass = new Person_email_AttrEClassElements();
		this.pCourse_name_AttrEClass = new Course_name_AttrEClassElements();
		this.pExam_examID_AttrEClass = new Exam_examID_AttrEClassElements();
		this.pStudent_attends_OrGroup = new Student_attends_OrGroupElements();
		this.pProfessor_lectures_OrGroup = new Professor_lectures_OrGroupElements();
		this.pCourse_exam_OrGroup = new Course_exam_OrGroupElements();
		this.pCourse_mandatoryFor_OrGroup = new Course_mandatoryFor_OrGroupElements();
		this.pUniversityManagementSystem_person_OrGroup = new UniversityManagementSystem_person_OrGroupElements();
		this.pUniversityManagementSystem_course_OrGroup = new UniversityManagementSystem_course_OrGroupElements();
		this.pFunctionalArgument = new FunctionalArgumentElements();
		this.pCalculateable_Argument = new Calculateable_ArgumentElements();
		this.pPrimitiveArgument = new PrimitiveArgumentElements();
		this.pInteger_PrimitiveArgument = new Integer_PrimitiveArgumentElements();
		this.pString_PrimitiveArgument = new String_PrimitiveArgumentElements();
		this.pCalculateableElement_ReferenceArgument = new CalculateableElement_ReferenceArgumentElements();
		this.pInteger_CalculateableElementReferenceArgument = new Integer_CalculateableElementReferenceArgumentElements();
		this.pString_CalculateableElementReferenceArgument = new String_CalculateableElementReferenceArgumentElements();
		this.pEvaluationOperation_Argument = new EvaluationOperation_ArgumentElements();
		this.pInteger_EvaluationOperation_Argument = new Integer_EvaluationOperation_ArgumentElements();
		this.pDouble_EvaluationOperation_Argument = new Double_EvaluationOperation_ArgumentElements();
		this.pCountable_ReferenceArgument = new Countable_ReferenceArgumentElements();
		this.pInteger_FunctionalParameter = new Integer_FunctionalParameterElements();
		this.pCharacter_FunctionalParameter = new Character_FunctionalParameterElements();
		this.pNumber_FunctionalParameter = new Number_FunctionalParameterElements();
		this.pCharSequence_FunctionalParameter = new CharSequence_FunctionalParameterElements();
		this.pObject_FunctionalParameter = new Object_FunctionalParameterElements();
		this.pString_FunctionalParameter = new String_FunctionalParameterElements();
		this.pBoolean_FunctionalParameter = new Boolean_FunctionalParameterElements();
		this.pDouble_FunctionalParameter = new Double_FunctionalParameterElements();
		this.pCountableReferenceParameter = new CountableReferenceParameterElements();
		this.pInteger_CalculateableParameter = new Integer_CalculateableParameterElements();
		this.pCharacter_CalculateableParameter = new Character_CalculateableParameterElements();
		this.pNumber_CalculateableParameter = new Number_CalculateableParameterElements();
		this.pCharSequence_CalculateableParameter = new CharSequence_CalculateableParameterElements();
		this.pObject_CalculateableParameter = new Object_CalculateableParameterElements();
		this.pString_CalculateableParameter = new String_CalculateableParameterElements();
		this.pBoolean_CalculateableParameter = new Boolean_CalculateableParameterElements();
		this.pDouble_CalculateableParameter = new Double_CalculateableParameterElements();
		this.pCourseType_EnumerationOperator = new CourseType_EnumerationOperatorElements();
		this.eCourseType = new CourseTypeElements();
		this.pInteger_ExpressionOperator = new Integer_ExpressionOperatorElements();
		this.pInteger_BitOperator = new Integer_BitOperatorElements();
		this.pInteger_And_BitOperator = new Integer_And_BitOperatorElements();
		this.pInteger_Or_BitOperator = new Integer_Or_BitOperatorElements();
		this.pInteger_FunctionalOperator_Begin = new Integer_FunctionalOperator_BeginElements();
		this.pNumber_ExpressionOperator = new Number_ExpressionOperatorElements();
		this.pNumber_BitOperator = new Number_BitOperatorElements();
		this.pNumber_And_BitOperator = new Number_And_BitOperatorElements();
		this.pNumber_Or_BitOperator = new Number_Or_BitOperatorElements();
		this.pNumber_FunctionalOperator_Begin = new Number_FunctionalOperator_BeginElements();
		this.pCharacter_ExpressionOperator = new Character_ExpressionOperatorElements();
		this.pCharacter_BitOperator = new Character_BitOperatorElements();
		this.pCharacter_And_BitOperator = new Character_And_BitOperatorElements();
		this.pCharacter_Or_BitOperator = new Character_Or_BitOperatorElements();
		this.pCharacter_FunctionalOperator_Begin = new Character_FunctionalOperator_BeginElements();
		this.pCharSequence_ExpressionOperator = new CharSequence_ExpressionOperatorElements();
		this.pCharSequence_BitOperator = new CharSequence_BitOperatorElements();
		this.pCharSequence_And_BitOperator = new CharSequence_And_BitOperatorElements();
		this.pCharSequence_Or_BitOperator = new CharSequence_Or_BitOperatorElements();
		this.pCharSequence_FunctionalOperator_Begin = new CharSequence_FunctionalOperator_BeginElements();
		this.pObject_ExpressionOperator = new Object_ExpressionOperatorElements();
		this.pObject_BitOperator = new Object_BitOperatorElements();
		this.pObject_And_BitOperator = new Object_And_BitOperatorElements();
		this.pObject_Or_BitOperator = new Object_Or_BitOperatorElements();
		this.pObject_FunctionalOperator_Begin = new Object_FunctionalOperator_BeginElements();
		this.pString_ExpressionOperator = new String_ExpressionOperatorElements();
		this.pString_BitOperator = new String_BitOperatorElements();
		this.pString_And_BitOperator = new String_And_BitOperatorElements();
		this.pString_Or_BitOperator = new String_Or_BitOperatorElements();
		this.pString_FunctionalOperator_Begin = new String_FunctionalOperator_BeginElements();
		this.pBoolean_ExpressionOperator = new Boolean_ExpressionOperatorElements();
		this.pBoolean_BitOperator = new Boolean_BitOperatorElements();
		this.pBoolean_And_BitOperator = new Boolean_And_BitOperatorElements();
		this.pBoolean_Or_BitOperator = new Boolean_Or_BitOperatorElements();
		this.pBoolean_FunctionalOperator_Begin = new Boolean_FunctionalOperator_BeginElements();
		this.pDouble_ExpressionOperator = new Double_ExpressionOperatorElements();
		this.pDouble_BitOperator = new Double_BitOperatorElements();
		this.pDouble_And_BitOperator = new Double_And_BitOperatorElements();
		this.pDouble_Or_BitOperator = new Double_Or_BitOperatorElements();
		this.pDouble_FunctionalOperator_Begin = new Double_FunctionalOperator_BeginElements();
		this.pInteger_FunctionalOperator = new Integer_FunctionalOperatorElements();
		this.pNumber_FunctionalOperator = new Number_FunctionalOperatorElements();
		this.pCharacter_FunctionalOperator = new Character_FunctionalOperatorElements();
		this.pCharSequence_FunctionalOperator = new CharSequence_FunctionalOperatorElements();
		this.pObject_FunctionalOperator = new Object_FunctionalOperatorElements();
		this.pString_FunctionalOperator = new String_FunctionalOperatorElements();
		this.pBoolean_FunctionalOperator = new Boolean_FunctionalOperatorElements();
		this.pDouble_FunctionalOperator = new Double_FunctionalOperatorElements();
		this.pDoubleValue_FunctionalOperator = new DoubleValue_FunctionalOperatorElements();
		this.pNumber_Integer_greaterThan_FunctionalOperator = new Number_Integer_greaterThan_FunctionalOperatorElements();
		this.pNumber_Integer_greaterEquals_FunctionalOperator = new Number_Integer_greaterEquals_FunctionalOperatorElements();
		this.pNumber_Integer_smallerThan_FunctionalOperator = new Number_Integer_smallerThan_FunctionalOperatorElements();
		this.pNumber_Integer_smallerEquals_FunctionalOperator = new Number_Integer_smallerEquals_FunctionalOperatorElements();
		this.pNumber_Integer_Object_Number_equals_FunctionalOperator = new Number_Integer_Object_Number_equals_FunctionalOperatorElements();
		this.pNumber_Integer_Object_Number_toString_FunctionalOperator = new Number_Integer_Object_Number_toString_FunctionalOperatorElements();
		this.pNumber_Integer_Object_Number_hashCode_FunctionalOperator = new Number_Integer_Object_Number_hashCode_FunctionalOperatorElements();
		this.pGreaterThan_FunctionalOperator = new GreaterThan_FunctionalOperatorElements();
		this.pGreaterEquals_FunctionalOperator = new GreaterEquals_FunctionalOperatorElements();
		this.pSmallerThan_FunctionalOperator = new SmallerThan_FunctionalOperatorElements();
		this.pSmallerEquals_FunctionalOperator = new SmallerEquals_FunctionalOperatorElements();
		this.pObject_Number_equals_FunctionalOperator = new Object_Number_equals_FunctionalOperatorElements();
		this.pObject_Number_toString_FunctionalOperator = new Object_Number_toString_FunctionalOperatorElements();
		this.pObject_Number_hashCode_FunctionalOperator = new Object_Number_hashCode_FunctionalOperatorElements();
		this.pObject_Character_equals_FunctionalOperator = new Object_Character_equals_FunctionalOperatorElements();
		this.pObject_Character_toString_FunctionalOperator = new Object_Character_toString_FunctionalOperatorElements();
		this.pObject_Character_hashCode_FunctionalOperator = new Object_Character_hashCode_FunctionalOperatorElements();
		this.pLength_FunctionalOperator = new Length_FunctionalOperatorElements();
		this.pObject_CharSequence_equals_FunctionalOperator = new Object_CharSequence_equals_FunctionalOperatorElements();
		this.pObject_CharSequence_toString_FunctionalOperator = new Object_CharSequence_toString_FunctionalOperatorElements();
		this.pObject_CharSequence_hashCode_FunctionalOperator = new Object_CharSequence_hashCode_FunctionalOperatorElements();
		this.pEquals_FunctionalOperator = new Equals_FunctionalOperatorElements();
		this.pToString_FunctionalOperator = new ToString_FunctionalOperatorElements();
		this.pHashCode_FunctionalOperator = new HashCode_FunctionalOperatorElements();
		this.pCharAt_FunctionalOperator = new CharAt_FunctionalOperatorElements();
		this.pCodePointAt_FunctionalOperator = new CodePointAt_FunctionalOperatorElements();
		this.pCodePointBefore_FunctionalOperator = new CodePointBefore_FunctionalOperatorElements();
		this.pCompareToString_FunctionalOperator = new CompareToString_FunctionalOperatorElements();
		this.pCompareToStringIgnoreCase_FunctionalOperator = new CompareToStringIgnoreCase_FunctionalOperatorElements();
		this.pContains_FunctionalOperator = new Contains_FunctionalOperatorElements();
		this.pSubstring_FunctionalOperator = new Substring_FunctionalOperatorElements();
		this.pConcat_FunctionalOperator = new Concat_FunctionalOperatorElements();
		this.pEndsWith_FunctionalOperator = new EndsWith_FunctionalOperatorElements();
		this.pEqualsIgnoreCase_FunctionalOperator = new EqualsIgnoreCase_FunctionalOperatorElements();
		this.pIndexOfString_FunctionalOperator = new IndexOfString_FunctionalOperatorElements();
		this.pIndexOfChar_FunctionalOperator = new IndexOfChar_FunctionalOperatorElements();
		this.pIndexOfCharFromIndex_FunctionalOperator = new IndexOfCharFromIndex_FunctionalOperatorElements();
		this.pIsEmpty_FunctionalOperator = new IsEmpty_FunctionalOperatorElements();
		this.pOffsetByCodePoints_FunctionalOperator = new OffsetByCodePoints_FunctionalOperatorElements();
		this.pStartsWith_FunctionalOperator = new StartsWith_FunctionalOperatorElements();
		this.pStartsWithOffset_FunctionalOperator = new StartsWithOffset_FunctionalOperatorElements();
		this.pToLowerCase_FunctionalOperator = new ToLowerCase_FunctionalOperatorElements();
		this.pToUpperCase_FunctionalOperator = new ToUpperCase_FunctionalOperatorElements();
		this.pTrim_FunctionalOperator = new Trim_FunctionalOperatorElements();
		this.pCharSequence_String_length_FunctionalOperator = new CharSequence_String_length_FunctionalOperatorElements();
		this.pCharSequence_String_Object_CharSequence_equals_FunctionalOperator = new CharSequence_String_Object_CharSequence_equals_FunctionalOperatorElements();
		this.pCharSequence_String_Object_CharSequence_toString_FunctionalOperator = new CharSequence_String_Object_CharSequence_toString_FunctionalOperatorElements();
		this.pCharSequence_String_Object_CharSequence_hashCode_FunctionalOperator = new CharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorElements();
		this.pParseBoolean_FunctionalOperator = new ParseBoolean_FunctionalOperatorElements();
		this.pCompareToBoolean_FunctionalOperator = new CompareToBoolean_FunctionalOperatorElements();
		this.pObject_Boolean_equals_FunctionalOperator = new Object_Boolean_equals_FunctionalOperatorElements();
		this.pObject_Boolean_toString_FunctionalOperator = new Object_Boolean_toString_FunctionalOperatorElements();
		this.pObject_Boolean_hashCode_FunctionalOperator = new Object_Boolean_hashCode_FunctionalOperatorElements();
		this.pNumber_Double_greaterThan_FunctionalOperator = new Number_Double_greaterThan_FunctionalOperatorElements();
		this.pNumber_Double_greaterEquals_FunctionalOperator = new Number_Double_greaterEquals_FunctionalOperatorElements();
		this.pNumber_Double_smallerThan_FunctionalOperator = new Number_Double_smallerThan_FunctionalOperatorElements();
		this.pNumber_Double_smallerEquals_FunctionalOperator = new Number_Double_smallerEquals_FunctionalOperatorElements();
		this.pNumber_Double_Object_Number_equals_FunctionalOperator = new Number_Double_Object_Number_equals_FunctionalOperatorElements();
		this.pNumber_Double_Object_Number_toString_FunctionalOperator = new Number_Double_Object_Number_toString_FunctionalOperatorElements();
		this.pNumber_Double_Object_Number_hashCode_FunctionalOperator = new Number_Double_Object_Number_hashCode_FunctionalOperatorElements();
		this.pEvaluationOperator = new EvaluationOperatorElements();
		this.pEvaluationBitOperator = new EvaluationBitOperatorElements();
		this.pAnd_EvaluationBitOperator = new And_EvaluationBitOperatorElements();
		this.pOr_EvaluationBitOperator = new Or_EvaluationBitOperatorElements();
		this.pEvaluationFunctionalOperator = new EvaluationFunctionalOperatorElements();
		this.pAggregationOperator = new AggregationOperatorElements();
		this.pCountingAggregationOperator = new CountingAggregationOperatorElements();
		this.pCalculatingAggregationOperator = new CalculatingAggregationOperatorElements();
		this.pCount_AggregationOperator = new Count_AggregationOperatorElements();
		this.pSum_AggregationOperator_Integer = new Sum_AggregationOperator_IntegerElements();
		this.pMin_AggregationOperator_Integer = new Min_AggregationOperator_IntegerElements();
		this.pMax_AggregationOperator_Integer = new Max_AggregationOperator_IntegerElements();
		this.pIntegerParseInt_ClassOperator = new IntegerParseInt_ClassOperatorElements();
		this.pSum_AggregationOperator_Double = new Sum_AggregationOperator_DoubleElements();
		this.pMin_AggregationOperator_Double = new Min_AggregationOperator_DoubleElements();
		this.pMax_AggregationOperator_Double = new Max_AggregationOperator_DoubleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.MQL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FindQueryCollection:
	//	{FindQueryCollection} findQueries+=FindQuery ('union' findQueries+=FindQuery)*;
	public FindQueryCollectionElements getFindQueryCollectionAccess() {
		return pFindQueryCollection;
	}
	
	public ParserRule getFindQueryCollectionRule() {
		return getFindQueryCollectionAccess().getRule();
	}
	
	//FindQuery:
	//	{FindQuery} 'Find' (rootClass+=RootClass ';')+ ('Select' select=SelectClause)?;
	public FindQueryElements getFindQueryAccess() {
		return pFindQuery;
	}
	
	public ParserRule getFindQueryRule() {
		return getFindQueryAccess().getRule();
	}
	
	//SelectClause:
	//	{SelectClause} namedElements+=[NamedElement] (',' namedElements+=[NamedElement])* ';';
	public SelectClauseElements getSelectClauseAccess() {
		return pSelectClause;
	}
	
	public ParserRule getSelectClauseRule() {
		return getSelectClauseAccess().getRule();
	}
	
	//Person_Type Person:
	//	Person | Professor | Student;
	public Person_TypeElements getPerson_TypeAccess() {
		return pPerson_Type;
	}
	
	public ParserRule getPerson_TypeRule() {
		return getPerson_TypeAccess().getRule();
	}
	
	//Exam_Type Exam:
	//	Exam;
	public Exam_TypeElements getExam_TypeAccess() {
		return pExam_Type;
	}
	
	public ParserRule getExam_TypeRule() {
		return getExam_TypeAccess().getRule();
	}
	
	//Professor_Type Professor:
	//	Professor;
	public Professor_TypeElements getProfessor_TypeAccess() {
		return pProfessor_Type;
	}
	
	public ParserRule getProfessor_TypeRule() {
		return getProfessor_TypeAccess().getRule();
	}
	
	//UniversityManagementSystem_Type UniversityManagementSystem:
	//	UniversityManagementSystem;
	public UniversityManagementSystem_TypeElements getUniversityManagementSystem_TypeAccess() {
		return pUniversityManagementSystem_Type;
	}
	
	public ParserRule getUniversityManagementSystem_TypeRule() {
		return getUniversityManagementSystem_TypeAccess().getRule();
	}
	
	//Course_Type Course:
	//	Course;
	public Course_TypeElements getCourse_TypeAccess() {
		return pCourse_Type;
	}
	
	public ParserRule getCourse_TypeRule() {
		return getCourse_TypeAccess().getRule();
	}
	
	//Student_Type Student:
	//	Student;
	public Student_TypeElements getStudent_TypeAccess() {
		return pStudent_Type;
	}
	
	public ParserRule getStudent_TypeRule() {
		return getStudent_TypeAccess().getRule();
	}
	
	//RootClass:
	//	Person | Student | Professor | Course | UniversityManagementSystem | Exam;
	public RootClassElements getRootClassAccess() {
		return pRootClass;
	}
	
	public ParserRule getRootClassRule() {
		return getRootClassAccess().getRule();
	}
	
	//Person:
	//	{Person} 'Person' name=ID ('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' |
	//	email_AttrEClass+=Person_email_AttrEClass | name_AttrEClass+=Person_name_AttrEClass)* '}')?;
	public PersonElements getPersonAccess() {
		return pPerson;
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}
	
	//Student:
	//	{Student} 'Student' name=ID ('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' |
	//	email_AttrEClass+=Person_email_AttrEClass | matriculationNumber_AttrEClass+=Student_matriculationNumber_AttrEClass |
	//	name_AttrEClass+=Person_name_AttrEClass | attends+=Student_attends_OrGroup)* '}')?;
	public StudentElements getStudentAccess() {
		return pStudent;
	}
	
	public ParserRule getStudentRule() {
		return getStudentAccess().getRule();
	}
	
	//Professor:
	//	{Professor} 'Professor' name=ID ('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' |
	//	email_AttrEClass+=Person_email_AttrEClass | name_AttrEClass+=Person_name_AttrEClass |
	//	employeeNumber_AttrEClass+=Professor_employeeNumber_AttrEClass | lectures+=Professor_lectures_OrGroup)* '}')?;
	public ProfessorElements getProfessorAccess() {
		return pProfessor;
	}
	
	public ParserRule getProfessorRule() {
		return getProfessorAccess().getRule();
	}
	
	//Course:
	//	{Course} 'Course' name=ID ('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' |
	//	courseNumber_AttrEClass+=Course_courseNumber_AttrEClass | exam+=Course_exam_OrGroup |
	//	mandatoryFor+=Course_mandatoryFor_OrGroup | name_AttrEClass+=Course_name_AttrEClass)*
	//	(courseType_AttrEClass=Course_courseType_AttrEClass ('eval:' EvaluationOperator+=EvaluationOperator ';' |
	//	courseNumber_AttrEClass+=Course_courseNumber_AttrEClass | exam+=Course_exam_OrGroup |
	//	mandatoryFor+=Course_mandatoryFor_OrGroup | name_AttrEClass+=Course_name_AttrEClass)*)? '}')?;
	public CourseElements getCourseAccess() {
		return pCourse;
	}
	
	public ParserRule getCourseRule() {
		return getCourseAccess().getRule();
	}
	
	//UniversityManagementSystem:
	//	{UniversityManagementSystem} 'UniversityManagementSystem' name=ID ('{' ('eval:'
	//	EvaluationOperator+=EvaluationOperator ';' | person+=UniversityManagementSystem_person_OrGroup |
	//	course+=UniversityManagementSystem_course_OrGroup)* '}')?;
	public UniversityManagementSystemElements getUniversityManagementSystemAccess() {
		return pUniversityManagementSystem;
	}
	
	public ParserRule getUniversityManagementSystemRule() {
		return getUniversityManagementSystemAccess().getRule();
	}
	
	//Exam:
	//	{Exam} 'Exam' name=ID ('{' ('eval:' EvaluationOperator+=EvaluationOperator ';' |
	//	examID_AttrEClass+=Exam_examID_AttrEClass)* '}')?;
	public ExamElements getExamAccess() {
		return pExam;
	}
	
	public ParserRule getExamRule() {
		return getExamAccess().getRule();
	}
	
	//Professor_employeeNumber_AttrEClass:
	//	{Professor_employeeNumber_AttrEClass} 'employeeNumber' (negated?='!'? & generalized?='*'?) name=ID (':'
	//	operator=Integer_ExpressionOperator)? ';';
	public Professor_employeeNumber_AttrEClassElements getProfessor_employeeNumber_AttrEClassAccess() {
		return pProfessor_employeeNumber_AttrEClass;
	}
	
	public ParserRule getProfessor_employeeNumber_AttrEClassRule() {
		return getProfessor_employeeNumber_AttrEClassAccess().getRule();
	}
	
	//Student_matriculationNumber_AttrEClass:
	//	{Student_matriculationNumber_AttrEClass} 'matriculationNumber' (negated?='!'? & generalized?='*'?) name=ID (':'
	//	operator=Integer_ExpressionOperator)? ';';
	public Student_matriculationNumber_AttrEClassElements getStudent_matriculationNumber_AttrEClassAccess() {
		return pStudent_matriculationNumber_AttrEClass;
	}
	
	public ParserRule getStudent_matriculationNumber_AttrEClassRule() {
		return getStudent_matriculationNumber_AttrEClassAccess().getRule();
	}
	
	//Person_name_AttrEClass:
	//	{Person_name_AttrEClass} 'name' (negated?='!'? & generalized?='*'?) name=ID (':' operator=String_ExpressionOperator)?
	//	';';
	public Person_name_AttrEClassElements getPerson_name_AttrEClassAccess() {
		return pPerson_name_AttrEClass;
	}
	
	public ParserRule getPerson_name_AttrEClassRule() {
		return getPerson_name_AttrEClassAccess().getRule();
	}
	
	//Course_courseType_AttrEClass:
	//	{Course_courseType_AttrEClass} 'courseType' negated?='!'? name=ID (':' operator=CourseType_EnumerationOperator)? ';';
	public Course_courseType_AttrEClassElements getCourse_courseType_AttrEClassAccess() {
		return pCourse_courseType_AttrEClass;
	}
	
	public ParserRule getCourse_courseType_AttrEClassRule() {
		return getCourse_courseType_AttrEClassAccess().getRule();
	}
	
	//Course_courseNumber_AttrEClass:
	//	{Course_courseNumber_AttrEClass} 'courseNumber' (negated?='!'? & generalized?='*'?) name=ID (':'
	//	operator=Integer_ExpressionOperator)? ';';
	public Course_courseNumber_AttrEClassElements getCourse_courseNumber_AttrEClassAccess() {
		return pCourse_courseNumber_AttrEClass;
	}
	
	public ParserRule getCourse_courseNumber_AttrEClassRule() {
		return getCourse_courseNumber_AttrEClassAccess().getRule();
	}
	
	//Person_email_AttrEClass:
	//	{Person_email_AttrEClass} 'email' (negated?='!'? & generalized?='*'?) name=ID (':'
	//	operator=String_ExpressionOperator)? ';';
	public Person_email_AttrEClassElements getPerson_email_AttrEClassAccess() {
		return pPerson_email_AttrEClass;
	}
	
	public ParserRule getPerson_email_AttrEClassRule() {
		return getPerson_email_AttrEClassAccess().getRule();
	}
	
	//Course_name_AttrEClass:
	//	{Course_name_AttrEClass} 'name' (negated?='!'? & generalized?='*'?) name=ID (':' operator=String_ExpressionOperator)?
	//	';';
	public Course_name_AttrEClassElements getCourse_name_AttrEClassAccess() {
		return pCourse_name_AttrEClass;
	}
	
	public ParserRule getCourse_name_AttrEClassRule() {
		return getCourse_name_AttrEClassAccess().getRule();
	}
	
	//Exam_examID_AttrEClass:
	//	{Exam_examID_AttrEClass} 'examID' (negated?='!'? & generalized?='*'?) name=ID (':'
	//	operator=String_ExpressionOperator)? ';';
	public Exam_examID_AttrEClassElements getExam_examID_AttrEClassAccess() {
		return pExam_examID_AttrEClass;
	}
	
	public ParserRule getExam_examID_AttrEClassRule() {
		return getExam_examID_AttrEClassAccess().getRule();
	}
	
	//Student_attends_OrGroup Course_Reference_OrGroup:
	//	{Course_Reference_OrGroup} 'attends' (negated?='!'? & transitive?='+'? & generalized?='*'?) name=ID (':'
	//	reference+=[Course] ('OR' reference+=[Course])*)? ';';
	public Student_attends_OrGroupElements getStudent_attends_OrGroupAccess() {
		return pStudent_attends_OrGroup;
	}
	
	public ParserRule getStudent_attends_OrGroupRule() {
		return getStudent_attends_OrGroupAccess().getRule();
	}
	
	//Professor_lectures_OrGroup Course_Reference_OrGroup:
	//	{Course_Reference_OrGroup} 'lectures' (negated?='!'? & transitive?='+'? & generalized?='*'?) name=ID (':'
	//	reference+=[Course] ('OR' reference+=[Course])*)? ';';
	public Professor_lectures_OrGroupElements getProfessor_lectures_OrGroupAccess() {
		return pProfessor_lectures_OrGroup;
	}
	
	public ParserRule getProfessor_lectures_OrGroupRule() {
		return getProfessor_lectures_OrGroupAccess().getRule();
	}
	
	//Course_exam_OrGroup Exam_Containment_OrGroup:
	//	{Exam_Containment_OrGroup} 'exam' (negated?='!'? & transitive?='+'? & generalized?='*'?) name=ID (':'
	//	containment+=Exam_Type ('OR' containment+=Exam_Type)*)? ';';
	public Course_exam_OrGroupElements getCourse_exam_OrGroupAccess() {
		return pCourse_exam_OrGroup;
	}
	
	public ParserRule getCourse_exam_OrGroupRule() {
		return getCourse_exam_OrGroupAccess().getRule();
	}
	
	//Course_mandatoryFor_OrGroup Course_Reference_OrGroup:
	//	{Course_Reference_OrGroup} 'mandatoryFor' (negated?='!'? & transitive?='+'? & generalized?='*'?) name=ID (':'
	//	reference+=[Course] ('OR' reference+=[Course])*)? ';';
	public Course_mandatoryFor_OrGroupElements getCourse_mandatoryFor_OrGroupAccess() {
		return pCourse_mandatoryFor_OrGroup;
	}
	
	public ParserRule getCourse_mandatoryFor_OrGroupRule() {
		return getCourse_mandatoryFor_OrGroupAccess().getRule();
	}
	
	//UniversityManagementSystem_person_OrGroup Person_Containment_OrGroup:
	//	{Person_Containment_OrGroup} 'person' (negated?='!'? & transitive?='+'? & generalized?='*'?) name=ID (':'
	//	containment+=Person_Type ('OR' containment+=Person_Type)*)? ';';
	public UniversityManagementSystem_person_OrGroupElements getUniversityManagementSystem_person_OrGroupAccess() {
		return pUniversityManagementSystem_person_OrGroup;
	}
	
	public ParserRule getUniversityManagementSystem_person_OrGroupRule() {
		return getUniversityManagementSystem_person_OrGroupAccess().getRule();
	}
	
	//UniversityManagementSystem_course_OrGroup Course_Containment_OrGroup:
	//	{Course_Containment_OrGroup} 'course' (negated?='!'? & transitive?='+'? & generalized?='*'?) name=ID (':'
	//	containment+=Course_Type ('OR' containment+=Course_Type)*)? ';';
	public UniversityManagementSystem_course_OrGroupElements getUniversityManagementSystem_course_OrGroupAccess() {
		return pUniversityManagementSystem_course_OrGroup;
	}
	
	public ParserRule getUniversityManagementSystem_course_OrGroupRule() {
		return getUniversityManagementSystem_course_OrGroupAccess().getRule();
	}
	
	//FunctionalArgument:
	//	PrimitiveArgument | Calculateable_Argument;
	public FunctionalArgumentElements getFunctionalArgumentAccess() {
		return pFunctionalArgument;
	}
	
	public ParserRule getFunctionalArgumentRule() {
		return getFunctionalArgumentAccess().getRule();
	}
	
	//Calculateable_Argument:
	//	CalculateableElement_ReferenceArgument | EvaluationOperation_Argument;
	public Calculateable_ArgumentElements getCalculateable_ArgumentAccess() {
		return pCalculateable_Argument;
	}
	
	public ParserRule getCalculateable_ArgumentRule() {
		return getCalculateable_ArgumentAccess().getRule();
	}
	
	//PrimitiveArgument:
	//	Integer_PrimitiveArgument | String_PrimitiveArgument;
	public PrimitiveArgumentElements getPrimitiveArgumentAccess() {
		return pPrimitiveArgument;
	}
	
	public ParserRule getPrimitiveArgumentRule() {
		return getPrimitiveArgumentAccess().getRule();
	}
	
	//Integer_PrimitiveArgument:
	//	{Integer_PrimitiveArgument} value=INT operator=Integer_FunctionalOperator?;
	public Integer_PrimitiveArgumentElements getInteger_PrimitiveArgumentAccess() {
		return pInteger_PrimitiveArgument;
	}
	
	public ParserRule getInteger_PrimitiveArgumentRule() {
		return getInteger_PrimitiveArgumentAccess().getRule();
	}
	
	//String_PrimitiveArgument:
	//	{String_PrimitiveArgument} value=STRING operator=String_FunctionalOperator?;
	public String_PrimitiveArgumentElements getString_PrimitiveArgumentAccess() {
		return pString_PrimitiveArgument;
	}
	
	public ParserRule getString_PrimitiveArgumentRule() {
		return getString_PrimitiveArgumentAccess().getRule();
	}
	
	//CalculateableElement_ReferenceArgument:
	//	Integer_CalculateableElementReferenceArgument | String_CalculateableElementReferenceArgument;
	public CalculateableElement_ReferenceArgumentElements getCalculateableElement_ReferenceArgumentAccess() {
		return pCalculateableElement_ReferenceArgument;
	}
	
	public ParserRule getCalculateableElement_ReferenceArgumentRule() {
		return getCalculateableElement_ReferenceArgumentAccess().getRule();
	}
	
	//Integer_CalculateableElementReferenceArgument:
	//	{Integer_CalculateableElementReferenceArgument} 'IntegerRef(' reference=[Integer_CalculateableElement] ')'
	//	operator=Integer_FunctionalOperator?;
	public Integer_CalculateableElementReferenceArgumentElements getInteger_CalculateableElementReferenceArgumentAccess() {
		return pInteger_CalculateableElementReferenceArgument;
	}
	
	public ParserRule getInteger_CalculateableElementReferenceArgumentRule() {
		return getInteger_CalculateableElementReferenceArgumentAccess().getRule();
	}
	
	//String_CalculateableElementReferenceArgument:
	//	{String_CalculateableElementReferenceArgument} 'StringRef(' reference=[String_CalculateableElement] ')'
	//	operator=String_FunctionalOperator?;
	public String_CalculateableElementReferenceArgumentElements getString_CalculateableElementReferenceArgumentAccess() {
		return pString_CalculateableElementReferenceArgument;
	}
	
	public ParserRule getString_CalculateableElementReferenceArgumentRule() {
		return getString_CalculateableElementReferenceArgumentAccess().getRule();
	}
	
	//EvaluationOperation_Argument:
	//	Integer_EvaluationOperation_Argument | Double_EvaluationOperation_Argument;
	public EvaluationOperation_ArgumentElements getEvaluationOperation_ArgumentAccess() {
		return pEvaluationOperation_Argument;
	}
	
	public ParserRule getEvaluationOperation_ArgumentRule() {
		return getEvaluationOperation_ArgumentAccess().getRule();
	}
	
	//Integer_EvaluationOperation_Argument:
	//	Count_AggregationOperator | Sum_AggregationOperator_Integer | Min_AggregationOperator_Integer |
	//	Max_AggregationOperator_Integer | IntegerParseInt_ClassOperator;
	public Integer_EvaluationOperation_ArgumentElements getInteger_EvaluationOperation_ArgumentAccess() {
		return pInteger_EvaluationOperation_Argument;
	}
	
	public ParserRule getInteger_EvaluationOperation_ArgumentRule() {
		return getInteger_EvaluationOperation_ArgumentAccess().getRule();
	}
	
	//Double_EvaluationOperation_Argument:
	//	Sum_AggregationOperator_Double | Min_AggregationOperator_Double | Max_AggregationOperator_Double;
	public Double_EvaluationOperation_ArgumentElements getDouble_EvaluationOperation_ArgumentAccess() {
		return pDouble_EvaluationOperation_Argument;
	}
	
	public ParserRule getDouble_EvaluationOperation_ArgumentRule() {
		return getDouble_EvaluationOperation_ArgumentAccess().getRule();
	}
	
	//Countable_ReferenceArgument:
	//	{Countable_ReferenceArgument} reference=[Countable];
	public Countable_ReferenceArgumentElements getCountable_ReferenceArgumentAccess() {
		return pCountable_ReferenceArgument;
	}
	
	public ParserRule getCountable_ReferenceArgumentRule() {
		return getCountable_ReferenceArgumentAccess().getRule();
	}
	
	//Integer_FunctionalParameter:
	//	{Integer_FunctionalParameter} argument=FunctionalArgument;
	public Integer_FunctionalParameterElements getInteger_FunctionalParameterAccess() {
		return pInteger_FunctionalParameter;
	}
	
	public ParserRule getInteger_FunctionalParameterRule() {
		return getInteger_FunctionalParameterAccess().getRule();
	}
	
	//Character_FunctionalParameter:
	//	{Character_FunctionalParameter} argument=FunctionalArgument;
	public Character_FunctionalParameterElements getCharacter_FunctionalParameterAccess() {
		return pCharacter_FunctionalParameter;
	}
	
	public ParserRule getCharacter_FunctionalParameterRule() {
		return getCharacter_FunctionalParameterAccess().getRule();
	}
	
	//Number_FunctionalParameter:
	//	{Number_FunctionalParameter} argument=FunctionalArgument;
	public Number_FunctionalParameterElements getNumber_FunctionalParameterAccess() {
		return pNumber_FunctionalParameter;
	}
	
	public ParserRule getNumber_FunctionalParameterRule() {
		return getNumber_FunctionalParameterAccess().getRule();
	}
	
	//CharSequence_FunctionalParameter:
	//	{CharSequence_FunctionalParameter} argument=FunctionalArgument;
	public CharSequence_FunctionalParameterElements getCharSequence_FunctionalParameterAccess() {
		return pCharSequence_FunctionalParameter;
	}
	
	public ParserRule getCharSequence_FunctionalParameterRule() {
		return getCharSequence_FunctionalParameterAccess().getRule();
	}
	
	//Object_FunctionalParameter:
	//	{Object_FunctionalParameter} argument=FunctionalArgument;
	public Object_FunctionalParameterElements getObject_FunctionalParameterAccess() {
		return pObject_FunctionalParameter;
	}
	
	public ParserRule getObject_FunctionalParameterRule() {
		return getObject_FunctionalParameterAccess().getRule();
	}
	
	//String_FunctionalParameter:
	//	{String_FunctionalParameter} argument=FunctionalArgument;
	public String_FunctionalParameterElements getString_FunctionalParameterAccess() {
		return pString_FunctionalParameter;
	}
	
	public ParserRule getString_FunctionalParameterRule() {
		return getString_FunctionalParameterAccess().getRule();
	}
	
	//Boolean_FunctionalParameter:
	//	{Boolean_FunctionalParameter} argument=FunctionalArgument;
	public Boolean_FunctionalParameterElements getBoolean_FunctionalParameterAccess() {
		return pBoolean_FunctionalParameter;
	}
	
	public ParserRule getBoolean_FunctionalParameterRule() {
		return getBoolean_FunctionalParameterAccess().getRule();
	}
	
	//Double_FunctionalParameter:
	//	{Double_FunctionalParameter} argument=FunctionalArgument;
	public Double_FunctionalParameterElements getDouble_FunctionalParameterAccess() {
		return pDouble_FunctionalParameter;
	}
	
	public ParserRule getDouble_FunctionalParameterRule() {
		return getDouble_FunctionalParameterAccess().getRule();
	}
	
	//CountableReferenceParameter:
	//	{CountableReferenceParameter} argument=Countable_ReferenceArgument;
	public CountableReferenceParameterElements getCountableReferenceParameterAccess() {
		return pCountableReferenceParameter;
	}
	
	public ParserRule getCountableReferenceParameterRule() {
		return getCountableReferenceParameterAccess().getRule();
	}
	
	//Integer_CalculateableParameter:
	//	{Integer_CalculateableParameter} argument=Calculateable_Argument;
	public Integer_CalculateableParameterElements getInteger_CalculateableParameterAccess() {
		return pInteger_CalculateableParameter;
	}
	
	public ParserRule getInteger_CalculateableParameterRule() {
		return getInteger_CalculateableParameterAccess().getRule();
	}
	
	//Character_CalculateableParameter:
	//	{Character_CalculateableParameter} argument=Calculateable_Argument;
	public Character_CalculateableParameterElements getCharacter_CalculateableParameterAccess() {
		return pCharacter_CalculateableParameter;
	}
	
	public ParserRule getCharacter_CalculateableParameterRule() {
		return getCharacter_CalculateableParameterAccess().getRule();
	}
	
	//Number_CalculateableParameter:
	//	{Number_CalculateableParameter} argument=Calculateable_Argument;
	public Number_CalculateableParameterElements getNumber_CalculateableParameterAccess() {
		return pNumber_CalculateableParameter;
	}
	
	public ParserRule getNumber_CalculateableParameterRule() {
		return getNumber_CalculateableParameterAccess().getRule();
	}
	
	//CharSequence_CalculateableParameter:
	//	{CharSequence_CalculateableParameter} argument=Calculateable_Argument;
	public CharSequence_CalculateableParameterElements getCharSequence_CalculateableParameterAccess() {
		return pCharSequence_CalculateableParameter;
	}
	
	public ParserRule getCharSequence_CalculateableParameterRule() {
		return getCharSequence_CalculateableParameterAccess().getRule();
	}
	
	//Object_CalculateableParameter:
	//	{Object_CalculateableParameter} argument=Calculateable_Argument;
	public Object_CalculateableParameterElements getObject_CalculateableParameterAccess() {
		return pObject_CalculateableParameter;
	}
	
	public ParserRule getObject_CalculateableParameterRule() {
		return getObject_CalculateableParameterAccess().getRule();
	}
	
	//String_CalculateableParameter:
	//	{String_CalculateableParameter} argument=Calculateable_Argument;
	public String_CalculateableParameterElements getString_CalculateableParameterAccess() {
		return pString_CalculateableParameter;
	}
	
	public ParserRule getString_CalculateableParameterRule() {
		return getString_CalculateableParameterAccess().getRule();
	}
	
	//Boolean_CalculateableParameter:
	//	{Boolean_CalculateableParameter} argument=Calculateable_Argument;
	public Boolean_CalculateableParameterElements getBoolean_CalculateableParameterAccess() {
		return pBoolean_CalculateableParameter;
	}
	
	public ParserRule getBoolean_CalculateableParameterRule() {
		return getBoolean_CalculateableParameterAccess().getRule();
	}
	
	//Double_CalculateableParameter:
	//	{Double_CalculateableParameter} argument=Calculateable_Argument;
	public Double_CalculateableParameterElements getDouble_CalculateableParameterAccess() {
		return pDouble_CalculateableParameter;
	}
	
	public ParserRule getDouble_CalculateableParameterRule() {
		return getDouble_CalculateableParameterAccess().getRule();
	}
	
	//CourseType_EnumerationOperator:
	//	{CourseType_EnumerationOperator} argument=CourseType ('or' or=CourseType_EnumerationOperator)?;
	public CourseType_EnumerationOperatorElements getCourseType_EnumerationOperatorAccess() {
		return pCourseType_EnumerationOperator;
	}
	
	public ParserRule getCourseType_EnumerationOperatorRule() {
		return getCourseType_EnumerationOperatorAccess().getRule();
	}
	
	//enum CourseType:
	//	VO | UE | SEM | PR;
	public CourseTypeElements getCourseTypeAccess() {
		return eCourseType;
	}
	
	public EnumRule getCourseTypeRule() {
		return getCourseTypeAccess().getRule();
	}
	
	//Integer_ExpressionOperator:
	//	Integer_BitOperator | Integer_FunctionalOperator_Begin;
	public Integer_ExpressionOperatorElements getInteger_ExpressionOperatorAccess() {
		return pInteger_ExpressionOperator;
	}
	
	public ParserRule getInteger_ExpressionOperatorRule() {
		return getInteger_ExpressionOperatorAccess().getRule();
	}
	
	//Integer_BitOperator:
	//	Integer_And_BitOperator | Integer_Or_BitOperator;
	public Integer_BitOperatorElements getInteger_BitOperatorAccess() {
		return pInteger_BitOperator;
	}
	
	public ParserRule getInteger_BitOperatorRule() {
		return getInteger_BitOperatorAccess().getRule();
	}
	
	//Integer_And_BitOperator:
	//	{Integer_And_BitOperator} 'And' negated?='!'? '(' connects+=Integer_ExpressionOperator (','
	//	connects+=Integer_ExpressionOperator)+ ')';
	public Integer_And_BitOperatorElements getInteger_And_BitOperatorAccess() {
		return pInteger_And_BitOperator;
	}
	
	public ParserRule getInteger_And_BitOperatorRule() {
		return getInteger_And_BitOperatorAccess().getRule();
	}
	
	//Integer_Or_BitOperator:
	//	{Integer_Or_BitOperator} 'Or' negated?='!'? '(' connects+=Integer_ExpressionOperator (','
	//	connects+=Integer_ExpressionOperator)+ ')';
	public Integer_Or_BitOperatorElements getInteger_Or_BitOperatorAccess() {
		return pInteger_Or_BitOperator;
	}
	
	public ParserRule getInteger_Or_BitOperatorRule() {
		return getInteger_Or_BitOperatorAccess().getRule();
	}
	
	//Integer_FunctionalOperator_Begin Integer_FunctionalOperator:
	//	'self' Integer_FunctionalOperator;
	public Integer_FunctionalOperator_BeginElements getInteger_FunctionalOperator_BeginAccess() {
		return pInteger_FunctionalOperator_Begin;
	}
	
	public ParserRule getInteger_FunctionalOperator_BeginRule() {
		return getInteger_FunctionalOperator_BeginAccess().getRule();
	}
	
	//Number_ExpressionOperator:
	//	Number_BitOperator | Number_FunctionalOperator_Begin;
	public Number_ExpressionOperatorElements getNumber_ExpressionOperatorAccess() {
		return pNumber_ExpressionOperator;
	}
	
	public ParserRule getNumber_ExpressionOperatorRule() {
		return getNumber_ExpressionOperatorAccess().getRule();
	}
	
	//Number_BitOperator:
	//	Number_And_BitOperator | Number_Or_BitOperator;
	public Number_BitOperatorElements getNumber_BitOperatorAccess() {
		return pNumber_BitOperator;
	}
	
	public ParserRule getNumber_BitOperatorRule() {
		return getNumber_BitOperatorAccess().getRule();
	}
	
	//Number_And_BitOperator:
	//	{Number_And_BitOperator} 'And' negated?='!'? '(' connects+=Number_ExpressionOperator (','
	//	connects+=Number_ExpressionOperator)+ ')';
	public Number_And_BitOperatorElements getNumber_And_BitOperatorAccess() {
		return pNumber_And_BitOperator;
	}
	
	public ParserRule getNumber_And_BitOperatorRule() {
		return getNumber_And_BitOperatorAccess().getRule();
	}
	
	//Number_Or_BitOperator:
	//	{Number_Or_BitOperator} 'Or' negated?='!'? '(' connects+=Number_ExpressionOperator (','
	//	connects+=Number_ExpressionOperator)+ ')';
	public Number_Or_BitOperatorElements getNumber_Or_BitOperatorAccess() {
		return pNumber_Or_BitOperator;
	}
	
	public ParserRule getNumber_Or_BitOperatorRule() {
		return getNumber_Or_BitOperatorAccess().getRule();
	}
	
	//Number_FunctionalOperator_Begin Number_FunctionalOperator:
	//	'self' Number_FunctionalOperator;
	public Number_FunctionalOperator_BeginElements getNumber_FunctionalOperator_BeginAccess() {
		return pNumber_FunctionalOperator_Begin;
	}
	
	public ParserRule getNumber_FunctionalOperator_BeginRule() {
		return getNumber_FunctionalOperator_BeginAccess().getRule();
	}
	
	//Character_ExpressionOperator:
	//	Character_BitOperator | Character_FunctionalOperator_Begin;
	public Character_ExpressionOperatorElements getCharacter_ExpressionOperatorAccess() {
		return pCharacter_ExpressionOperator;
	}
	
	public ParserRule getCharacter_ExpressionOperatorRule() {
		return getCharacter_ExpressionOperatorAccess().getRule();
	}
	
	//Character_BitOperator:
	//	Character_And_BitOperator | Character_Or_BitOperator;
	public Character_BitOperatorElements getCharacter_BitOperatorAccess() {
		return pCharacter_BitOperator;
	}
	
	public ParserRule getCharacter_BitOperatorRule() {
		return getCharacter_BitOperatorAccess().getRule();
	}
	
	//Character_And_BitOperator:
	//	{Character_And_BitOperator} 'And' negated?='!'? '(' connects+=Character_ExpressionOperator (','
	//	connects+=Character_ExpressionOperator)+ ')';
	public Character_And_BitOperatorElements getCharacter_And_BitOperatorAccess() {
		return pCharacter_And_BitOperator;
	}
	
	public ParserRule getCharacter_And_BitOperatorRule() {
		return getCharacter_And_BitOperatorAccess().getRule();
	}
	
	//Character_Or_BitOperator:
	//	{Character_Or_BitOperator} 'Or' negated?='!'? '(' connects+=Character_ExpressionOperator (','
	//	connects+=Character_ExpressionOperator)+ ')';
	public Character_Or_BitOperatorElements getCharacter_Or_BitOperatorAccess() {
		return pCharacter_Or_BitOperator;
	}
	
	public ParserRule getCharacter_Or_BitOperatorRule() {
		return getCharacter_Or_BitOperatorAccess().getRule();
	}
	
	//Character_FunctionalOperator_Begin Character_FunctionalOperator:
	//	'self' Character_FunctionalOperator;
	public Character_FunctionalOperator_BeginElements getCharacter_FunctionalOperator_BeginAccess() {
		return pCharacter_FunctionalOperator_Begin;
	}
	
	public ParserRule getCharacter_FunctionalOperator_BeginRule() {
		return getCharacter_FunctionalOperator_BeginAccess().getRule();
	}
	
	//CharSequence_ExpressionOperator:
	//	CharSequence_BitOperator | CharSequence_FunctionalOperator_Begin;
	public CharSequence_ExpressionOperatorElements getCharSequence_ExpressionOperatorAccess() {
		return pCharSequence_ExpressionOperator;
	}
	
	public ParserRule getCharSequence_ExpressionOperatorRule() {
		return getCharSequence_ExpressionOperatorAccess().getRule();
	}
	
	//CharSequence_BitOperator:
	//	CharSequence_And_BitOperator | CharSequence_Or_BitOperator;
	public CharSequence_BitOperatorElements getCharSequence_BitOperatorAccess() {
		return pCharSequence_BitOperator;
	}
	
	public ParserRule getCharSequence_BitOperatorRule() {
		return getCharSequence_BitOperatorAccess().getRule();
	}
	
	//CharSequence_And_BitOperator:
	//	{CharSequence_And_BitOperator} 'And' negated?='!'? '(' connects+=CharSequence_ExpressionOperator (','
	//	connects+=CharSequence_ExpressionOperator)+ ')';
	public CharSequence_And_BitOperatorElements getCharSequence_And_BitOperatorAccess() {
		return pCharSequence_And_BitOperator;
	}
	
	public ParserRule getCharSequence_And_BitOperatorRule() {
		return getCharSequence_And_BitOperatorAccess().getRule();
	}
	
	//CharSequence_Or_BitOperator:
	//	{CharSequence_Or_BitOperator} 'Or' negated?='!'? '(' connects+=CharSequence_ExpressionOperator (','
	//	connects+=CharSequence_ExpressionOperator)+ ')';
	public CharSequence_Or_BitOperatorElements getCharSequence_Or_BitOperatorAccess() {
		return pCharSequence_Or_BitOperator;
	}
	
	public ParserRule getCharSequence_Or_BitOperatorRule() {
		return getCharSequence_Or_BitOperatorAccess().getRule();
	}
	
	//CharSequence_FunctionalOperator_Begin CharSequence_FunctionalOperator:
	//	'self' CharSequence_FunctionalOperator;
	public CharSequence_FunctionalOperator_BeginElements getCharSequence_FunctionalOperator_BeginAccess() {
		return pCharSequence_FunctionalOperator_Begin;
	}
	
	public ParserRule getCharSequence_FunctionalOperator_BeginRule() {
		return getCharSequence_FunctionalOperator_BeginAccess().getRule();
	}
	
	//Object_ExpressionOperator:
	//	Object_BitOperator | Object_FunctionalOperator_Begin;
	public Object_ExpressionOperatorElements getObject_ExpressionOperatorAccess() {
		return pObject_ExpressionOperator;
	}
	
	public ParserRule getObject_ExpressionOperatorRule() {
		return getObject_ExpressionOperatorAccess().getRule();
	}
	
	//Object_BitOperator:
	//	Object_And_BitOperator | Object_Or_BitOperator;
	public Object_BitOperatorElements getObject_BitOperatorAccess() {
		return pObject_BitOperator;
	}
	
	public ParserRule getObject_BitOperatorRule() {
		return getObject_BitOperatorAccess().getRule();
	}
	
	//Object_And_BitOperator:
	//	{Object_And_BitOperator} 'And' negated?='!'? '(' connects+=Object_ExpressionOperator (','
	//	connects+=Object_ExpressionOperator)+ ')';
	public Object_And_BitOperatorElements getObject_And_BitOperatorAccess() {
		return pObject_And_BitOperator;
	}
	
	public ParserRule getObject_And_BitOperatorRule() {
		return getObject_And_BitOperatorAccess().getRule();
	}
	
	//Object_Or_BitOperator:
	//	{Object_Or_BitOperator} 'Or' negated?='!'? '(' connects+=Object_ExpressionOperator (','
	//	connects+=Object_ExpressionOperator)+ ')';
	public Object_Or_BitOperatorElements getObject_Or_BitOperatorAccess() {
		return pObject_Or_BitOperator;
	}
	
	public ParserRule getObject_Or_BitOperatorRule() {
		return getObject_Or_BitOperatorAccess().getRule();
	}
	
	//Object_FunctionalOperator_Begin Object_FunctionalOperator:
	//	'self' Object_FunctionalOperator;
	public Object_FunctionalOperator_BeginElements getObject_FunctionalOperator_BeginAccess() {
		return pObject_FunctionalOperator_Begin;
	}
	
	public ParserRule getObject_FunctionalOperator_BeginRule() {
		return getObject_FunctionalOperator_BeginAccess().getRule();
	}
	
	//String_ExpressionOperator:
	//	String_BitOperator | String_FunctionalOperator_Begin;
	public String_ExpressionOperatorElements getString_ExpressionOperatorAccess() {
		return pString_ExpressionOperator;
	}
	
	public ParserRule getString_ExpressionOperatorRule() {
		return getString_ExpressionOperatorAccess().getRule();
	}
	
	//String_BitOperator:
	//	String_And_BitOperator | String_Or_BitOperator;
	public String_BitOperatorElements getString_BitOperatorAccess() {
		return pString_BitOperator;
	}
	
	public ParserRule getString_BitOperatorRule() {
		return getString_BitOperatorAccess().getRule();
	}
	
	//String_And_BitOperator:
	//	{String_And_BitOperator} 'And' negated?='!'? '(' connects+=String_ExpressionOperator (','
	//	connects+=String_ExpressionOperator)+ ')';
	public String_And_BitOperatorElements getString_And_BitOperatorAccess() {
		return pString_And_BitOperator;
	}
	
	public ParserRule getString_And_BitOperatorRule() {
		return getString_And_BitOperatorAccess().getRule();
	}
	
	//String_Or_BitOperator:
	//	{String_Or_BitOperator} 'Or' negated?='!'? '(' connects+=String_ExpressionOperator (','
	//	connects+=String_ExpressionOperator)+ ')';
	public String_Or_BitOperatorElements getString_Or_BitOperatorAccess() {
		return pString_Or_BitOperator;
	}
	
	public ParserRule getString_Or_BitOperatorRule() {
		return getString_Or_BitOperatorAccess().getRule();
	}
	
	//String_FunctionalOperator_Begin String_FunctionalOperator:
	//	'self' String_FunctionalOperator;
	public String_FunctionalOperator_BeginElements getString_FunctionalOperator_BeginAccess() {
		return pString_FunctionalOperator_Begin;
	}
	
	public ParserRule getString_FunctionalOperator_BeginRule() {
		return getString_FunctionalOperator_BeginAccess().getRule();
	}
	
	//Boolean_ExpressionOperator:
	//	Boolean_BitOperator | Boolean_FunctionalOperator_Begin;
	public Boolean_ExpressionOperatorElements getBoolean_ExpressionOperatorAccess() {
		return pBoolean_ExpressionOperator;
	}
	
	public ParserRule getBoolean_ExpressionOperatorRule() {
		return getBoolean_ExpressionOperatorAccess().getRule();
	}
	
	//Boolean_BitOperator:
	//	Boolean_And_BitOperator | Boolean_Or_BitOperator;
	public Boolean_BitOperatorElements getBoolean_BitOperatorAccess() {
		return pBoolean_BitOperator;
	}
	
	public ParserRule getBoolean_BitOperatorRule() {
		return getBoolean_BitOperatorAccess().getRule();
	}
	
	//Boolean_And_BitOperator:
	//	{Boolean_And_BitOperator} 'And' negated?='!'? '(' connects+=Boolean_ExpressionOperator (','
	//	connects+=Boolean_ExpressionOperator)+ ')';
	public Boolean_And_BitOperatorElements getBoolean_And_BitOperatorAccess() {
		return pBoolean_And_BitOperator;
	}
	
	public ParserRule getBoolean_And_BitOperatorRule() {
		return getBoolean_And_BitOperatorAccess().getRule();
	}
	
	//Boolean_Or_BitOperator:
	//	{Boolean_Or_BitOperator} 'Or' negated?='!'? '(' connects+=Boolean_ExpressionOperator (','
	//	connects+=Boolean_ExpressionOperator)+ ')';
	public Boolean_Or_BitOperatorElements getBoolean_Or_BitOperatorAccess() {
		return pBoolean_Or_BitOperator;
	}
	
	public ParserRule getBoolean_Or_BitOperatorRule() {
		return getBoolean_Or_BitOperatorAccess().getRule();
	}
	
	//Boolean_FunctionalOperator_Begin Boolean_FunctionalOperator:
	//	'self' Boolean_FunctionalOperator;
	public Boolean_FunctionalOperator_BeginElements getBoolean_FunctionalOperator_BeginAccess() {
		return pBoolean_FunctionalOperator_Begin;
	}
	
	public ParserRule getBoolean_FunctionalOperator_BeginRule() {
		return getBoolean_FunctionalOperator_BeginAccess().getRule();
	}
	
	//Double_ExpressionOperator:
	//	Double_BitOperator | Double_FunctionalOperator_Begin;
	public Double_ExpressionOperatorElements getDouble_ExpressionOperatorAccess() {
		return pDouble_ExpressionOperator;
	}
	
	public ParserRule getDouble_ExpressionOperatorRule() {
		return getDouble_ExpressionOperatorAccess().getRule();
	}
	
	//Double_BitOperator:
	//	Double_And_BitOperator | Double_Or_BitOperator;
	public Double_BitOperatorElements getDouble_BitOperatorAccess() {
		return pDouble_BitOperator;
	}
	
	public ParserRule getDouble_BitOperatorRule() {
		return getDouble_BitOperatorAccess().getRule();
	}
	
	//Double_And_BitOperator:
	//	{Double_And_BitOperator} 'And' negated?='!'? '(' connects+=Double_ExpressionOperator (','
	//	connects+=Double_ExpressionOperator)+ ')';
	public Double_And_BitOperatorElements getDouble_And_BitOperatorAccess() {
		return pDouble_And_BitOperator;
	}
	
	public ParserRule getDouble_And_BitOperatorRule() {
		return getDouble_And_BitOperatorAccess().getRule();
	}
	
	//Double_Or_BitOperator:
	//	{Double_Or_BitOperator} 'Or' negated?='!'? '(' connects+=Double_ExpressionOperator (','
	//	connects+=Double_ExpressionOperator)+ ')';
	public Double_Or_BitOperatorElements getDouble_Or_BitOperatorAccess() {
		return pDouble_Or_BitOperator;
	}
	
	public ParserRule getDouble_Or_BitOperatorRule() {
		return getDouble_Or_BitOperatorAccess().getRule();
	}
	
	//Double_FunctionalOperator_Begin Double_FunctionalOperator:
	//	'self' Double_FunctionalOperator;
	public Double_FunctionalOperator_BeginElements getDouble_FunctionalOperator_BeginAccess() {
		return pDouble_FunctionalOperator_Begin;
	}
	
	public ParserRule getDouble_FunctionalOperator_BeginRule() {
		return getDouble_FunctionalOperator_BeginAccess().getRule();
	}
	
	//Integer_FunctionalOperator:
	//	doubleValue_FunctionalOperator | Number_Integer_greaterThan_FunctionalOperator |
	//	Number_Integer_greaterEquals_FunctionalOperator | Number_Integer_smallerThan_FunctionalOperator |
	//	Number_Integer_smallerEquals_FunctionalOperator | Number_Integer_Object_Number_equals_FunctionalOperator |
	//	Number_Integer_Object_Number_toString_FunctionalOperator | Number_Integer_Object_Number_hashCode_FunctionalOperator;
	public Integer_FunctionalOperatorElements getInteger_FunctionalOperatorAccess() {
		return pInteger_FunctionalOperator;
	}
	
	public ParserRule getInteger_FunctionalOperatorRule() {
		return getInteger_FunctionalOperatorAccess().getRule();
	}
	
	//Number_FunctionalOperator:
	//	greaterThan_FunctionalOperator | greaterEquals_FunctionalOperator | smallerThan_FunctionalOperator |
	//	smallerEquals_FunctionalOperator | Object_Number_equals_FunctionalOperator |
	//	Object_Number_toString_FunctionalOperator | Object_Number_hashCode_FunctionalOperator;
	public Number_FunctionalOperatorElements getNumber_FunctionalOperatorAccess() {
		return pNumber_FunctionalOperator;
	}
	
	public ParserRule getNumber_FunctionalOperatorRule() {
		return getNumber_FunctionalOperatorAccess().getRule();
	}
	
	//Character_FunctionalOperator:
	//	Object_Character_equals_FunctionalOperator | Object_Character_toString_FunctionalOperator |
	//	Object_Character_hashCode_FunctionalOperator;
	public Character_FunctionalOperatorElements getCharacter_FunctionalOperatorAccess() {
		return pCharacter_FunctionalOperator;
	}
	
	public ParserRule getCharacter_FunctionalOperatorRule() {
		return getCharacter_FunctionalOperatorAccess().getRule();
	}
	
	//CharSequence_FunctionalOperator:
	//	length_FunctionalOperator | Object_CharSequence_equals_FunctionalOperator |
	//	Object_CharSequence_toString_FunctionalOperator | Object_CharSequence_hashCode_FunctionalOperator;
	public CharSequence_FunctionalOperatorElements getCharSequence_FunctionalOperatorAccess() {
		return pCharSequence_FunctionalOperator;
	}
	
	public ParserRule getCharSequence_FunctionalOperatorRule() {
		return getCharSequence_FunctionalOperatorAccess().getRule();
	}
	
	//Object_FunctionalOperator:
	//	equals_FunctionalOperator | toString_FunctionalOperator | hashCode_FunctionalOperator;
	public Object_FunctionalOperatorElements getObject_FunctionalOperatorAccess() {
		return pObject_FunctionalOperator;
	}
	
	public ParserRule getObject_FunctionalOperatorRule() {
		return getObject_FunctionalOperatorAccess().getRule();
	}
	
	//String_FunctionalOperator:
	//	charAt_FunctionalOperator | codePointAt_FunctionalOperator | codePointBefore_FunctionalOperator |
	//	compareToString_FunctionalOperator | compareToStringIgnoreCase_FunctionalOperator | contains_FunctionalOperator |
	//	substring_FunctionalOperator | concat_FunctionalOperator | endsWith_FunctionalOperator |
	//	equalsIgnoreCase_FunctionalOperator | indexOfString_FunctionalOperator | indexOfChar_FunctionalOperator |
	//	indexOfCharFromIndex_FunctionalOperator | isEmpty_FunctionalOperator | offsetByCodePoints_FunctionalOperator |
	//	startsWith_FunctionalOperator | startsWithOffset_FunctionalOperator | toLowerCase_FunctionalOperator |
	//	toUpperCase_FunctionalOperator | trim_FunctionalOperator | CharSequence_String_length_FunctionalOperator |
	//	CharSequence_String_Object_CharSequence_equals_FunctionalOperator |
	//	CharSequence_String_Object_CharSequence_toString_FunctionalOperator |
	//	CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator;
	public String_FunctionalOperatorElements getString_FunctionalOperatorAccess() {
		return pString_FunctionalOperator;
	}
	
	public ParserRule getString_FunctionalOperatorRule() {
		return getString_FunctionalOperatorAccess().getRule();
	}
	
	//Boolean_FunctionalOperator:
	//	parseBoolean_FunctionalOperator | compareToBoolean_FunctionalOperator | Object_Boolean_equals_FunctionalOperator |
	//	Object_Boolean_toString_FunctionalOperator | Object_Boolean_hashCode_FunctionalOperator;
	public Boolean_FunctionalOperatorElements getBoolean_FunctionalOperatorAccess() {
		return pBoolean_FunctionalOperator;
	}
	
	public ParserRule getBoolean_FunctionalOperatorRule() {
		return getBoolean_FunctionalOperatorAccess().getRule();
	}
	
	//Double_FunctionalOperator:
	//	Number_Double_greaterThan_FunctionalOperator | Number_Double_greaterEquals_FunctionalOperator |
	//	Number_Double_smallerThan_FunctionalOperator | Number_Double_smallerEquals_FunctionalOperator |
	//	Number_Double_Object_Number_equals_FunctionalOperator | Number_Double_Object_Number_toString_FunctionalOperator |
	//	Number_Double_Object_Number_hashCode_FunctionalOperator;
	public Double_FunctionalOperatorElements getDouble_FunctionalOperatorAccess() {
		return pDouble_FunctionalOperator;
	}
	
	public ParserRule getDouble_FunctionalOperatorRule() {
		return getDouble_FunctionalOperatorAccess().getRule();
	}
	
	//doubleValue_FunctionalOperator:
	//	{doubleValue_FunctionalOperator} '.doubleValue' '()' operator=Double_FunctionalOperator?;
	public DoubleValue_FunctionalOperatorElements getDoubleValue_FunctionalOperatorAccess() {
		return pDoubleValue_FunctionalOperator;
	}
	
	public ParserRule getDoubleValue_FunctionalOperatorRule() {
		return getDoubleValue_FunctionalOperatorAccess().getRule();
	}
	
	//Number_Integer_greaterThan_FunctionalOperator:
	//	{Number_Integer_greaterThan_FunctionalOperator} '.greaterThan' negated?='!'? '(' i=Number_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public Number_Integer_greaterThan_FunctionalOperatorElements getNumber_Integer_greaterThan_FunctionalOperatorAccess() {
		return pNumber_Integer_greaterThan_FunctionalOperator;
	}
	
	public ParserRule getNumber_Integer_greaterThan_FunctionalOperatorRule() {
		return getNumber_Integer_greaterThan_FunctionalOperatorAccess().getRule();
	}
	
	//Number_Integer_greaterEquals_FunctionalOperator:
	//	{Number_Integer_greaterEquals_FunctionalOperator} '.greaterEquals' negated?='!'? '(' i=Number_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public Number_Integer_greaterEquals_FunctionalOperatorElements getNumber_Integer_greaterEquals_FunctionalOperatorAccess() {
		return pNumber_Integer_greaterEquals_FunctionalOperator;
	}
	
	public ParserRule getNumber_Integer_greaterEquals_FunctionalOperatorRule() {
		return getNumber_Integer_greaterEquals_FunctionalOperatorAccess().getRule();
	}
	
	//Number_Integer_smallerThan_FunctionalOperator:
	//	{Number_Integer_smallerThan_FunctionalOperator} '.smallerThan' negated?='!'? '(' i=Number_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public Number_Integer_smallerThan_FunctionalOperatorElements getNumber_Integer_smallerThan_FunctionalOperatorAccess() {
		return pNumber_Integer_smallerThan_FunctionalOperator;
	}
	
	public ParserRule getNumber_Integer_smallerThan_FunctionalOperatorRule() {
		return getNumber_Integer_smallerThan_FunctionalOperatorAccess().getRule();
	}
	
	//Number_Integer_smallerEquals_FunctionalOperator:
	//	{Number_Integer_smallerEquals_FunctionalOperator} '.smallerEquals' negated?='!'? '(' i=Number_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public Number_Integer_smallerEquals_FunctionalOperatorElements getNumber_Integer_smallerEquals_FunctionalOperatorAccess() {
		return pNumber_Integer_smallerEquals_FunctionalOperator;
	}
	
	public ParserRule getNumber_Integer_smallerEquals_FunctionalOperatorRule() {
		return getNumber_Integer_smallerEquals_FunctionalOperatorAccess().getRule();
	}
	
	//Number_Integer_Object_Number_equals_FunctionalOperator:
	//	{Number_Integer_Object_Number_equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter
	//	')' operator=Boolean_FunctionalOperator?;
	public Number_Integer_Object_Number_equals_FunctionalOperatorElements getNumber_Integer_Object_Number_equals_FunctionalOperatorAccess() {
		return pNumber_Integer_Object_Number_equals_FunctionalOperator;
	}
	
	public ParserRule getNumber_Integer_Object_Number_equals_FunctionalOperatorRule() {
		return getNumber_Integer_Object_Number_equals_FunctionalOperatorAccess().getRule();
	}
	
	//Number_Integer_Object_Number_toString_FunctionalOperator:
	//	{Number_Integer_Object_Number_toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?;
	public Number_Integer_Object_Number_toString_FunctionalOperatorElements getNumber_Integer_Object_Number_toString_FunctionalOperatorAccess() {
		return pNumber_Integer_Object_Number_toString_FunctionalOperator;
	}
	
	public ParserRule getNumber_Integer_Object_Number_toString_FunctionalOperatorRule() {
		return getNumber_Integer_Object_Number_toString_FunctionalOperatorAccess().getRule();
	}
	
	//Number_Integer_Object_Number_hashCode_FunctionalOperator:
	//	{Number_Integer_Object_Number_hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?;
	public Number_Integer_Object_Number_hashCode_FunctionalOperatorElements getNumber_Integer_Object_Number_hashCode_FunctionalOperatorAccess() {
		return pNumber_Integer_Object_Number_hashCode_FunctionalOperator;
	}
	
	public ParserRule getNumber_Integer_Object_Number_hashCode_FunctionalOperatorRule() {
		return getNumber_Integer_Object_Number_hashCode_FunctionalOperatorAccess().getRule();
	}
	
	//greaterThan_FunctionalOperator:
	//	{greaterThan_FunctionalOperator} '.greaterThan' negated?='!'? '(' i=Number_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public GreaterThan_FunctionalOperatorElements getGreaterThan_FunctionalOperatorAccess() {
		return pGreaterThan_FunctionalOperator;
	}
	
	public ParserRule getGreaterThan_FunctionalOperatorRule() {
		return getGreaterThan_FunctionalOperatorAccess().getRule();
	}
	
	//greaterEquals_FunctionalOperator:
	//	{greaterEquals_FunctionalOperator} '.greaterEquals' negated?='!'? '(' i=Number_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public GreaterEquals_FunctionalOperatorElements getGreaterEquals_FunctionalOperatorAccess() {
		return pGreaterEquals_FunctionalOperator;
	}
	
	public ParserRule getGreaterEquals_FunctionalOperatorRule() {
		return getGreaterEquals_FunctionalOperatorAccess().getRule();
	}
	
	//smallerThan_FunctionalOperator:
	//	{smallerThan_FunctionalOperator} '.smallerThan' negated?='!'? '(' i=Number_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public SmallerThan_FunctionalOperatorElements getSmallerThan_FunctionalOperatorAccess() {
		return pSmallerThan_FunctionalOperator;
	}
	
	public ParserRule getSmallerThan_FunctionalOperatorRule() {
		return getSmallerThan_FunctionalOperatorAccess().getRule();
	}
	
	//smallerEquals_FunctionalOperator:
	//	{smallerEquals_FunctionalOperator} '.smallerEquals' negated?='!'? '(' i=Number_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public SmallerEquals_FunctionalOperatorElements getSmallerEquals_FunctionalOperatorAccess() {
		return pSmallerEquals_FunctionalOperator;
	}
	
	public ParserRule getSmallerEquals_FunctionalOperatorRule() {
		return getSmallerEquals_FunctionalOperatorAccess().getRule();
	}
	
	//Object_Number_equals_FunctionalOperator:
	//	{Object_Number_equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public Object_Number_equals_FunctionalOperatorElements getObject_Number_equals_FunctionalOperatorAccess() {
		return pObject_Number_equals_FunctionalOperator;
	}
	
	public ParserRule getObject_Number_equals_FunctionalOperatorRule() {
		return getObject_Number_equals_FunctionalOperatorAccess().getRule();
	}
	
	//Object_Number_toString_FunctionalOperator:
	//	{Object_Number_toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?;
	public Object_Number_toString_FunctionalOperatorElements getObject_Number_toString_FunctionalOperatorAccess() {
		return pObject_Number_toString_FunctionalOperator;
	}
	
	public ParserRule getObject_Number_toString_FunctionalOperatorRule() {
		return getObject_Number_toString_FunctionalOperatorAccess().getRule();
	}
	
	//Object_Number_hashCode_FunctionalOperator:
	//	{Object_Number_hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?;
	public Object_Number_hashCode_FunctionalOperatorElements getObject_Number_hashCode_FunctionalOperatorAccess() {
		return pObject_Number_hashCode_FunctionalOperator;
	}
	
	public ParserRule getObject_Number_hashCode_FunctionalOperatorRule() {
		return getObject_Number_hashCode_FunctionalOperatorAccess().getRule();
	}
	
	//Object_Character_equals_FunctionalOperator:
	//	{Object_Character_equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public Object_Character_equals_FunctionalOperatorElements getObject_Character_equals_FunctionalOperatorAccess() {
		return pObject_Character_equals_FunctionalOperator;
	}
	
	public ParserRule getObject_Character_equals_FunctionalOperatorRule() {
		return getObject_Character_equals_FunctionalOperatorAccess().getRule();
	}
	
	//Object_Character_toString_FunctionalOperator:
	//	{Object_Character_toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?;
	public Object_Character_toString_FunctionalOperatorElements getObject_Character_toString_FunctionalOperatorAccess() {
		return pObject_Character_toString_FunctionalOperator;
	}
	
	public ParserRule getObject_Character_toString_FunctionalOperatorRule() {
		return getObject_Character_toString_FunctionalOperatorAccess().getRule();
	}
	
	//Object_Character_hashCode_FunctionalOperator:
	//	{Object_Character_hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?;
	public Object_Character_hashCode_FunctionalOperatorElements getObject_Character_hashCode_FunctionalOperatorAccess() {
		return pObject_Character_hashCode_FunctionalOperator;
	}
	
	public ParserRule getObject_Character_hashCode_FunctionalOperatorRule() {
		return getObject_Character_hashCode_FunctionalOperatorAccess().getRule();
	}
	
	//length_FunctionalOperator:
	//	{length_FunctionalOperator} '.length' '()' operator=Integer_FunctionalOperator?;
	public Length_FunctionalOperatorElements getLength_FunctionalOperatorAccess() {
		return pLength_FunctionalOperator;
	}
	
	public ParserRule getLength_FunctionalOperatorRule() {
		return getLength_FunctionalOperatorAccess().getRule();
	}
	
	//Object_CharSequence_equals_FunctionalOperator:
	//	{Object_CharSequence_equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public Object_CharSequence_equals_FunctionalOperatorElements getObject_CharSequence_equals_FunctionalOperatorAccess() {
		return pObject_CharSequence_equals_FunctionalOperator;
	}
	
	public ParserRule getObject_CharSequence_equals_FunctionalOperatorRule() {
		return getObject_CharSequence_equals_FunctionalOperatorAccess().getRule();
	}
	
	//Object_CharSequence_toString_FunctionalOperator:
	//	{Object_CharSequence_toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?;
	public Object_CharSequence_toString_FunctionalOperatorElements getObject_CharSequence_toString_FunctionalOperatorAccess() {
		return pObject_CharSequence_toString_FunctionalOperator;
	}
	
	public ParserRule getObject_CharSequence_toString_FunctionalOperatorRule() {
		return getObject_CharSequence_toString_FunctionalOperatorAccess().getRule();
	}
	
	//Object_CharSequence_hashCode_FunctionalOperator:
	//	{Object_CharSequence_hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?;
	public Object_CharSequence_hashCode_FunctionalOperatorElements getObject_CharSequence_hashCode_FunctionalOperatorAccess() {
		return pObject_CharSequence_hashCode_FunctionalOperator;
	}
	
	public ParserRule getObject_CharSequence_hashCode_FunctionalOperatorRule() {
		return getObject_CharSequence_hashCode_FunctionalOperatorAccess().getRule();
	}
	
	//equals_FunctionalOperator:
	//	{equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public Equals_FunctionalOperatorElements getEquals_FunctionalOperatorAccess() {
		return pEquals_FunctionalOperator;
	}
	
	public ParserRule getEquals_FunctionalOperatorRule() {
		return getEquals_FunctionalOperatorAccess().getRule();
	}
	
	//toString_FunctionalOperator:
	//	{toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?;
	public ToString_FunctionalOperatorElements getToString_FunctionalOperatorAccess() {
		return pToString_FunctionalOperator;
	}
	
	public ParserRule getToString_FunctionalOperatorRule() {
		return getToString_FunctionalOperatorAccess().getRule();
	}
	
	//hashCode_FunctionalOperator:
	//	{hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?;
	public HashCode_FunctionalOperatorElements getHashCode_FunctionalOperatorAccess() {
		return pHashCode_FunctionalOperator;
	}
	
	public ParserRule getHashCode_FunctionalOperatorRule() {
		return getHashCode_FunctionalOperatorAccess().getRule();
	}
	
	//charAt_FunctionalOperator:
	//	{charAt_FunctionalOperator} '.charAt' '(' i=Integer_FunctionalParameter ')' operator=Character_FunctionalOperator?;
	public CharAt_FunctionalOperatorElements getCharAt_FunctionalOperatorAccess() {
		return pCharAt_FunctionalOperator;
	}
	
	public ParserRule getCharAt_FunctionalOperatorRule() {
		return getCharAt_FunctionalOperatorAccess().getRule();
	}
	
	//codePointAt_FunctionalOperator:
	//	{codePointAt_FunctionalOperator} '.codePointAt' '(' index=Integer_FunctionalParameter ')'
	//	operator=Integer_FunctionalOperator?;
	public CodePointAt_FunctionalOperatorElements getCodePointAt_FunctionalOperatorAccess() {
		return pCodePointAt_FunctionalOperator;
	}
	
	public ParserRule getCodePointAt_FunctionalOperatorRule() {
		return getCodePointAt_FunctionalOperatorAccess().getRule();
	}
	
	//codePointBefore_FunctionalOperator:
	//	{codePointBefore_FunctionalOperator} '.codePointBefore' '(' index=Integer_FunctionalParameter ')'
	//	operator=Integer_FunctionalOperator?;
	public CodePointBefore_FunctionalOperatorElements getCodePointBefore_FunctionalOperatorAccess() {
		return pCodePointBefore_FunctionalOperator;
	}
	
	public ParserRule getCodePointBefore_FunctionalOperatorRule() {
		return getCodePointBefore_FunctionalOperatorAccess().getRule();
	}
	
	//compareToString_FunctionalOperator:
	//	{compareToString_FunctionalOperator} '.compareToString' '(' anotherString=String_FunctionalParameter ')'
	//	operator=Integer_FunctionalOperator?;
	public CompareToString_FunctionalOperatorElements getCompareToString_FunctionalOperatorAccess() {
		return pCompareToString_FunctionalOperator;
	}
	
	public ParserRule getCompareToString_FunctionalOperatorRule() {
		return getCompareToString_FunctionalOperatorAccess().getRule();
	}
	
	//compareToStringIgnoreCase_FunctionalOperator:
	//	{compareToStringIgnoreCase_FunctionalOperator} '.compareToStringIgnoreCase' '(' str=String_FunctionalParameter ')'
	//	operator=Integer_FunctionalOperator?;
	public CompareToStringIgnoreCase_FunctionalOperatorElements getCompareToStringIgnoreCase_FunctionalOperatorAccess() {
		return pCompareToStringIgnoreCase_FunctionalOperator;
	}
	
	public ParserRule getCompareToStringIgnoreCase_FunctionalOperatorRule() {
		return getCompareToStringIgnoreCase_FunctionalOperatorAccess().getRule();
	}
	
	//contains_FunctionalOperator:
	//	{contains_FunctionalOperator} '.contains' negated?='!'? '(' charSequence=CharSequence_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public Contains_FunctionalOperatorElements getContains_FunctionalOperatorAccess() {
		return pContains_FunctionalOperator;
	}
	
	public ParserRule getContains_FunctionalOperatorRule() {
		return getContains_FunctionalOperatorAccess().getRule();
	}
	
	//substring_FunctionalOperator:
	//	{substring_FunctionalOperator} '.substring' '(' startIndex=Integer_FunctionalParameter ','
	//	endIndex=Integer_FunctionalParameter ')' operator=String_FunctionalOperator?;
	public Substring_FunctionalOperatorElements getSubstring_FunctionalOperatorAccess() {
		return pSubstring_FunctionalOperator;
	}
	
	public ParserRule getSubstring_FunctionalOperatorRule() {
		return getSubstring_FunctionalOperatorAccess().getRule();
	}
	
	//concat_FunctionalOperator:
	//	{concat_FunctionalOperator} '.concat' '(' str=String_FunctionalParameter ')' operator=String_FunctionalOperator?;
	public Concat_FunctionalOperatorElements getConcat_FunctionalOperatorAccess() {
		return pConcat_FunctionalOperator;
	}
	
	public ParserRule getConcat_FunctionalOperatorRule() {
		return getConcat_FunctionalOperatorAccess().getRule();
	}
	
	//endsWith_FunctionalOperator:
	//	{endsWith_FunctionalOperator} '.endsWith' negated?='!'? '(' suffix=String_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public EndsWith_FunctionalOperatorElements getEndsWith_FunctionalOperatorAccess() {
		return pEndsWith_FunctionalOperator;
	}
	
	public ParserRule getEndsWith_FunctionalOperatorRule() {
		return getEndsWith_FunctionalOperatorAccess().getRule();
	}
	
	//equalsIgnoreCase_FunctionalOperator:
	//	{equalsIgnoreCase_FunctionalOperator} '.equalsIgnoreCase' negated?='!'? '(' anotherString=String_FunctionalParameter
	//	')' operator=Boolean_FunctionalOperator?;
	public EqualsIgnoreCase_FunctionalOperatorElements getEqualsIgnoreCase_FunctionalOperatorAccess() {
		return pEqualsIgnoreCase_FunctionalOperator;
	}
	
	public ParserRule getEqualsIgnoreCase_FunctionalOperatorRule() {
		return getEqualsIgnoreCase_FunctionalOperatorAccess().getRule();
	}
	
	//indexOfString_FunctionalOperator:
	//	{indexOfString_FunctionalOperator} '.indexOfString' '(' str=String_FunctionalParameter ')'
	//	operator=Integer_FunctionalOperator?;
	public IndexOfString_FunctionalOperatorElements getIndexOfString_FunctionalOperatorAccess() {
		return pIndexOfString_FunctionalOperator;
	}
	
	public ParserRule getIndexOfString_FunctionalOperatorRule() {
		return getIndexOfString_FunctionalOperatorAccess().getRule();
	}
	
	//indexOfChar_FunctionalOperator:
	//	{indexOfChar_FunctionalOperator} '.indexOfChar' '(' ch=Integer_FunctionalParameter ')'
	//	operator=Integer_FunctionalOperator?;
	public IndexOfChar_FunctionalOperatorElements getIndexOfChar_FunctionalOperatorAccess() {
		return pIndexOfChar_FunctionalOperator;
	}
	
	public ParserRule getIndexOfChar_FunctionalOperatorRule() {
		return getIndexOfChar_FunctionalOperatorAccess().getRule();
	}
	
	//indexOfCharFromIndex_FunctionalOperator:
	//	{indexOfCharFromIndex_FunctionalOperator} '.indexOfCharFromIndex' '(' ch=Integer_FunctionalParameter ','
	//	fromIndex=Integer_FunctionalParameter ')' operator=Integer_FunctionalOperator?;
	public IndexOfCharFromIndex_FunctionalOperatorElements getIndexOfCharFromIndex_FunctionalOperatorAccess() {
		return pIndexOfCharFromIndex_FunctionalOperator;
	}
	
	public ParserRule getIndexOfCharFromIndex_FunctionalOperatorRule() {
		return getIndexOfCharFromIndex_FunctionalOperatorAccess().getRule();
	}
	
	//isEmpty_FunctionalOperator:
	//	{isEmpty_FunctionalOperator} '.isEmpty' negated?='!'? '()' operator=Boolean_FunctionalOperator?;
	public IsEmpty_FunctionalOperatorElements getIsEmpty_FunctionalOperatorAccess() {
		return pIsEmpty_FunctionalOperator;
	}
	
	public ParserRule getIsEmpty_FunctionalOperatorRule() {
		return getIsEmpty_FunctionalOperatorAccess().getRule();
	}
	
	//offsetByCodePoints_FunctionalOperator:
	//	{offsetByCodePoints_FunctionalOperator} '.offsetByCodePoints' '(' index=Integer_FunctionalParameter ','
	//	codePointOffset=Integer_FunctionalParameter ')' operator=Integer_FunctionalOperator?;
	public OffsetByCodePoints_FunctionalOperatorElements getOffsetByCodePoints_FunctionalOperatorAccess() {
		return pOffsetByCodePoints_FunctionalOperator;
	}
	
	public ParserRule getOffsetByCodePoints_FunctionalOperatorRule() {
		return getOffsetByCodePoints_FunctionalOperatorAccess().getRule();
	}
	
	//startsWith_FunctionalOperator:
	//	{startsWith_FunctionalOperator} '.startsWith' negated?='!'? '(' prefix=String_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public StartsWith_FunctionalOperatorElements getStartsWith_FunctionalOperatorAccess() {
		return pStartsWith_FunctionalOperator;
	}
	
	public ParserRule getStartsWith_FunctionalOperatorRule() {
		return getStartsWith_FunctionalOperatorAccess().getRule();
	}
	
	//startsWithOffset_FunctionalOperator:
	//	{startsWithOffset_FunctionalOperator} '.startsWithOffset' negated?='!'? '(' prefix=String_FunctionalParameter ','
	//	toffset=Integer_FunctionalParameter ')' operator=Boolean_FunctionalOperator?;
	public StartsWithOffset_FunctionalOperatorElements getStartsWithOffset_FunctionalOperatorAccess() {
		return pStartsWithOffset_FunctionalOperator;
	}
	
	public ParserRule getStartsWithOffset_FunctionalOperatorRule() {
		return getStartsWithOffset_FunctionalOperatorAccess().getRule();
	}
	
	//toLowerCase_FunctionalOperator:
	//	{toLowerCase_FunctionalOperator} '.toLowerCase' '()' operator=String_FunctionalOperator?;
	public ToLowerCase_FunctionalOperatorElements getToLowerCase_FunctionalOperatorAccess() {
		return pToLowerCase_FunctionalOperator;
	}
	
	public ParserRule getToLowerCase_FunctionalOperatorRule() {
		return getToLowerCase_FunctionalOperatorAccess().getRule();
	}
	
	//toUpperCase_FunctionalOperator:
	//	{toUpperCase_FunctionalOperator} '.toUpperCase' '()' operator=String_FunctionalOperator?;
	public ToUpperCase_FunctionalOperatorElements getToUpperCase_FunctionalOperatorAccess() {
		return pToUpperCase_FunctionalOperator;
	}
	
	public ParserRule getToUpperCase_FunctionalOperatorRule() {
		return getToUpperCase_FunctionalOperatorAccess().getRule();
	}
	
	//trim_FunctionalOperator:
	//	{trim_FunctionalOperator} '.trim' '()' operator=String_FunctionalOperator?;
	public Trim_FunctionalOperatorElements getTrim_FunctionalOperatorAccess() {
		return pTrim_FunctionalOperator;
	}
	
	public ParserRule getTrim_FunctionalOperatorRule() {
		return getTrim_FunctionalOperatorAccess().getRule();
	}
	
	//CharSequence_String_length_FunctionalOperator:
	//	{CharSequence_String_length_FunctionalOperator} '.length' '()' operator=Integer_FunctionalOperator?;
	public CharSequence_String_length_FunctionalOperatorElements getCharSequence_String_length_FunctionalOperatorAccess() {
		return pCharSequence_String_length_FunctionalOperator;
	}
	
	public ParserRule getCharSequence_String_length_FunctionalOperatorRule() {
		return getCharSequence_String_length_FunctionalOperatorAccess().getRule();
	}
	
	//CharSequence_String_Object_CharSequence_equals_FunctionalOperator:
	//	{CharSequence_String_Object_CharSequence_equals_FunctionalOperator} '.equals' negated?='!'? '('
	//	obj=Object_FunctionalParameter ')' operator=Boolean_FunctionalOperator?;
	public CharSequence_String_Object_CharSequence_equals_FunctionalOperatorElements getCharSequence_String_Object_CharSequence_equals_FunctionalOperatorAccess() {
		return pCharSequence_String_Object_CharSequence_equals_FunctionalOperator;
	}
	
	public ParserRule getCharSequence_String_Object_CharSequence_equals_FunctionalOperatorRule() {
		return getCharSequence_String_Object_CharSequence_equals_FunctionalOperatorAccess().getRule();
	}
	
	//CharSequence_String_Object_CharSequence_toString_FunctionalOperator:
	//	{CharSequence_String_Object_CharSequence_toString_FunctionalOperator} '.toString' '()'
	//	operator=String_FunctionalOperator?;
	public CharSequence_String_Object_CharSequence_toString_FunctionalOperatorElements getCharSequence_String_Object_CharSequence_toString_FunctionalOperatorAccess() {
		return pCharSequence_String_Object_CharSequence_toString_FunctionalOperator;
	}
	
	public ParserRule getCharSequence_String_Object_CharSequence_toString_FunctionalOperatorRule() {
		return getCharSequence_String_Object_CharSequence_toString_FunctionalOperatorAccess().getRule();
	}
	
	//CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator:
	//	{CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator} '.hashCode' '()'
	//	operator=Integer_FunctionalOperator?;
	public CharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorElements getCharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorAccess() {
		return pCharSequence_String_Object_CharSequence_hashCode_FunctionalOperator;
	}
	
	public ParserRule getCharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorRule() {
		return getCharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorAccess().getRule();
	}
	
	//parseBoolean_FunctionalOperator:
	//	{parseBoolean_FunctionalOperator} '.parseBoolean' negated?='!'? '(' s=String_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public ParseBoolean_FunctionalOperatorElements getParseBoolean_FunctionalOperatorAccess() {
		return pParseBoolean_FunctionalOperator;
	}
	
	public ParserRule getParseBoolean_FunctionalOperatorRule() {
		return getParseBoolean_FunctionalOperatorAccess().getRule();
	}
	
	//compareToBoolean_FunctionalOperator:
	//	{compareToBoolean_FunctionalOperator} '.compareToBoolean' '(' b=Boolean_FunctionalParameter ')'
	//	operator=Integer_FunctionalOperator?;
	public CompareToBoolean_FunctionalOperatorElements getCompareToBoolean_FunctionalOperatorAccess() {
		return pCompareToBoolean_FunctionalOperator;
	}
	
	public ParserRule getCompareToBoolean_FunctionalOperatorRule() {
		return getCompareToBoolean_FunctionalOperatorAccess().getRule();
	}
	
	//Object_Boolean_equals_FunctionalOperator:
	//	{Object_Boolean_equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public Object_Boolean_equals_FunctionalOperatorElements getObject_Boolean_equals_FunctionalOperatorAccess() {
		return pObject_Boolean_equals_FunctionalOperator;
	}
	
	public ParserRule getObject_Boolean_equals_FunctionalOperatorRule() {
		return getObject_Boolean_equals_FunctionalOperatorAccess().getRule();
	}
	
	//Object_Boolean_toString_FunctionalOperator:
	//	{Object_Boolean_toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?;
	public Object_Boolean_toString_FunctionalOperatorElements getObject_Boolean_toString_FunctionalOperatorAccess() {
		return pObject_Boolean_toString_FunctionalOperator;
	}
	
	public ParserRule getObject_Boolean_toString_FunctionalOperatorRule() {
		return getObject_Boolean_toString_FunctionalOperatorAccess().getRule();
	}
	
	//Object_Boolean_hashCode_FunctionalOperator:
	//	{Object_Boolean_hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?;
	public Object_Boolean_hashCode_FunctionalOperatorElements getObject_Boolean_hashCode_FunctionalOperatorAccess() {
		return pObject_Boolean_hashCode_FunctionalOperator;
	}
	
	public ParserRule getObject_Boolean_hashCode_FunctionalOperatorRule() {
		return getObject_Boolean_hashCode_FunctionalOperatorAccess().getRule();
	}
	
	//Number_Double_greaterThan_FunctionalOperator:
	//	{Number_Double_greaterThan_FunctionalOperator} '.greaterThan' negated?='!'? '(' i=Number_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public Number_Double_greaterThan_FunctionalOperatorElements getNumber_Double_greaterThan_FunctionalOperatorAccess() {
		return pNumber_Double_greaterThan_FunctionalOperator;
	}
	
	public ParserRule getNumber_Double_greaterThan_FunctionalOperatorRule() {
		return getNumber_Double_greaterThan_FunctionalOperatorAccess().getRule();
	}
	
	//Number_Double_greaterEquals_FunctionalOperator:
	//	{Number_Double_greaterEquals_FunctionalOperator} '.greaterEquals' negated?='!'? '(' i=Number_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public Number_Double_greaterEquals_FunctionalOperatorElements getNumber_Double_greaterEquals_FunctionalOperatorAccess() {
		return pNumber_Double_greaterEquals_FunctionalOperator;
	}
	
	public ParserRule getNumber_Double_greaterEquals_FunctionalOperatorRule() {
		return getNumber_Double_greaterEquals_FunctionalOperatorAccess().getRule();
	}
	
	//Number_Double_smallerThan_FunctionalOperator:
	//	{Number_Double_smallerThan_FunctionalOperator} '.smallerThan' negated?='!'? '(' i=Number_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public Number_Double_smallerThan_FunctionalOperatorElements getNumber_Double_smallerThan_FunctionalOperatorAccess() {
		return pNumber_Double_smallerThan_FunctionalOperator;
	}
	
	public ParserRule getNumber_Double_smallerThan_FunctionalOperatorRule() {
		return getNumber_Double_smallerThan_FunctionalOperatorAccess().getRule();
	}
	
	//Number_Double_smallerEquals_FunctionalOperator:
	//	{Number_Double_smallerEquals_FunctionalOperator} '.smallerEquals' negated?='!'? '(' i=Number_FunctionalParameter ')'
	//	operator=Boolean_FunctionalOperator?;
	public Number_Double_smallerEquals_FunctionalOperatorElements getNumber_Double_smallerEquals_FunctionalOperatorAccess() {
		return pNumber_Double_smallerEquals_FunctionalOperator;
	}
	
	public ParserRule getNumber_Double_smallerEquals_FunctionalOperatorRule() {
		return getNumber_Double_smallerEquals_FunctionalOperatorAccess().getRule();
	}
	
	//Number_Double_Object_Number_equals_FunctionalOperator:
	//	{Number_Double_Object_Number_equals_FunctionalOperator} '.equals' negated?='!'? '(' obj=Object_FunctionalParameter
	//	')' operator=Boolean_FunctionalOperator?;
	public Number_Double_Object_Number_equals_FunctionalOperatorElements getNumber_Double_Object_Number_equals_FunctionalOperatorAccess() {
		return pNumber_Double_Object_Number_equals_FunctionalOperator;
	}
	
	public ParserRule getNumber_Double_Object_Number_equals_FunctionalOperatorRule() {
		return getNumber_Double_Object_Number_equals_FunctionalOperatorAccess().getRule();
	}
	
	//Number_Double_Object_Number_toString_FunctionalOperator:
	//	{Number_Double_Object_Number_toString_FunctionalOperator} '.toString' '()' operator=String_FunctionalOperator?;
	public Number_Double_Object_Number_toString_FunctionalOperatorElements getNumber_Double_Object_Number_toString_FunctionalOperatorAccess() {
		return pNumber_Double_Object_Number_toString_FunctionalOperator;
	}
	
	public ParserRule getNumber_Double_Object_Number_toString_FunctionalOperatorRule() {
		return getNumber_Double_Object_Number_toString_FunctionalOperatorAccess().getRule();
	}
	
	//Number_Double_Object_Number_hashCode_FunctionalOperator:
	//	{Number_Double_Object_Number_hashCode_FunctionalOperator} '.hashCode' '()' operator=Integer_FunctionalOperator?;
	public Number_Double_Object_Number_hashCode_FunctionalOperatorElements getNumber_Double_Object_Number_hashCode_FunctionalOperatorAccess() {
		return pNumber_Double_Object_Number_hashCode_FunctionalOperator;
	}
	
	public ParserRule getNumber_Double_Object_Number_hashCode_FunctionalOperatorRule() {
		return getNumber_Double_Object_Number_hashCode_FunctionalOperatorAccess().getRule();
	}
	
	//EvaluationOperator:
	//	EvaluationBitOperator | EvaluationFunctionalOperator;
	public EvaluationOperatorElements getEvaluationOperatorAccess() {
		return pEvaluationOperator;
	}
	
	public ParserRule getEvaluationOperatorRule() {
		return getEvaluationOperatorAccess().getRule();
	}
	
	//EvaluationBitOperator:
	//	And_EvaluationBitOperator | Or_EvaluationBitOperator;
	public EvaluationBitOperatorElements getEvaluationBitOperatorAccess() {
		return pEvaluationBitOperator;
	}
	
	public ParserRule getEvaluationBitOperatorRule() {
		return getEvaluationBitOperatorAccess().getRule();
	}
	
	//And_EvaluationBitOperator:
	//	'And' negated?='!'? '(' connects+=EvaluationOperator (',' connects+=EvaluationOperator)+ ')';
	public And_EvaluationBitOperatorElements getAnd_EvaluationBitOperatorAccess() {
		return pAnd_EvaluationBitOperator;
	}
	
	public ParserRule getAnd_EvaluationBitOperatorRule() {
		return getAnd_EvaluationBitOperatorAccess().getRule();
	}
	
	//Or_EvaluationBitOperator:
	//	'Or' negated?='!'? '(' connects+=EvaluationOperator (',' connects+=EvaluationOperator)+ ')';
	public Or_EvaluationBitOperatorElements getOr_EvaluationBitOperatorAccess() {
		return pOr_EvaluationBitOperator;
	}
	
	public ParserRule getOr_EvaluationBitOperatorRule() {
		return getOr_EvaluationBitOperatorAccess().getRule();
	}
	
	//EvaluationFunctionalOperator:
	//	AggregationOperator /*| ClassOperator */;
	public EvaluationFunctionalOperatorElements getEvaluationFunctionalOperatorAccess() {
		return pEvaluationFunctionalOperator;
	}
	
	public ParserRule getEvaluationFunctionalOperatorRule() {
		return getEvaluationFunctionalOperatorAccess().getRule();
	}
	
	//AggregationOperator:
	//	CalculatingAggregationOperator | CountingAggregationOperator;
	public AggregationOperatorElements getAggregationOperatorAccess() {
		return pAggregationOperator;
	}
	
	public ParserRule getAggregationOperatorRule() {
		return getAggregationOperatorAccess().getRule();
	}
	
	//CountingAggregationOperator:
	//	Count_AggregationOperator;
	public CountingAggregationOperatorElements getCountingAggregationOperatorAccess() {
		return pCountingAggregationOperator;
	}
	
	public ParserRule getCountingAggregationOperatorRule() {
		return getCountingAggregationOperatorAccess().getRule();
	}
	
	//CalculatingAggregationOperator:
	//	Sum_AggregationOperator_Integer | Min_AggregationOperator_Integer | Max_AggregationOperator_Integer |
	//	Sum_AggregationOperator_Double | Min_AggregationOperator_Double | Max_AggregationOperator_Double;
	public CalculatingAggregationOperatorElements getCalculatingAggregationOperatorAccess() {
		return pCalculatingAggregationOperator;
	}
	
	public ParserRule getCalculatingAggregationOperatorRule() {
		return getCalculatingAggregationOperatorAccess().getRule();
	}
	
	//Count_AggregationOperator:
	//	{Count_AggregationOperator} 'count(' countable=CountableReferenceParameter ')' operator=Integer_FunctionalOperator?;
	public Count_AggregationOperatorElements getCount_AggregationOperatorAccess() {
		return pCount_AggregationOperator;
	}
	
	public ParserRule getCount_AggregationOperatorRule() {
		return getCount_AggregationOperatorAccess().getRule();
	}
	
	//Sum_AggregationOperator_Integer:
	//	{Sum_AggregationOperator_Integer} 'sum_Integer(' calculateable=Integer_CalculateableParameter ')'
	//	operator=Integer_FunctionalOperator?;
	public Sum_AggregationOperator_IntegerElements getSum_AggregationOperator_IntegerAccess() {
		return pSum_AggregationOperator_Integer;
	}
	
	public ParserRule getSum_AggregationOperator_IntegerRule() {
		return getSum_AggregationOperator_IntegerAccess().getRule();
	}
	
	//Min_AggregationOperator_Integer:
	//	{Min_AggregationOperator_Integer} 'min_Integer(' calculateable=Integer_CalculateableParameter ')'
	//	operator=Integer_FunctionalOperator?;
	public Min_AggregationOperator_IntegerElements getMin_AggregationOperator_IntegerAccess() {
		return pMin_AggregationOperator_Integer;
	}
	
	public ParserRule getMin_AggregationOperator_IntegerRule() {
		return getMin_AggregationOperator_IntegerAccess().getRule();
	}
	
	//Max_AggregationOperator_Integer:
	//	{Max_AggregationOperator_Integer} 'max_Integer(' calculateable=Integer_CalculateableParameter ')'
	//	operator=Integer_FunctionalOperator?;
	public Max_AggregationOperator_IntegerElements getMax_AggregationOperator_IntegerAccess() {
		return pMax_AggregationOperator_Integer;
	}
	
	public ParserRule getMax_AggregationOperator_IntegerRule() {
		return getMax_AggregationOperator_IntegerAccess().getRule();
	}
	
	//IntegerParseInt_ClassOperator:
	//	{IntegerParseInt_ClassOperator} 'Integer.parseInt(' calculateable=String_FunctionalParameter ')'
	//	operator=Integer_FunctionalOperator?;
	public IntegerParseInt_ClassOperatorElements getIntegerParseInt_ClassOperatorAccess() {
		return pIntegerParseInt_ClassOperator;
	}
	
	public ParserRule getIntegerParseInt_ClassOperatorRule() {
		return getIntegerParseInt_ClassOperatorAccess().getRule();
	}
	
	//Sum_AggregationOperator_Double:
	//	{Sum_AggregationOperator_Double} 'sum_Double(' calculateable=Double_CalculateableParameter ')'
	//	operator=Double_FunctionalOperator?;
	public Sum_AggregationOperator_DoubleElements getSum_AggregationOperator_DoubleAccess() {
		return pSum_AggregationOperator_Double;
	}
	
	public ParserRule getSum_AggregationOperator_DoubleRule() {
		return getSum_AggregationOperator_DoubleAccess().getRule();
	}
	
	//Min_AggregationOperator_Double:
	//	{Min_AggregationOperator_Double} 'min_Double(' calculateable=Double_CalculateableParameter ')'
	//	operator=Double_FunctionalOperator?;
	public Min_AggregationOperator_DoubleElements getMin_AggregationOperator_DoubleAccess() {
		return pMin_AggregationOperator_Double;
	}
	
	public ParserRule getMin_AggregationOperator_DoubleRule() {
		return getMin_AggregationOperator_DoubleAccess().getRule();
	}
	
	//Max_AggregationOperator_Double:
	//	{Max_AggregationOperator_Double} 'max_Double(' calculateable=Double_CalculateableParameter ')'
	//	operator=Double_FunctionalOperator?;
	public Max_AggregationOperator_DoubleElements getMax_AggregationOperator_DoubleAccess() {
		return pMax_AggregationOperator_Double;
	}
	
	public ParserRule getMax_AggregationOperator_DoubleRule() {
		return getMax_AggregationOperator_DoubleAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
