/*
 * generated by Xtext 2.14.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.services.MQLGrammarAccess;
import qmm.And_EvaluationBitOperator;
import qmm.Boolean_And_BitOperator;
import qmm.Boolean_CalculateableParameter;
import qmm.Boolean_FunctionalParameter;
import qmm.Boolean_Or_BitOperator;
import qmm.CharSequence_And_BitOperator;
import qmm.CharSequence_CalculateableParameter;
import qmm.CharSequence_FunctionalParameter;
import qmm.CharSequence_Or_BitOperator;
import qmm.CharSequence_String_Object_CharSequence_equals_FunctionalOperator;
import qmm.CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator;
import qmm.CharSequence_String_Object_CharSequence_toString_FunctionalOperator;
import qmm.CharSequence_String_length_FunctionalOperator;
import qmm.Character_And_BitOperator;
import qmm.Character_CalculateableParameter;
import qmm.Character_FunctionalParameter;
import qmm.Character_Or_BitOperator;
import qmm.Count_AggregationOperator;
import qmm.CountableReferenceParameter;
import qmm.Countable_ReferenceArgument;
import qmm.Course;
import qmm.CourseType_EnumerationOperator;
import qmm.Course_Containment_OrGroup;
import qmm.Course_Reference_OrGroup;
import qmm.Course_courseNumber_AttrEClass;
import qmm.Course_courseType_AttrEClass;
import qmm.Course_name_AttrEClass;
import qmm.Double_And_BitOperator;
import qmm.Double_CalculateableParameter;
import qmm.Double_FunctionalParameter;
import qmm.Double_Or_BitOperator;
import qmm.Exam;
import qmm.Exam_Containment_OrGroup;
import qmm.Exam_examID_AttrEClass;
import qmm.FindQuery;
import qmm.FindQueryCollection;
import qmm.IntegerParseInt_ClassOperator;
import qmm.Integer_And_BitOperator;
import qmm.Integer_CalculateableElementReferenceArgument;
import qmm.Integer_CalculateableParameter;
import qmm.Integer_FunctionalParameter;
import qmm.Integer_Or_BitOperator;
import qmm.Integer_PrimitiveArgument;
import qmm.Max_AggregationOperator_Double;
import qmm.Max_AggregationOperator_Integer;
import qmm.Min_AggregationOperator_Double;
import qmm.Min_AggregationOperator_Integer;
import qmm.Number_And_BitOperator;
import qmm.Number_CalculateableParameter;
import qmm.Number_Double_Object_Number_equals_FunctionalOperator;
import qmm.Number_Double_Object_Number_hashCode_FunctionalOperator;
import qmm.Number_Double_Object_Number_toString_FunctionalOperator;
import qmm.Number_Double_greaterEquals_FunctionalOperator;
import qmm.Number_Double_greaterThan_FunctionalOperator;
import qmm.Number_Double_smallerEquals_FunctionalOperator;
import qmm.Number_Double_smallerThan_FunctionalOperator;
import qmm.Number_FunctionalParameter;
import qmm.Number_Integer_Object_Number_equals_FunctionalOperator;
import qmm.Number_Integer_Object_Number_hashCode_FunctionalOperator;
import qmm.Number_Integer_Object_Number_toString_FunctionalOperator;
import qmm.Number_Integer_greaterEquals_FunctionalOperator;
import qmm.Number_Integer_greaterThan_FunctionalOperator;
import qmm.Number_Integer_smallerEquals_FunctionalOperator;
import qmm.Number_Integer_smallerThan_FunctionalOperator;
import qmm.Number_Or_BitOperator;
import qmm.Object_And_BitOperator;
import qmm.Object_Boolean_equals_FunctionalOperator;
import qmm.Object_Boolean_hashCode_FunctionalOperator;
import qmm.Object_Boolean_toString_FunctionalOperator;
import qmm.Object_CalculateableParameter;
import qmm.Object_CharSequence_equals_FunctionalOperator;
import qmm.Object_CharSequence_hashCode_FunctionalOperator;
import qmm.Object_CharSequence_toString_FunctionalOperator;
import qmm.Object_Character_equals_FunctionalOperator;
import qmm.Object_Character_hashCode_FunctionalOperator;
import qmm.Object_Character_toString_FunctionalOperator;
import qmm.Object_FunctionalParameter;
import qmm.Object_Number_equals_FunctionalOperator;
import qmm.Object_Number_hashCode_FunctionalOperator;
import qmm.Object_Number_toString_FunctionalOperator;
import qmm.Object_Or_BitOperator;
import qmm.Or_EvaluationBitOperator;
import qmm.Person;
import qmm.Person_Containment_OrGroup;
import qmm.Person_email_AttrEClass;
import qmm.Person_name_AttrEClass;
import qmm.Professor;
import qmm.Professor_employeeNumber_AttrEClass;
import qmm.QmmPackage;
import qmm.SelectClause;
import qmm.String_And_BitOperator;
import qmm.String_CalculateableElementReferenceArgument;
import qmm.String_CalculateableParameter;
import qmm.String_FunctionalParameter;
import qmm.String_Or_BitOperator;
import qmm.String_PrimitiveArgument;
import qmm.Student;
import qmm.Student_matriculationNumber_AttrEClass;
import qmm.Sum_AggregationOperator_Double;
import qmm.Sum_AggregationOperator_Integer;
import qmm.UniversityManagementSystem;
import qmm.charAt_FunctionalOperator;
import qmm.codePointAt_FunctionalOperator;
import qmm.codePointBefore_FunctionalOperator;
import qmm.compareToBoolean_FunctionalOperator;
import qmm.compareToStringIgnoreCase_FunctionalOperator;
import qmm.compareToString_FunctionalOperator;
import qmm.concat_FunctionalOperator;
import qmm.contains_FunctionalOperator;
import qmm.doubleValue_FunctionalOperator;
import qmm.endsWith_FunctionalOperator;
import qmm.equalsIgnoreCase_FunctionalOperator;
import qmm.equals_FunctionalOperator;
import qmm.greaterEquals_FunctionalOperator;
import qmm.greaterThan_FunctionalOperator;
import qmm.hashCode_FunctionalOperator;
import qmm.indexOfCharFromIndex_FunctionalOperator;
import qmm.indexOfChar_FunctionalOperator;
import qmm.indexOfString_FunctionalOperator;
import qmm.isEmpty_FunctionalOperator;
import qmm.length_FunctionalOperator;
import qmm.offsetByCodePoints_FunctionalOperator;
import qmm.parseBoolean_FunctionalOperator;
import qmm.smallerEquals_FunctionalOperator;
import qmm.smallerThan_FunctionalOperator;
import qmm.startsWithOffset_FunctionalOperator;
import qmm.startsWith_FunctionalOperator;
import qmm.substring_FunctionalOperator;
import qmm.toLowerCase_FunctionalOperator;
import qmm.toString_FunctionalOperator;
import qmm.toUpperCase_FunctionalOperator;
import qmm.trim_FunctionalOperator;

@SuppressWarnings("all")
public class MQLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MQLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == QmmPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QmmPackage.AND_EVALUATION_BIT_OPERATOR:
				sequence_And_EvaluationBitOperator(context, (And_EvaluationBitOperator) semanticObject); 
				return; 
			case QmmPackage.BOOLEAN_AND_BIT_OPERATOR:
				sequence_Boolean_And_BitOperator(context, (Boolean_And_BitOperator) semanticObject); 
				return; 
			case QmmPackage.BOOLEAN_CALCULATEABLE_PARAMETER:
				sequence_Boolean_CalculateableParameter(context, (Boolean_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.BOOLEAN_FUNCTIONAL_PARAMETER:
				sequence_Boolean_FunctionalParameter(context, (Boolean_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.BOOLEAN_OR_BIT_OPERATOR:
				sequence_Boolean_Or_BitOperator(context, (Boolean_Or_BitOperator) semanticObject); 
				return; 
			case QmmPackage.CHAR_SEQUENCE_AND_BIT_OPERATOR:
				sequence_CharSequence_And_BitOperator(context, (CharSequence_And_BitOperator) semanticObject); 
				return; 
			case QmmPackage.CHAR_SEQUENCE_CALCULATEABLE_PARAMETER:
				sequence_CharSequence_CalculateableParameter(context, (CharSequence_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.CHAR_SEQUENCE_FUNCTIONAL_PARAMETER:
				sequence_CharSequence_FunctionalParameter(context, (CharSequence_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.CHAR_SEQUENCE_OR_BIT_OPERATOR:
				sequence_CharSequence_Or_BitOperator(context, (CharSequence_Or_BitOperator) semanticObject); 
				return; 
			case QmmPackage.CHAR_SEQUENCE_STRING_OBJECT_CHAR_SEQUENCE_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_CharSequence_String_Object_CharSequence_equals_FunctionalOperator(context, (CharSequence_String_Object_CharSequence_equals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.CHAR_SEQUENCE_STRING_OBJECT_CHAR_SEQUENCE_HASH_CODE_FUNCTIONAL_OPERATOR:
				sequence_CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator(context, (CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.CHAR_SEQUENCE_STRING_OBJECT_CHAR_SEQUENCE_TO_STRING_FUNCTIONAL_OPERATOR:
				sequence_CharSequence_String_Object_CharSequence_toString_FunctionalOperator(context, (CharSequence_String_Object_CharSequence_toString_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.CHAR_SEQUENCE_STRING_LENGTH_FUNCTIONAL_OPERATOR:
				sequence_CharSequence_String_length_FunctionalOperator(context, (CharSequence_String_length_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.CHARACTER_AND_BIT_OPERATOR:
				sequence_Character_And_BitOperator(context, (Character_And_BitOperator) semanticObject); 
				return; 
			case QmmPackage.CHARACTER_CALCULATEABLE_PARAMETER:
				sequence_Character_CalculateableParameter(context, (Character_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.CHARACTER_FUNCTIONAL_PARAMETER:
				sequence_Character_FunctionalParameter(context, (Character_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.CHARACTER_OR_BIT_OPERATOR:
				sequence_Character_Or_BitOperator(context, (Character_Or_BitOperator) semanticObject); 
				return; 
			case QmmPackage.COUNT_AGGREGATION_OPERATOR:
				sequence_Count_AggregationOperator(context, (Count_AggregationOperator) semanticObject); 
				return; 
			case QmmPackage.COUNTABLE_REFERENCE_PARAMETER:
				sequence_CountableReferenceParameter(context, (CountableReferenceParameter) semanticObject); 
				return; 
			case QmmPackage.COUNTABLE_REFERENCE_ARGUMENT:
				sequence_Countable_ReferenceArgument(context, (Countable_ReferenceArgument) semanticObject); 
				return; 
			case QmmPackage.COURSE:
				sequence_Course(context, (Course) semanticObject); 
				return; 
			case QmmPackage.COURSE_TYPE_ENUMERATION_OPERATOR:
				sequence_CourseType_EnumerationOperator(context, (CourseType_EnumerationOperator) semanticObject); 
				return; 
			case QmmPackage.COURSE_CONTAINMENT_OR_GROUP:
				sequence_UniversityManagementSystem_course_OrGroup(context, (Course_Containment_OrGroup) semanticObject); 
				return; 
			case QmmPackage.COURSE_REFERENCE_OR_GROUP:
				if (rule == grammarAccess.getCourse_mandatoryFor_OrGroupRule()) {
					sequence_Course_mandatoryFor_OrGroup(context, (Course_Reference_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getProfessor_lectures_OrGroupRule()) {
					sequence_Professor_lectures_OrGroup(context, (Course_Reference_OrGroup) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStudent_attends_OrGroupRule()) {
					sequence_Student_attends_OrGroup(context, (Course_Reference_OrGroup) semanticObject); 
					return; 
				}
				else break;
			case QmmPackage.COURSE_COURSE_NUMBER_ATTR_ECLASS:
				sequence_Course_courseNumber_AttrEClass(context, (Course_courseNumber_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.COURSE_COURSE_TYPE_ATTR_ECLASS:
				sequence_Course_courseType_AttrEClass(context, (Course_courseType_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.COURSE_NAME_ATTR_ECLASS:
				sequence_Course_name_AttrEClass(context, (Course_name_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.DOUBLE_AND_BIT_OPERATOR:
				sequence_Double_And_BitOperator(context, (Double_And_BitOperator) semanticObject); 
				return; 
			case QmmPackage.DOUBLE_CALCULATEABLE_PARAMETER:
				sequence_Double_CalculateableParameter(context, (Double_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.DOUBLE_FUNCTIONAL_PARAMETER:
				sequence_Double_FunctionalParameter(context, (Double_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.DOUBLE_OR_BIT_OPERATOR:
				sequence_Double_Or_BitOperator(context, (Double_Or_BitOperator) semanticObject); 
				return; 
			case QmmPackage.EXAM:
				sequence_Exam(context, (Exam) semanticObject); 
				return; 
			case QmmPackage.EXAM_CONTAINMENT_OR_GROUP:
				sequence_Course_exam_OrGroup(context, (Exam_Containment_OrGroup) semanticObject); 
				return; 
			case QmmPackage.EXAM_EXAM_ID_ATTR_ECLASS:
				sequence_Exam_examID_AttrEClass(context, (Exam_examID_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.FIND_QUERY:
				sequence_FindQuery(context, (FindQuery) semanticObject); 
				return; 
			case QmmPackage.FIND_QUERY_COLLECTION:
				sequence_FindQueryCollection(context, (FindQueryCollection) semanticObject); 
				return; 
			case QmmPackage.INTEGER_PARSE_INT_CLASS_OPERATOR:
				sequence_IntegerParseInt_ClassOperator(context, (IntegerParseInt_ClassOperator) semanticObject); 
				return; 
			case QmmPackage.INTEGER_AND_BIT_OPERATOR:
				sequence_Integer_And_BitOperator(context, (Integer_And_BitOperator) semanticObject); 
				return; 
			case QmmPackage.INTEGER_CALCULATEABLE_ELEMENT_REFERENCE_ARGUMENT:
				sequence_Integer_CalculateableElementReferenceArgument(context, (Integer_CalculateableElementReferenceArgument) semanticObject); 
				return; 
			case QmmPackage.INTEGER_CALCULATEABLE_PARAMETER:
				sequence_Integer_CalculateableParameter(context, (Integer_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.INTEGER_FUNCTIONAL_PARAMETER:
				sequence_Integer_FunctionalParameter(context, (Integer_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.INTEGER_OR_BIT_OPERATOR:
				sequence_Integer_Or_BitOperator(context, (Integer_Or_BitOperator) semanticObject); 
				return; 
			case QmmPackage.INTEGER_PRIMITIVE_ARGUMENT:
				sequence_Integer_PrimitiveArgument(context, (Integer_PrimitiveArgument) semanticObject); 
				return; 
			case QmmPackage.MAX_AGGREGATION_OPERATOR_DOUBLE:
				sequence_Max_AggregationOperator_Double(context, (Max_AggregationOperator_Double) semanticObject); 
				return; 
			case QmmPackage.MAX_AGGREGATION_OPERATOR_INTEGER:
				sequence_Max_AggregationOperator_Integer(context, (Max_AggregationOperator_Integer) semanticObject); 
				return; 
			case QmmPackage.MIN_AGGREGATION_OPERATOR_DOUBLE:
				sequence_Min_AggregationOperator_Double(context, (Min_AggregationOperator_Double) semanticObject); 
				return; 
			case QmmPackage.MIN_AGGREGATION_OPERATOR_INTEGER:
				sequence_Min_AggregationOperator_Integer(context, (Min_AggregationOperator_Integer) semanticObject); 
				return; 
			case QmmPackage.NUMBER_AND_BIT_OPERATOR:
				sequence_Number_And_BitOperator(context, (Number_And_BitOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_CALCULATEABLE_PARAMETER:
				sequence_Number_CalculateableParameter(context, (Number_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.NUMBER_DOUBLE_OBJECT_NUMBER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Number_Double_Object_Number_equals_FunctionalOperator(context, (Number_Double_Object_Number_equals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_DOUBLE_OBJECT_NUMBER_HASH_CODE_FUNCTIONAL_OPERATOR:
				sequence_Number_Double_Object_Number_hashCode_FunctionalOperator(context, (Number_Double_Object_Number_hashCode_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_DOUBLE_OBJECT_NUMBER_TO_STRING_FUNCTIONAL_OPERATOR:
				sequence_Number_Double_Object_Number_toString_FunctionalOperator(context, (Number_Double_Object_Number_toString_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_DOUBLE_GREATER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Number_Double_greaterEquals_FunctionalOperator(context, (Number_Double_greaterEquals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_DOUBLE_GREATER_THAN_FUNCTIONAL_OPERATOR:
				sequence_Number_Double_greaterThan_FunctionalOperator(context, (Number_Double_greaterThan_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_DOUBLE_SMALLER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Number_Double_smallerEquals_FunctionalOperator(context, (Number_Double_smallerEquals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_DOUBLE_SMALLER_THAN_FUNCTIONAL_OPERATOR:
				sequence_Number_Double_smallerThan_FunctionalOperator(context, (Number_Double_smallerThan_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_FUNCTIONAL_PARAMETER:
				sequence_Number_FunctionalParameter(context, (Number_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.NUMBER_INTEGER_OBJECT_NUMBER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Number_Integer_Object_Number_equals_FunctionalOperator(context, (Number_Integer_Object_Number_equals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_INTEGER_OBJECT_NUMBER_HASH_CODE_FUNCTIONAL_OPERATOR:
				sequence_Number_Integer_Object_Number_hashCode_FunctionalOperator(context, (Number_Integer_Object_Number_hashCode_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_INTEGER_OBJECT_NUMBER_TO_STRING_FUNCTIONAL_OPERATOR:
				sequence_Number_Integer_Object_Number_toString_FunctionalOperator(context, (Number_Integer_Object_Number_toString_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_INTEGER_GREATER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Number_Integer_greaterEquals_FunctionalOperator(context, (Number_Integer_greaterEquals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_INTEGER_GREATER_THAN_FUNCTIONAL_OPERATOR:
				sequence_Number_Integer_greaterThan_FunctionalOperator(context, (Number_Integer_greaterThan_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_INTEGER_SMALLER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Number_Integer_smallerEquals_FunctionalOperator(context, (Number_Integer_smallerEquals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_INTEGER_SMALLER_THAN_FUNCTIONAL_OPERATOR:
				sequence_Number_Integer_smallerThan_FunctionalOperator(context, (Number_Integer_smallerThan_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.NUMBER_OR_BIT_OPERATOR:
				sequence_Number_Or_BitOperator(context, (Number_Or_BitOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_AND_BIT_OPERATOR:
				sequence_Object_And_BitOperator(context, (Object_And_BitOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_BOOLEAN_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Object_Boolean_equals_FunctionalOperator(context, (Object_Boolean_equals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_BOOLEAN_HASH_CODE_FUNCTIONAL_OPERATOR:
				sequence_Object_Boolean_hashCode_FunctionalOperator(context, (Object_Boolean_hashCode_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_BOOLEAN_TO_STRING_FUNCTIONAL_OPERATOR:
				sequence_Object_Boolean_toString_FunctionalOperator(context, (Object_Boolean_toString_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_CALCULATEABLE_PARAMETER:
				sequence_Object_CalculateableParameter(context, (Object_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.OBJECT_CHAR_SEQUENCE_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Object_CharSequence_equals_FunctionalOperator(context, (Object_CharSequence_equals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_CHAR_SEQUENCE_HASH_CODE_FUNCTIONAL_OPERATOR:
				sequence_Object_CharSequence_hashCode_FunctionalOperator(context, (Object_CharSequence_hashCode_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_CHAR_SEQUENCE_TO_STRING_FUNCTIONAL_OPERATOR:
				sequence_Object_CharSequence_toString_FunctionalOperator(context, (Object_CharSequence_toString_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_CHARACTER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Object_Character_equals_FunctionalOperator(context, (Object_Character_equals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_CHARACTER_HASH_CODE_FUNCTIONAL_OPERATOR:
				sequence_Object_Character_hashCode_FunctionalOperator(context, (Object_Character_hashCode_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_CHARACTER_TO_STRING_FUNCTIONAL_OPERATOR:
				sequence_Object_Character_toString_FunctionalOperator(context, (Object_Character_toString_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_FUNCTIONAL_PARAMETER:
				sequence_Object_FunctionalParameter(context, (Object_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.OBJECT_NUMBER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_Object_Number_equals_FunctionalOperator(context, (Object_Number_equals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_NUMBER_HASH_CODE_FUNCTIONAL_OPERATOR:
				sequence_Object_Number_hashCode_FunctionalOperator(context, (Object_Number_hashCode_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_NUMBER_TO_STRING_FUNCTIONAL_OPERATOR:
				sequence_Object_Number_toString_FunctionalOperator(context, (Object_Number_toString_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OBJECT_OR_BIT_OPERATOR:
				sequence_Object_Or_BitOperator(context, (Object_Or_BitOperator) semanticObject); 
				return; 
			case QmmPackage.OR_EVALUATION_BIT_OPERATOR:
				sequence_Or_EvaluationBitOperator(context, (Or_EvaluationBitOperator) semanticObject); 
				return; 
			case QmmPackage.PERSON:
				sequence_Person(context, (Person) semanticObject); 
				return; 
			case QmmPackage.PERSON_CONTAINMENT_OR_GROUP:
				sequence_UniversityManagementSystem_person_OrGroup(context, (Person_Containment_OrGroup) semanticObject); 
				return; 
			case QmmPackage.PERSON_EMAIL_ATTR_ECLASS:
				sequence_Person_email_AttrEClass(context, (Person_email_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.PERSON_NAME_ATTR_ECLASS:
				sequence_Person_name_AttrEClass(context, (Person_name_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.PROFESSOR:
				sequence_Professor(context, (Professor) semanticObject); 
				return; 
			case QmmPackage.PROFESSOR_EMPLOYEE_NUMBER_ATTR_ECLASS:
				sequence_Professor_employeeNumber_AttrEClass(context, (Professor_employeeNumber_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.SELECT_CLAUSE:
				sequence_SelectClause(context, (SelectClause) semanticObject); 
				return; 
			case QmmPackage.STRING_AND_BIT_OPERATOR:
				sequence_String_And_BitOperator(context, (String_And_BitOperator) semanticObject); 
				return; 
			case QmmPackage.STRING_CALCULATEABLE_ELEMENT_REFERENCE_ARGUMENT:
				sequence_String_CalculateableElementReferenceArgument(context, (String_CalculateableElementReferenceArgument) semanticObject); 
				return; 
			case QmmPackage.STRING_CALCULATEABLE_PARAMETER:
				sequence_String_CalculateableParameter(context, (String_CalculateableParameter) semanticObject); 
				return; 
			case QmmPackage.STRING_FUNCTIONAL_PARAMETER:
				sequence_String_FunctionalParameter(context, (String_FunctionalParameter) semanticObject); 
				return; 
			case QmmPackage.STRING_OR_BIT_OPERATOR:
				sequence_String_Or_BitOperator(context, (String_Or_BitOperator) semanticObject); 
				return; 
			case QmmPackage.STRING_PRIMITIVE_ARGUMENT:
				sequence_String_PrimitiveArgument(context, (String_PrimitiveArgument) semanticObject); 
				return; 
			case QmmPackage.STUDENT:
				sequence_Student(context, (Student) semanticObject); 
				return; 
			case QmmPackage.STUDENT_MATRICULATION_NUMBER_ATTR_ECLASS:
				sequence_Student_matriculationNumber_AttrEClass(context, (Student_matriculationNumber_AttrEClass) semanticObject); 
				return; 
			case QmmPackage.SUM_AGGREGATION_OPERATOR_DOUBLE:
				sequence_Sum_AggregationOperator_Double(context, (Sum_AggregationOperator_Double) semanticObject); 
				return; 
			case QmmPackage.SUM_AGGREGATION_OPERATOR_INTEGER:
				sequence_Sum_AggregationOperator_Integer(context, (Sum_AggregationOperator_Integer) semanticObject); 
				return; 
			case QmmPackage.UNIVERSITY_MANAGEMENT_SYSTEM:
				sequence_UniversityManagementSystem(context, (UniversityManagementSystem) semanticObject); 
				return; 
			case QmmPackage.CHAR_AT_FUNCTIONAL_OPERATOR:
				sequence_charAt_FunctionalOperator(context, (charAt_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.CODE_POINT_AT_FUNCTIONAL_OPERATOR:
				sequence_codePointAt_FunctionalOperator(context, (codePointAt_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.CODE_POINT_BEFORE_FUNCTIONAL_OPERATOR:
				sequence_codePointBefore_FunctionalOperator(context, (codePointBefore_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.COMPARE_TO_BOOLEAN_FUNCTIONAL_OPERATOR:
				sequence_compareToBoolean_FunctionalOperator(context, (compareToBoolean_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.COMPARE_TO_STRING_IGNORE_CASE_FUNCTIONAL_OPERATOR:
				sequence_compareToStringIgnoreCase_FunctionalOperator(context, (compareToStringIgnoreCase_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.COMPARE_TO_STRING_FUNCTIONAL_OPERATOR:
				sequence_compareToString_FunctionalOperator(context, (compareToString_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.CONCAT_FUNCTIONAL_OPERATOR:
				sequence_concat_FunctionalOperator(context, (concat_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.CONTAINS_FUNCTIONAL_OPERATOR:
				sequence_contains_FunctionalOperator(context, (contains_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.DOUBLE_VALUE_FUNCTIONAL_OPERATOR:
				sequence_doubleValue_FunctionalOperator(context, (doubleValue_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.ENDS_WITH_FUNCTIONAL_OPERATOR:
				sequence_endsWith_FunctionalOperator(context, (endsWith_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.EQUALS_IGNORE_CASE_FUNCTIONAL_OPERATOR:
				sequence_equalsIgnoreCase_FunctionalOperator(context, (equalsIgnoreCase_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.EQUALS_FUNCTIONAL_OPERATOR:
				sequence_equals_FunctionalOperator(context, (equals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.GREATER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_greaterEquals_FunctionalOperator(context, (greaterEquals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.GREATER_THAN_FUNCTIONAL_OPERATOR:
				sequence_greaterThan_FunctionalOperator(context, (greaterThan_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.HASH_CODE_FUNCTIONAL_OPERATOR:
				sequence_hashCode_FunctionalOperator(context, (hashCode_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.INDEX_OF_CHAR_FROM_INDEX_FUNCTIONAL_OPERATOR:
				sequence_indexOfCharFromIndex_FunctionalOperator(context, (indexOfCharFromIndex_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.INDEX_OF_CHAR_FUNCTIONAL_OPERATOR:
				sequence_indexOfChar_FunctionalOperator(context, (indexOfChar_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.INDEX_OF_STRING_FUNCTIONAL_OPERATOR:
				sequence_indexOfString_FunctionalOperator(context, (indexOfString_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.IS_EMPTY_FUNCTIONAL_OPERATOR:
				sequence_isEmpty_FunctionalOperator(context, (isEmpty_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.LENGTH_FUNCTIONAL_OPERATOR:
				sequence_length_FunctionalOperator(context, (length_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.OFFSET_BY_CODE_POINTS_FUNCTIONAL_OPERATOR:
				sequence_offsetByCodePoints_FunctionalOperator(context, (offsetByCodePoints_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.PARSE_BOOLEAN_FUNCTIONAL_OPERATOR:
				sequence_parseBoolean_FunctionalOperator(context, (parseBoolean_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.SMALLER_EQUALS_FUNCTIONAL_OPERATOR:
				sequence_smallerEquals_FunctionalOperator(context, (smallerEquals_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.SMALLER_THAN_FUNCTIONAL_OPERATOR:
				sequence_smallerThan_FunctionalOperator(context, (smallerThan_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.STARTS_WITH_OFFSET_FUNCTIONAL_OPERATOR:
				sequence_startsWithOffset_FunctionalOperator(context, (startsWithOffset_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.STARTS_WITH_FUNCTIONAL_OPERATOR:
				sequence_startsWith_FunctionalOperator(context, (startsWith_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.SUBSTRING_FUNCTIONAL_OPERATOR:
				sequence_substring_FunctionalOperator(context, (substring_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.TO_LOWER_CASE_FUNCTIONAL_OPERATOR:
				sequence_toLowerCase_FunctionalOperator(context, (toLowerCase_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.TO_STRING_FUNCTIONAL_OPERATOR:
				sequence_toString_FunctionalOperator(context, (toString_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.TO_UPPER_CASE_FUNCTIONAL_OPERATOR:
				sequence_toUpperCase_FunctionalOperator(context, (toUpperCase_FunctionalOperator) semanticObject); 
				return; 
			case QmmPackage.TRIM_FUNCTIONAL_OPERATOR:
				sequence_trim_FunctionalOperator(context, (trim_FunctionalOperator) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     EvaluationOperator returns And_EvaluationBitOperator
	 *     EvaluationBitOperator returns And_EvaluationBitOperator
	 *     And_EvaluationBitOperator returns And_EvaluationBitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=EvaluationOperator connects+=EvaluationOperator+)
	 */
	protected void sequence_And_EvaluationBitOperator(ISerializationContext context, And_EvaluationBitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Boolean_ExpressionOperator returns Boolean_And_BitOperator
	 *     Boolean_BitOperator returns Boolean_And_BitOperator
	 *     Boolean_And_BitOperator returns Boolean_And_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Boolean_ExpressionOperator connects+=Boolean_ExpressionOperator+)
	 */
	protected void sequence_Boolean_And_BitOperator(ISerializationContext context, Boolean_And_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Boolean_CalculateableParameter returns Boolean_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_Boolean_CalculateableParameter(ISerializationContext context, Boolean_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBoolean_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Boolean_FunctionalParameter returns Boolean_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_Boolean_FunctionalParameter(ISerializationContext context, Boolean_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBoolean_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Boolean_ExpressionOperator returns Boolean_Or_BitOperator
	 *     Boolean_BitOperator returns Boolean_Or_BitOperator
	 *     Boolean_Or_BitOperator returns Boolean_Or_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Boolean_ExpressionOperator connects+=Boolean_ExpressionOperator+)
	 */
	protected void sequence_Boolean_Or_BitOperator(ISerializationContext context, Boolean_Or_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CharSequence_ExpressionOperator returns CharSequence_And_BitOperator
	 *     CharSequence_BitOperator returns CharSequence_And_BitOperator
	 *     CharSequence_And_BitOperator returns CharSequence_And_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=CharSequence_ExpressionOperator connects+=CharSequence_ExpressionOperator+)
	 */
	protected void sequence_CharSequence_And_BitOperator(ISerializationContext context, CharSequence_And_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CharSequence_CalculateableParameter returns CharSequence_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_CharSequence_CalculateableParameter(ISerializationContext context, CharSequence_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCharSequence_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CharSequence_FunctionalParameter returns CharSequence_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_CharSequence_FunctionalParameter(ISerializationContext context, CharSequence_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCharSequence_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CharSequence_ExpressionOperator returns CharSequence_Or_BitOperator
	 *     CharSequence_BitOperator returns CharSequence_Or_BitOperator
	 *     CharSequence_Or_BitOperator returns CharSequence_Or_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=CharSequence_ExpressionOperator connects+=CharSequence_ExpressionOperator+)
	 */
	protected void sequence_CharSequence_Or_BitOperator(ISerializationContext context, CharSequence_Or_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns CharSequence_String_Object_CharSequence_equals_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns CharSequence_String_Object_CharSequence_equals_FunctionalOperator
	 *     String_FunctionalOperator returns CharSequence_String_Object_CharSequence_equals_FunctionalOperator
	 *     CharSequence_String_Object_CharSequence_equals_FunctionalOperator returns CharSequence_String_Object_CharSequence_equals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? obj=Object_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_CharSequence_String_Object_CharSequence_equals_FunctionalOperator(ISerializationContext context, CharSequence_String_Object_CharSequence_equals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator
	 *     String_FunctionalOperator returns CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator
	 *     CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator returns CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=Integer_FunctionalOperator?
	 */
	protected void sequence_CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator(ISerializationContext context, CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns CharSequence_String_Object_CharSequence_toString_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns CharSequence_String_Object_CharSequence_toString_FunctionalOperator
	 *     String_FunctionalOperator returns CharSequence_String_Object_CharSequence_toString_FunctionalOperator
	 *     CharSequence_String_Object_CharSequence_toString_FunctionalOperator returns CharSequence_String_Object_CharSequence_toString_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_CharSequence_String_Object_CharSequence_toString_FunctionalOperator(ISerializationContext context, CharSequence_String_Object_CharSequence_toString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns CharSequence_String_length_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns CharSequence_String_length_FunctionalOperator
	 *     String_FunctionalOperator returns CharSequence_String_length_FunctionalOperator
	 *     CharSequence_String_length_FunctionalOperator returns CharSequence_String_length_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=Integer_FunctionalOperator?
	 */
	protected void sequence_CharSequence_String_length_FunctionalOperator(ISerializationContext context, CharSequence_String_length_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Character_ExpressionOperator returns Character_And_BitOperator
	 *     Character_BitOperator returns Character_And_BitOperator
	 *     Character_And_BitOperator returns Character_And_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Character_ExpressionOperator connects+=Character_ExpressionOperator+)
	 */
	protected void sequence_Character_And_BitOperator(ISerializationContext context, Character_And_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Character_CalculateableParameter returns Character_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_Character_CalculateableParameter(ISerializationContext context, Character_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCharacter_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Character_FunctionalParameter returns Character_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_Character_FunctionalParameter(ISerializationContext context, Character_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCharacter_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Character_ExpressionOperator returns Character_Or_BitOperator
	 *     Character_BitOperator returns Character_Or_BitOperator
	 *     Character_Or_BitOperator returns Character_Or_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Character_ExpressionOperator connects+=Character_ExpressionOperator+)
	 */
	protected void sequence_Character_Or_BitOperator(ISerializationContext context, Character_Or_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns Count_AggregationOperator
	 *     Calculateable_Argument returns Count_AggregationOperator
	 *     EvaluationOperation_Argument returns Count_AggregationOperator
	 *     Integer_EvaluationOperation_Argument returns Count_AggregationOperator
	 *     EvaluationOperator returns Count_AggregationOperator
	 *     EvaluationFunctionalOperator returns Count_AggregationOperator
	 *     AggregationOperator returns Count_AggregationOperator
	 *     CountingAggregationOperator returns Count_AggregationOperator
	 *     Count_AggregationOperator returns Count_AggregationOperator
	 *
	 * Constraint:
	 *     (countable=CountableReferenceParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_Count_AggregationOperator(ISerializationContext context, Count_AggregationOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CountableReferenceParameter returns CountableReferenceParameter
	 *
	 * Constraint:
	 *     argument=Countable_ReferenceArgument
	 */
	protected void sequence_CountableReferenceParameter(ISerializationContext context, CountableReferenceParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCountableReferenceParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCountableReferenceParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCountableReferenceParameterAccess().getArgumentCountable_ReferenceArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Countable_ReferenceArgument returns Countable_ReferenceArgument
	 *
	 * Constraint:
	 *     reference=[Countable|ID]
	 */
	protected void sequence_Countable_ReferenceArgument(ISerializationContext context, Countable_ReferenceArgument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCountable_ReferenceArgument_Reference()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCountable_ReferenceArgument_Reference()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCountable_ReferenceArgumentAccess().getReferenceCountableIDTerminalRuleCall_1_0_1(), semanticObject.eGet(QmmPackage.eINSTANCE.getCountable_ReferenceArgument_Reference(), false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CourseType_EnumerationOperator returns CourseType_EnumerationOperator
	 *
	 * Constraint:
	 *     (argument=CourseType or=CourseType_EnumerationOperator?)
	 */
	protected void sequence_CourseType_EnumerationOperator(ISerializationContext context, CourseType_EnumerationOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Course_Type returns Course
	 *     RootClass returns Course
	 *     Course returns Course
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             courseNumber_AttrEClass+=Course_courseNumber_AttrEClass | 
	 *             exam+=Course_exam_OrGroup | 
	 *             mandatoryFor+=Course_mandatoryFor_OrGroup | 
	 *             name_AttrEClass+=Course_name_AttrEClass
	 *         )* 
	 *         (
	 *             courseType_AttrEClass=Course_courseType_AttrEClass 
	 *             (
	 *                 EvaluationOperator+=EvaluationOperator | 
	 *                 courseNumber_AttrEClass+=Course_courseNumber_AttrEClass | 
	 *                 exam+=Course_exam_OrGroup | 
	 *                 mandatoryFor+=Course_mandatoryFor_OrGroup | 
	 *                 name_AttrEClass+=Course_name_AttrEClass
	 *             )*
	 *         )?
	 *     )
	 */
	protected void sequence_Course(ISerializationContext context, Course semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Course_courseNumber_AttrEClass returns Course_courseNumber_AttrEClass
	 *
	 * Constraint:
	 *     ((negated?='!' | generalized?='*')* name=ID operator=Integer_ExpressionOperator?)
	 */
	protected void sequence_Course_courseNumber_AttrEClass(ISerializationContext context, Course_courseNumber_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Course_courseType_AttrEClass returns Course_courseType_AttrEClass
	 *
	 * Constraint:
	 *     (negated?='!'? name=ID operator=CourseType_EnumerationOperator?)
	 */
	protected void sequence_Course_courseType_AttrEClass(ISerializationContext context, Course_courseType_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Course_exam_OrGroup returns Exam_Containment_OrGroup
	 *
	 * Constraint:
	 *     ((negated?='!' | transitive?='+' | generalized?='*')* name=ID (containment+=Exam_Type containment+=Exam_Type*)?)
	 */
	protected void sequence_Course_exam_OrGroup(ISerializationContext context, Exam_Containment_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Course_mandatoryFor_OrGroup returns Course_Reference_OrGroup
	 *
	 * Constraint:
	 *     ((negated?='!' | transitive?='+' | generalized?='*')* name=ID (reference+=[Course|ID] reference+=[Course|ID]*)?)
	 */
	protected void sequence_Course_mandatoryFor_OrGroup(ISerializationContext context, Course_Reference_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Course_name_AttrEClass returns Course_name_AttrEClass
	 *
	 * Constraint:
	 *     ((negated?='!' | generalized?='*')* name=ID operator=String_ExpressionOperator?)
	 */
	protected void sequence_Course_name_AttrEClass(ISerializationContext context, Course_name_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Double_ExpressionOperator returns Double_And_BitOperator
	 *     Double_BitOperator returns Double_And_BitOperator
	 *     Double_And_BitOperator returns Double_And_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Double_ExpressionOperator connects+=Double_ExpressionOperator+)
	 */
	protected void sequence_Double_And_BitOperator(ISerializationContext context, Double_And_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Double_CalculateableParameter returns Double_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_Double_CalculateableParameter(ISerializationContext context, Double_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDouble_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Double_FunctionalParameter returns Double_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_Double_FunctionalParameter(ISerializationContext context, Double_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDouble_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Double_ExpressionOperator returns Double_Or_BitOperator
	 *     Double_BitOperator returns Double_Or_BitOperator
	 *     Double_Or_BitOperator returns Double_Or_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Double_ExpressionOperator connects+=Double_ExpressionOperator+)
	 */
	protected void sequence_Double_Or_BitOperator(ISerializationContext context, Double_Or_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Exam_Type returns Exam
	 *     RootClass returns Exam
	 *     Exam returns Exam
	 *
	 * Constraint:
	 *     (name=ID (EvaluationOperator+=EvaluationOperator | examID_AttrEClass+=Exam_examID_AttrEClass)*)
	 */
	protected void sequence_Exam(ISerializationContext context, Exam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Exam_examID_AttrEClass returns Exam_examID_AttrEClass
	 *
	 * Constraint:
	 *     ((negated?='!' | generalized?='*')* name=ID operator=String_ExpressionOperator?)
	 */
	protected void sequence_Exam_examID_AttrEClass(ISerializationContext context, Exam_examID_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FindQueryCollection returns FindQueryCollection
	 *
	 * Constraint:
	 *     (findQueries+=FindQuery findQueries+=FindQuery*)
	 */
	protected void sequence_FindQueryCollection(ISerializationContext context, FindQueryCollection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FindQuery returns FindQuery
	 *
	 * Constraint:
	 *     (rootClass+=RootClass+ select=SelectClause?)
	 */
	protected void sequence_FindQuery(ISerializationContext context, FindQuery semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns IntegerParseInt_ClassOperator
	 *     Calculateable_Argument returns IntegerParseInt_ClassOperator
	 *     EvaluationOperation_Argument returns IntegerParseInt_ClassOperator
	 *     Integer_EvaluationOperation_Argument returns IntegerParseInt_ClassOperator
	 *     IntegerParseInt_ClassOperator returns IntegerParseInt_ClassOperator
	 *
	 * Constraint:
	 *     (calculateable=String_FunctionalParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_IntegerParseInt_ClassOperator(ISerializationContext context, IntegerParseInt_ClassOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Integer_ExpressionOperator returns Integer_And_BitOperator
	 *     Integer_BitOperator returns Integer_And_BitOperator
	 *     Integer_And_BitOperator returns Integer_And_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Integer_ExpressionOperator connects+=Integer_ExpressionOperator+)
	 */
	protected void sequence_Integer_And_BitOperator(ISerializationContext context, Integer_And_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns Integer_CalculateableElementReferenceArgument
	 *     Calculateable_Argument returns Integer_CalculateableElementReferenceArgument
	 *     CalculateableElement_ReferenceArgument returns Integer_CalculateableElementReferenceArgument
	 *     Integer_CalculateableElementReferenceArgument returns Integer_CalculateableElementReferenceArgument
	 *
	 * Constraint:
	 *     (reference=[Integer_CalculateableElement|ID] operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_Integer_CalculateableElementReferenceArgument(ISerializationContext context, Integer_CalculateableElementReferenceArgument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Integer_CalculateableParameter returns Integer_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_Integer_CalculateableParameter(ISerializationContext context, Integer_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInteger_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Integer_FunctionalParameter returns Integer_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_Integer_FunctionalParameter(ISerializationContext context, Integer_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInteger_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Integer_ExpressionOperator returns Integer_Or_BitOperator
	 *     Integer_BitOperator returns Integer_Or_BitOperator
	 *     Integer_Or_BitOperator returns Integer_Or_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Integer_ExpressionOperator connects+=Integer_ExpressionOperator+)
	 */
	protected void sequence_Integer_Or_BitOperator(ISerializationContext context, Integer_Or_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns Integer_PrimitiveArgument
	 *     PrimitiveArgument returns Integer_PrimitiveArgument
	 *     Integer_PrimitiveArgument returns Integer_PrimitiveArgument
	 *
	 * Constraint:
	 *     (value=INT operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_Integer_PrimitiveArgument(ISerializationContext context, Integer_PrimitiveArgument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns Max_AggregationOperator_Double
	 *     Calculateable_Argument returns Max_AggregationOperator_Double
	 *     EvaluationOperation_Argument returns Max_AggregationOperator_Double
	 *     Double_EvaluationOperation_Argument returns Max_AggregationOperator_Double
	 *     EvaluationOperator returns Max_AggregationOperator_Double
	 *     EvaluationFunctionalOperator returns Max_AggregationOperator_Double
	 *     AggregationOperator returns Max_AggregationOperator_Double
	 *     CalculatingAggregationOperator returns Max_AggregationOperator_Double
	 *     Max_AggregationOperator_Double returns Max_AggregationOperator_Double
	 *
	 * Constraint:
	 *     (calculateable=Double_CalculateableParameter operator=Double_FunctionalOperator?)
	 */
	protected void sequence_Max_AggregationOperator_Double(ISerializationContext context, Max_AggregationOperator_Double semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns Max_AggregationOperator_Integer
	 *     Calculateable_Argument returns Max_AggregationOperator_Integer
	 *     EvaluationOperation_Argument returns Max_AggregationOperator_Integer
	 *     Integer_EvaluationOperation_Argument returns Max_AggregationOperator_Integer
	 *     EvaluationOperator returns Max_AggregationOperator_Integer
	 *     EvaluationFunctionalOperator returns Max_AggregationOperator_Integer
	 *     AggregationOperator returns Max_AggregationOperator_Integer
	 *     CalculatingAggregationOperator returns Max_AggregationOperator_Integer
	 *     Max_AggregationOperator_Integer returns Max_AggregationOperator_Integer
	 *
	 * Constraint:
	 *     (calculateable=Integer_CalculateableParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_Max_AggregationOperator_Integer(ISerializationContext context, Max_AggregationOperator_Integer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns Min_AggregationOperator_Double
	 *     Calculateable_Argument returns Min_AggregationOperator_Double
	 *     EvaluationOperation_Argument returns Min_AggregationOperator_Double
	 *     Double_EvaluationOperation_Argument returns Min_AggregationOperator_Double
	 *     EvaluationOperator returns Min_AggregationOperator_Double
	 *     EvaluationFunctionalOperator returns Min_AggregationOperator_Double
	 *     AggregationOperator returns Min_AggregationOperator_Double
	 *     CalculatingAggregationOperator returns Min_AggregationOperator_Double
	 *     Min_AggregationOperator_Double returns Min_AggregationOperator_Double
	 *
	 * Constraint:
	 *     (calculateable=Double_CalculateableParameter operator=Double_FunctionalOperator?)
	 */
	protected void sequence_Min_AggregationOperator_Double(ISerializationContext context, Min_AggregationOperator_Double semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns Min_AggregationOperator_Integer
	 *     Calculateable_Argument returns Min_AggregationOperator_Integer
	 *     EvaluationOperation_Argument returns Min_AggregationOperator_Integer
	 *     Integer_EvaluationOperation_Argument returns Min_AggregationOperator_Integer
	 *     EvaluationOperator returns Min_AggregationOperator_Integer
	 *     EvaluationFunctionalOperator returns Min_AggregationOperator_Integer
	 *     AggregationOperator returns Min_AggregationOperator_Integer
	 *     CalculatingAggregationOperator returns Min_AggregationOperator_Integer
	 *     Min_AggregationOperator_Integer returns Min_AggregationOperator_Integer
	 *
	 * Constraint:
	 *     (calculateable=Integer_CalculateableParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_Min_AggregationOperator_Integer(ISerializationContext context, Min_AggregationOperator_Integer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number_ExpressionOperator returns Number_And_BitOperator
	 *     Number_BitOperator returns Number_And_BitOperator
	 *     Number_And_BitOperator returns Number_And_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Number_ExpressionOperator connects+=Number_ExpressionOperator+)
	 */
	protected void sequence_Number_And_BitOperator(ISerializationContext context, Number_And_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number_CalculateableParameter returns Number_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_Number_CalculateableParameter(ISerializationContext context, Number_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumber_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Double_ExpressionOperator returns Number_Double_Object_Number_equals_FunctionalOperator
	 *     Double_FunctionalOperator_Begin returns Number_Double_Object_Number_equals_FunctionalOperator
	 *     Double_FunctionalOperator returns Number_Double_Object_Number_equals_FunctionalOperator
	 *     Number_Double_Object_Number_equals_FunctionalOperator returns Number_Double_Object_Number_equals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? obj=Object_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Double_Object_Number_equals_FunctionalOperator(ISerializationContext context, Number_Double_Object_Number_equals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Double_ExpressionOperator returns Number_Double_Object_Number_hashCode_FunctionalOperator
	 *     Double_FunctionalOperator_Begin returns Number_Double_Object_Number_hashCode_FunctionalOperator
	 *     Double_FunctionalOperator returns Number_Double_Object_Number_hashCode_FunctionalOperator
	 *     Number_Double_Object_Number_hashCode_FunctionalOperator returns Number_Double_Object_Number_hashCode_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=Integer_FunctionalOperator?
	 */
	protected void sequence_Number_Double_Object_Number_hashCode_FunctionalOperator(ISerializationContext context, Number_Double_Object_Number_hashCode_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Double_ExpressionOperator returns Number_Double_Object_Number_toString_FunctionalOperator
	 *     Double_FunctionalOperator_Begin returns Number_Double_Object_Number_toString_FunctionalOperator
	 *     Double_FunctionalOperator returns Number_Double_Object_Number_toString_FunctionalOperator
	 *     Number_Double_Object_Number_toString_FunctionalOperator returns Number_Double_Object_Number_toString_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_Number_Double_Object_Number_toString_FunctionalOperator(ISerializationContext context, Number_Double_Object_Number_toString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Double_ExpressionOperator returns Number_Double_greaterEquals_FunctionalOperator
	 *     Double_FunctionalOperator_Begin returns Number_Double_greaterEquals_FunctionalOperator
	 *     Double_FunctionalOperator returns Number_Double_greaterEquals_FunctionalOperator
	 *     Number_Double_greaterEquals_FunctionalOperator returns Number_Double_greaterEquals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Double_greaterEquals_FunctionalOperator(ISerializationContext context, Number_Double_greaterEquals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Double_ExpressionOperator returns Number_Double_greaterThan_FunctionalOperator
	 *     Double_FunctionalOperator_Begin returns Number_Double_greaterThan_FunctionalOperator
	 *     Double_FunctionalOperator returns Number_Double_greaterThan_FunctionalOperator
	 *     Number_Double_greaterThan_FunctionalOperator returns Number_Double_greaterThan_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Double_greaterThan_FunctionalOperator(ISerializationContext context, Number_Double_greaterThan_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Double_ExpressionOperator returns Number_Double_smallerEquals_FunctionalOperator
	 *     Double_FunctionalOperator_Begin returns Number_Double_smallerEquals_FunctionalOperator
	 *     Double_FunctionalOperator returns Number_Double_smallerEquals_FunctionalOperator
	 *     Number_Double_smallerEquals_FunctionalOperator returns Number_Double_smallerEquals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Double_smallerEquals_FunctionalOperator(ISerializationContext context, Number_Double_smallerEquals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Double_ExpressionOperator returns Number_Double_smallerThan_FunctionalOperator
	 *     Double_FunctionalOperator_Begin returns Number_Double_smallerThan_FunctionalOperator
	 *     Double_FunctionalOperator returns Number_Double_smallerThan_FunctionalOperator
	 *     Number_Double_smallerThan_FunctionalOperator returns Number_Double_smallerThan_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Double_smallerThan_FunctionalOperator(ISerializationContext context, Number_Double_smallerThan_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number_FunctionalParameter returns Number_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_Number_FunctionalParameter(ISerializationContext context, Number_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumber_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Integer_ExpressionOperator returns Number_Integer_Object_Number_equals_FunctionalOperator
	 *     Integer_FunctionalOperator_Begin returns Number_Integer_Object_Number_equals_FunctionalOperator
	 *     Integer_FunctionalOperator returns Number_Integer_Object_Number_equals_FunctionalOperator
	 *     Number_Integer_Object_Number_equals_FunctionalOperator returns Number_Integer_Object_Number_equals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? obj=Object_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Integer_Object_Number_equals_FunctionalOperator(ISerializationContext context, Number_Integer_Object_Number_equals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Integer_ExpressionOperator returns Number_Integer_Object_Number_hashCode_FunctionalOperator
	 *     Integer_FunctionalOperator_Begin returns Number_Integer_Object_Number_hashCode_FunctionalOperator
	 *     Integer_FunctionalOperator returns Number_Integer_Object_Number_hashCode_FunctionalOperator
	 *     Number_Integer_Object_Number_hashCode_FunctionalOperator returns Number_Integer_Object_Number_hashCode_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=Integer_FunctionalOperator?
	 */
	protected void sequence_Number_Integer_Object_Number_hashCode_FunctionalOperator(ISerializationContext context, Number_Integer_Object_Number_hashCode_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Integer_ExpressionOperator returns Number_Integer_Object_Number_toString_FunctionalOperator
	 *     Integer_FunctionalOperator_Begin returns Number_Integer_Object_Number_toString_FunctionalOperator
	 *     Integer_FunctionalOperator returns Number_Integer_Object_Number_toString_FunctionalOperator
	 *     Number_Integer_Object_Number_toString_FunctionalOperator returns Number_Integer_Object_Number_toString_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_Number_Integer_Object_Number_toString_FunctionalOperator(ISerializationContext context, Number_Integer_Object_Number_toString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Integer_ExpressionOperator returns Number_Integer_greaterEquals_FunctionalOperator
	 *     Integer_FunctionalOperator_Begin returns Number_Integer_greaterEquals_FunctionalOperator
	 *     Integer_FunctionalOperator returns Number_Integer_greaterEquals_FunctionalOperator
	 *     Number_Integer_greaterEquals_FunctionalOperator returns Number_Integer_greaterEquals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Integer_greaterEquals_FunctionalOperator(ISerializationContext context, Number_Integer_greaterEquals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Integer_ExpressionOperator returns Number_Integer_greaterThan_FunctionalOperator
	 *     Integer_FunctionalOperator_Begin returns Number_Integer_greaterThan_FunctionalOperator
	 *     Integer_FunctionalOperator returns Number_Integer_greaterThan_FunctionalOperator
	 *     Number_Integer_greaterThan_FunctionalOperator returns Number_Integer_greaterThan_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Integer_greaterThan_FunctionalOperator(ISerializationContext context, Number_Integer_greaterThan_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Integer_ExpressionOperator returns Number_Integer_smallerEquals_FunctionalOperator
	 *     Integer_FunctionalOperator_Begin returns Number_Integer_smallerEquals_FunctionalOperator
	 *     Integer_FunctionalOperator returns Number_Integer_smallerEquals_FunctionalOperator
	 *     Number_Integer_smallerEquals_FunctionalOperator returns Number_Integer_smallerEquals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Integer_smallerEquals_FunctionalOperator(ISerializationContext context, Number_Integer_smallerEquals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Integer_ExpressionOperator returns Number_Integer_smallerThan_FunctionalOperator
	 *     Integer_FunctionalOperator_Begin returns Number_Integer_smallerThan_FunctionalOperator
	 *     Integer_FunctionalOperator returns Number_Integer_smallerThan_FunctionalOperator
	 *     Number_Integer_smallerThan_FunctionalOperator returns Number_Integer_smallerThan_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Number_Integer_smallerThan_FunctionalOperator(ISerializationContext context, Number_Integer_smallerThan_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number_ExpressionOperator returns Number_Or_BitOperator
	 *     Number_BitOperator returns Number_Or_BitOperator
	 *     Number_Or_BitOperator returns Number_Or_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Number_ExpressionOperator connects+=Number_ExpressionOperator+)
	 */
	protected void sequence_Number_Or_BitOperator(ISerializationContext context, Number_Or_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Object_ExpressionOperator returns Object_And_BitOperator
	 *     Object_BitOperator returns Object_And_BitOperator
	 *     Object_And_BitOperator returns Object_And_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Object_ExpressionOperator connects+=Object_ExpressionOperator+)
	 */
	protected void sequence_Object_And_BitOperator(ISerializationContext context, Object_And_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Boolean_ExpressionOperator returns Object_Boolean_equals_FunctionalOperator
	 *     Boolean_FunctionalOperator_Begin returns Object_Boolean_equals_FunctionalOperator
	 *     Boolean_FunctionalOperator returns Object_Boolean_equals_FunctionalOperator
	 *     Object_Boolean_equals_FunctionalOperator returns Object_Boolean_equals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? obj=Object_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Object_Boolean_equals_FunctionalOperator(ISerializationContext context, Object_Boolean_equals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Boolean_ExpressionOperator returns Object_Boolean_hashCode_FunctionalOperator
	 *     Boolean_FunctionalOperator_Begin returns Object_Boolean_hashCode_FunctionalOperator
	 *     Boolean_FunctionalOperator returns Object_Boolean_hashCode_FunctionalOperator
	 *     Object_Boolean_hashCode_FunctionalOperator returns Object_Boolean_hashCode_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=Integer_FunctionalOperator?
	 */
	protected void sequence_Object_Boolean_hashCode_FunctionalOperator(ISerializationContext context, Object_Boolean_hashCode_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Boolean_ExpressionOperator returns Object_Boolean_toString_FunctionalOperator
	 *     Boolean_FunctionalOperator_Begin returns Object_Boolean_toString_FunctionalOperator
	 *     Boolean_FunctionalOperator returns Object_Boolean_toString_FunctionalOperator
	 *     Object_Boolean_toString_FunctionalOperator returns Object_Boolean_toString_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_Object_Boolean_toString_FunctionalOperator(ISerializationContext context, Object_Boolean_toString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Object_CalculateableParameter returns Object_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_Object_CalculateableParameter(ISerializationContext context, Object_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObject_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CharSequence_ExpressionOperator returns Object_CharSequence_equals_FunctionalOperator
	 *     CharSequence_FunctionalOperator_Begin returns Object_CharSequence_equals_FunctionalOperator
	 *     CharSequence_FunctionalOperator returns Object_CharSequence_equals_FunctionalOperator
	 *     Object_CharSequence_equals_FunctionalOperator returns Object_CharSequence_equals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? obj=Object_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Object_CharSequence_equals_FunctionalOperator(ISerializationContext context, Object_CharSequence_equals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CharSequence_ExpressionOperator returns Object_CharSequence_hashCode_FunctionalOperator
	 *     CharSequence_FunctionalOperator_Begin returns Object_CharSequence_hashCode_FunctionalOperator
	 *     CharSequence_FunctionalOperator returns Object_CharSequence_hashCode_FunctionalOperator
	 *     Object_CharSequence_hashCode_FunctionalOperator returns Object_CharSequence_hashCode_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=Integer_FunctionalOperator?
	 */
	protected void sequence_Object_CharSequence_hashCode_FunctionalOperator(ISerializationContext context, Object_CharSequence_hashCode_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CharSequence_ExpressionOperator returns Object_CharSequence_toString_FunctionalOperator
	 *     CharSequence_FunctionalOperator_Begin returns Object_CharSequence_toString_FunctionalOperator
	 *     CharSequence_FunctionalOperator returns Object_CharSequence_toString_FunctionalOperator
	 *     Object_CharSequence_toString_FunctionalOperator returns Object_CharSequence_toString_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_Object_CharSequence_toString_FunctionalOperator(ISerializationContext context, Object_CharSequence_toString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Character_ExpressionOperator returns Object_Character_equals_FunctionalOperator
	 *     Character_FunctionalOperator_Begin returns Object_Character_equals_FunctionalOperator
	 *     Character_FunctionalOperator returns Object_Character_equals_FunctionalOperator
	 *     Object_Character_equals_FunctionalOperator returns Object_Character_equals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? obj=Object_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Object_Character_equals_FunctionalOperator(ISerializationContext context, Object_Character_equals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Character_ExpressionOperator returns Object_Character_hashCode_FunctionalOperator
	 *     Character_FunctionalOperator_Begin returns Object_Character_hashCode_FunctionalOperator
	 *     Character_FunctionalOperator returns Object_Character_hashCode_FunctionalOperator
	 *     Object_Character_hashCode_FunctionalOperator returns Object_Character_hashCode_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=Integer_FunctionalOperator?
	 */
	protected void sequence_Object_Character_hashCode_FunctionalOperator(ISerializationContext context, Object_Character_hashCode_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Character_ExpressionOperator returns Object_Character_toString_FunctionalOperator
	 *     Character_FunctionalOperator_Begin returns Object_Character_toString_FunctionalOperator
	 *     Character_FunctionalOperator returns Object_Character_toString_FunctionalOperator
	 *     Object_Character_toString_FunctionalOperator returns Object_Character_toString_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_Object_Character_toString_FunctionalOperator(ISerializationContext context, Object_Character_toString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Object_FunctionalParameter returns Object_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_Object_FunctionalParameter(ISerializationContext context, Object_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObject_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Number_ExpressionOperator returns Object_Number_equals_FunctionalOperator
	 *     Number_FunctionalOperator_Begin returns Object_Number_equals_FunctionalOperator
	 *     Number_FunctionalOperator returns Object_Number_equals_FunctionalOperator
	 *     Object_Number_equals_FunctionalOperator returns Object_Number_equals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? obj=Object_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_Object_Number_equals_FunctionalOperator(ISerializationContext context, Object_Number_equals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number_ExpressionOperator returns Object_Number_hashCode_FunctionalOperator
	 *     Number_FunctionalOperator_Begin returns Object_Number_hashCode_FunctionalOperator
	 *     Number_FunctionalOperator returns Object_Number_hashCode_FunctionalOperator
	 *     Object_Number_hashCode_FunctionalOperator returns Object_Number_hashCode_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=Integer_FunctionalOperator?
	 */
	protected void sequence_Object_Number_hashCode_FunctionalOperator(ISerializationContext context, Object_Number_hashCode_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number_ExpressionOperator returns Object_Number_toString_FunctionalOperator
	 *     Number_FunctionalOperator_Begin returns Object_Number_toString_FunctionalOperator
	 *     Number_FunctionalOperator returns Object_Number_toString_FunctionalOperator
	 *     Object_Number_toString_FunctionalOperator returns Object_Number_toString_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_Object_Number_toString_FunctionalOperator(ISerializationContext context, Object_Number_toString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Object_ExpressionOperator returns Object_Or_BitOperator
	 *     Object_BitOperator returns Object_Or_BitOperator
	 *     Object_Or_BitOperator returns Object_Or_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=Object_ExpressionOperator connects+=Object_ExpressionOperator+)
	 */
	protected void sequence_Object_Or_BitOperator(ISerializationContext context, Object_Or_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EvaluationOperator returns Or_EvaluationBitOperator
	 *     EvaluationBitOperator returns Or_EvaluationBitOperator
	 *     Or_EvaluationBitOperator returns Or_EvaluationBitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=EvaluationOperator connects+=EvaluationOperator+)
	 */
	protected void sequence_Or_EvaluationBitOperator(ISerializationContext context, Or_EvaluationBitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Person_Type returns Person
	 *     RootClass returns Person
	 *     Person returns Person
	 *
	 * Constraint:
	 *     (name=ID (EvaluationOperator+=EvaluationOperator | email_AttrEClass+=Person_email_AttrEClass | name_AttrEClass+=Person_name_AttrEClass)*)
	 */
	protected void sequence_Person(ISerializationContext context, Person semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Person_email_AttrEClass returns Person_email_AttrEClass
	 *
	 * Constraint:
	 *     ((negated?='!' | generalized?='*')* name=ID operator=String_ExpressionOperator?)
	 */
	protected void sequence_Person_email_AttrEClass(ISerializationContext context, Person_email_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Person_name_AttrEClass returns Person_name_AttrEClass
	 *
	 * Constraint:
	 *     ((negated?='!' | generalized?='*')* name=ID operator=String_ExpressionOperator?)
	 */
	protected void sequence_Person_name_AttrEClass(ISerializationContext context, Person_name_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Person_Type returns Professor
	 *     Professor_Type returns Professor
	 *     RootClass returns Professor
	 *     Professor returns Professor
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             email_AttrEClass+=Person_email_AttrEClass | 
	 *             name_AttrEClass+=Person_name_AttrEClass | 
	 *             employeeNumber_AttrEClass+=Professor_employeeNumber_AttrEClass | 
	 *             lectures+=Professor_lectures_OrGroup
	 *         )*
	 *     )
	 */
	protected void sequence_Professor(ISerializationContext context, Professor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Professor_employeeNumber_AttrEClass returns Professor_employeeNumber_AttrEClass
	 *
	 * Constraint:
	 *     ((negated?='!' | generalized?='*')* name=ID operator=Integer_ExpressionOperator?)
	 */
	protected void sequence_Professor_employeeNumber_AttrEClass(ISerializationContext context, Professor_employeeNumber_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Professor_lectures_OrGroup returns Course_Reference_OrGroup
	 *
	 * Constraint:
	 *     ((negated?='!' | transitive?='+' | generalized?='*')* name=ID (reference+=[Course|ID] reference+=[Course|ID]*)?)
	 */
	protected void sequence_Professor_lectures_OrGroup(ISerializationContext context, Course_Reference_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SelectClause returns SelectClause
	 *
	 * Constraint:
	 *     (namedElements+=[NamedElement|ID] namedElements+=[NamedElement|ID]*)
	 */
	protected void sequence_SelectClause(ISerializationContext context, SelectClause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns String_And_BitOperator
	 *     String_BitOperator returns String_And_BitOperator
	 *     String_And_BitOperator returns String_And_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=String_ExpressionOperator connects+=String_ExpressionOperator+)
	 */
	protected void sequence_String_And_BitOperator(ISerializationContext context, String_And_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns String_CalculateableElementReferenceArgument
	 *     Calculateable_Argument returns String_CalculateableElementReferenceArgument
	 *     CalculateableElement_ReferenceArgument returns String_CalculateableElementReferenceArgument
	 *     String_CalculateableElementReferenceArgument returns String_CalculateableElementReferenceArgument
	 *
	 * Constraint:
	 *     (reference=[String_CalculateableElement|ID] operator=String_FunctionalOperator?)
	 */
	protected void sequence_String_CalculateableElementReferenceArgument(ISerializationContext context, String_CalculateableElementReferenceArgument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_CalculateableParameter returns String_CalculateableParameter
	 *
	 * Constraint:
	 *     argument=Calculateable_Argument
	 */
	protected void sequence_String_CalculateableParameter(ISerializationContext context, String_CalculateableParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getCalculateableParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getString_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     String_FunctionalParameter returns String_FunctionalParameter
	 *
	 * Constraint:
	 *     argument=FunctionalArgument
	 */
	protected void sequence_String_FunctionalParameter(ISerializationContext context, String_FunctionalParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QmmPackage.eINSTANCE.getFunctionalParameter_Argument()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getString_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0(), semanticObject.getArgument());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns String_Or_BitOperator
	 *     String_BitOperator returns String_Or_BitOperator
	 *     String_Or_BitOperator returns String_Or_BitOperator
	 *
	 * Constraint:
	 *     (negated?='!'? connects+=String_ExpressionOperator connects+=String_ExpressionOperator+)
	 */
	protected void sequence_String_Or_BitOperator(ISerializationContext context, String_Or_BitOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns String_PrimitiveArgument
	 *     PrimitiveArgument returns String_PrimitiveArgument
	 *     String_PrimitiveArgument returns String_PrimitiveArgument
	 *
	 * Constraint:
	 *     (value=STRING operator=String_FunctionalOperator?)
	 */
	protected void sequence_String_PrimitiveArgument(ISerializationContext context, String_PrimitiveArgument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Person_Type returns Student
	 *     Student_Type returns Student
	 *     RootClass returns Student
	 *     Student returns Student
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (
	 *             EvaluationOperator+=EvaluationOperator | 
	 *             email_AttrEClass+=Person_email_AttrEClass | 
	 *             matriculationNumber_AttrEClass+=Student_matriculationNumber_AttrEClass | 
	 *             name_AttrEClass+=Person_name_AttrEClass | 
	 *             attends+=Student_attends_OrGroup
	 *         )*
	 *     )
	 */
	protected void sequence_Student(ISerializationContext context, Student semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Student_attends_OrGroup returns Course_Reference_OrGroup
	 *
	 * Constraint:
	 *     ((negated?='!' | transitive?='+' | generalized?='*')* name=ID (reference+=[Course|ID] reference+=[Course|ID]*)?)
	 */
	protected void sequence_Student_attends_OrGroup(ISerializationContext context, Course_Reference_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Student_matriculationNumber_AttrEClass returns Student_matriculationNumber_AttrEClass
	 *
	 * Constraint:
	 *     ((negated?='!' | generalized?='*')* name=ID operator=Integer_ExpressionOperator?)
	 */
	protected void sequence_Student_matriculationNumber_AttrEClass(ISerializationContext context, Student_matriculationNumber_AttrEClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns Sum_AggregationOperator_Double
	 *     Calculateable_Argument returns Sum_AggregationOperator_Double
	 *     EvaluationOperation_Argument returns Sum_AggregationOperator_Double
	 *     Double_EvaluationOperation_Argument returns Sum_AggregationOperator_Double
	 *     EvaluationOperator returns Sum_AggregationOperator_Double
	 *     EvaluationFunctionalOperator returns Sum_AggregationOperator_Double
	 *     AggregationOperator returns Sum_AggregationOperator_Double
	 *     CalculatingAggregationOperator returns Sum_AggregationOperator_Double
	 *     Sum_AggregationOperator_Double returns Sum_AggregationOperator_Double
	 *
	 * Constraint:
	 *     (calculateable=Double_CalculateableParameter operator=Double_FunctionalOperator?)
	 */
	protected void sequence_Sum_AggregationOperator_Double(ISerializationContext context, Sum_AggregationOperator_Double semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalArgument returns Sum_AggregationOperator_Integer
	 *     Calculateable_Argument returns Sum_AggregationOperator_Integer
	 *     EvaluationOperation_Argument returns Sum_AggregationOperator_Integer
	 *     Integer_EvaluationOperation_Argument returns Sum_AggregationOperator_Integer
	 *     EvaluationOperator returns Sum_AggregationOperator_Integer
	 *     EvaluationFunctionalOperator returns Sum_AggregationOperator_Integer
	 *     AggregationOperator returns Sum_AggregationOperator_Integer
	 *     CalculatingAggregationOperator returns Sum_AggregationOperator_Integer
	 *     Sum_AggregationOperator_Integer returns Sum_AggregationOperator_Integer
	 *
	 * Constraint:
	 *     (calculateable=Integer_CalculateableParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_Sum_AggregationOperator_Integer(ISerializationContext context, Sum_AggregationOperator_Integer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UniversityManagementSystem_Type returns UniversityManagementSystem
	 *     RootClass returns UniversityManagementSystem
	 *     UniversityManagementSystem returns UniversityManagementSystem
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (EvaluationOperator+=EvaluationOperator | person+=UniversityManagementSystem_person_OrGroup | course+=UniversityManagementSystem_course_OrGroup)*
	 *     )
	 */
	protected void sequence_UniversityManagementSystem(ISerializationContext context, UniversityManagementSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UniversityManagementSystem_course_OrGroup returns Course_Containment_OrGroup
	 *
	 * Constraint:
	 *     ((negated?='!' | transitive?='+' | generalized?='*')* name=ID (containment+=Course_Type containment+=Course_Type*)?)
	 */
	protected void sequence_UniversityManagementSystem_course_OrGroup(ISerializationContext context, Course_Containment_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UniversityManagementSystem_person_OrGroup returns Person_Containment_OrGroup
	 *
	 * Constraint:
	 *     ((negated?='!' | transitive?='+' | generalized?='*')* name=ID (containment+=Person_Type containment+=Person_Type*)?)
	 */
	protected void sequence_UniversityManagementSystem_person_OrGroup(ISerializationContext context, Person_Containment_OrGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns charAt_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns charAt_FunctionalOperator
	 *     String_FunctionalOperator returns charAt_FunctionalOperator
	 *     charAt_FunctionalOperator returns charAt_FunctionalOperator
	 *
	 * Constraint:
	 *     (i=Integer_FunctionalParameter operator=Character_FunctionalOperator?)
	 */
	protected void sequence_charAt_FunctionalOperator(ISerializationContext context, charAt_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns codePointAt_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns codePointAt_FunctionalOperator
	 *     String_FunctionalOperator returns codePointAt_FunctionalOperator
	 *     codePointAt_FunctionalOperator returns codePointAt_FunctionalOperator
	 *
	 * Constraint:
	 *     (index=Integer_FunctionalParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_codePointAt_FunctionalOperator(ISerializationContext context, codePointAt_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns codePointBefore_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns codePointBefore_FunctionalOperator
	 *     String_FunctionalOperator returns codePointBefore_FunctionalOperator
	 *     codePointBefore_FunctionalOperator returns codePointBefore_FunctionalOperator
	 *
	 * Constraint:
	 *     (index=Integer_FunctionalParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_codePointBefore_FunctionalOperator(ISerializationContext context, codePointBefore_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Boolean_ExpressionOperator returns compareToBoolean_FunctionalOperator
	 *     Boolean_FunctionalOperator_Begin returns compareToBoolean_FunctionalOperator
	 *     Boolean_FunctionalOperator returns compareToBoolean_FunctionalOperator
	 *     compareToBoolean_FunctionalOperator returns compareToBoolean_FunctionalOperator
	 *
	 * Constraint:
	 *     (b=Boolean_FunctionalParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_compareToBoolean_FunctionalOperator(ISerializationContext context, compareToBoolean_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns compareToStringIgnoreCase_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns compareToStringIgnoreCase_FunctionalOperator
	 *     String_FunctionalOperator returns compareToStringIgnoreCase_FunctionalOperator
	 *     compareToStringIgnoreCase_FunctionalOperator returns compareToStringIgnoreCase_FunctionalOperator
	 *
	 * Constraint:
	 *     (str=String_FunctionalParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_compareToStringIgnoreCase_FunctionalOperator(ISerializationContext context, compareToStringIgnoreCase_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns compareToString_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns compareToString_FunctionalOperator
	 *     String_FunctionalOperator returns compareToString_FunctionalOperator
	 *     compareToString_FunctionalOperator returns compareToString_FunctionalOperator
	 *
	 * Constraint:
	 *     (anotherString=String_FunctionalParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_compareToString_FunctionalOperator(ISerializationContext context, compareToString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns concat_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns concat_FunctionalOperator
	 *     String_FunctionalOperator returns concat_FunctionalOperator
	 *     concat_FunctionalOperator returns concat_FunctionalOperator
	 *
	 * Constraint:
	 *     (str=String_FunctionalParameter operator=String_FunctionalOperator?)
	 */
	protected void sequence_concat_FunctionalOperator(ISerializationContext context, concat_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns contains_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns contains_FunctionalOperator
	 *     String_FunctionalOperator returns contains_FunctionalOperator
	 *     contains_FunctionalOperator returns contains_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? charSequence=CharSequence_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_contains_FunctionalOperator(ISerializationContext context, contains_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Integer_ExpressionOperator returns doubleValue_FunctionalOperator
	 *     Integer_FunctionalOperator_Begin returns doubleValue_FunctionalOperator
	 *     Integer_FunctionalOperator returns doubleValue_FunctionalOperator
	 *     doubleValue_FunctionalOperator returns doubleValue_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=Double_FunctionalOperator?
	 */
	protected void sequence_doubleValue_FunctionalOperator(ISerializationContext context, doubleValue_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns endsWith_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns endsWith_FunctionalOperator
	 *     String_FunctionalOperator returns endsWith_FunctionalOperator
	 *     endsWith_FunctionalOperator returns endsWith_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? suffix=String_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_endsWith_FunctionalOperator(ISerializationContext context, endsWith_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns equalsIgnoreCase_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns equalsIgnoreCase_FunctionalOperator
	 *     String_FunctionalOperator returns equalsIgnoreCase_FunctionalOperator
	 *     equalsIgnoreCase_FunctionalOperator returns equalsIgnoreCase_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? anotherString=String_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_equalsIgnoreCase_FunctionalOperator(ISerializationContext context, equalsIgnoreCase_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Object_ExpressionOperator returns equals_FunctionalOperator
	 *     Object_FunctionalOperator_Begin returns equals_FunctionalOperator
	 *     Object_FunctionalOperator returns equals_FunctionalOperator
	 *     equals_FunctionalOperator returns equals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? obj=Object_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_equals_FunctionalOperator(ISerializationContext context, equals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number_ExpressionOperator returns greaterEquals_FunctionalOperator
	 *     Number_FunctionalOperator_Begin returns greaterEquals_FunctionalOperator
	 *     Number_FunctionalOperator returns greaterEquals_FunctionalOperator
	 *     greaterEquals_FunctionalOperator returns greaterEquals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_greaterEquals_FunctionalOperator(ISerializationContext context, greaterEquals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number_ExpressionOperator returns greaterThan_FunctionalOperator
	 *     Number_FunctionalOperator_Begin returns greaterThan_FunctionalOperator
	 *     Number_FunctionalOperator returns greaterThan_FunctionalOperator
	 *     greaterThan_FunctionalOperator returns greaterThan_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_greaterThan_FunctionalOperator(ISerializationContext context, greaterThan_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Object_ExpressionOperator returns hashCode_FunctionalOperator
	 *     Object_FunctionalOperator_Begin returns hashCode_FunctionalOperator
	 *     Object_FunctionalOperator returns hashCode_FunctionalOperator
	 *     hashCode_FunctionalOperator returns hashCode_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=Integer_FunctionalOperator?
	 */
	protected void sequence_hashCode_FunctionalOperator(ISerializationContext context, hashCode_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns indexOfCharFromIndex_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns indexOfCharFromIndex_FunctionalOperator
	 *     String_FunctionalOperator returns indexOfCharFromIndex_FunctionalOperator
	 *     indexOfCharFromIndex_FunctionalOperator returns indexOfCharFromIndex_FunctionalOperator
	 *
	 * Constraint:
	 *     (ch=Integer_FunctionalParameter fromIndex=Integer_FunctionalParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_indexOfCharFromIndex_FunctionalOperator(ISerializationContext context, indexOfCharFromIndex_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns indexOfChar_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns indexOfChar_FunctionalOperator
	 *     String_FunctionalOperator returns indexOfChar_FunctionalOperator
	 *     indexOfChar_FunctionalOperator returns indexOfChar_FunctionalOperator
	 *
	 * Constraint:
	 *     (ch=Integer_FunctionalParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_indexOfChar_FunctionalOperator(ISerializationContext context, indexOfChar_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns indexOfString_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns indexOfString_FunctionalOperator
	 *     String_FunctionalOperator returns indexOfString_FunctionalOperator
	 *     indexOfString_FunctionalOperator returns indexOfString_FunctionalOperator
	 *
	 * Constraint:
	 *     (str=String_FunctionalParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_indexOfString_FunctionalOperator(ISerializationContext context, indexOfString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns isEmpty_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns isEmpty_FunctionalOperator
	 *     String_FunctionalOperator returns isEmpty_FunctionalOperator
	 *     isEmpty_FunctionalOperator returns isEmpty_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_isEmpty_FunctionalOperator(ISerializationContext context, isEmpty_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CharSequence_ExpressionOperator returns length_FunctionalOperator
	 *     CharSequence_FunctionalOperator_Begin returns length_FunctionalOperator
	 *     CharSequence_FunctionalOperator returns length_FunctionalOperator
	 *     length_FunctionalOperator returns length_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=Integer_FunctionalOperator?
	 */
	protected void sequence_length_FunctionalOperator(ISerializationContext context, length_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns offsetByCodePoints_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns offsetByCodePoints_FunctionalOperator
	 *     String_FunctionalOperator returns offsetByCodePoints_FunctionalOperator
	 *     offsetByCodePoints_FunctionalOperator returns offsetByCodePoints_FunctionalOperator
	 *
	 * Constraint:
	 *     (index=Integer_FunctionalParameter codePointOffset=Integer_FunctionalParameter operator=Integer_FunctionalOperator?)
	 */
	protected void sequence_offsetByCodePoints_FunctionalOperator(ISerializationContext context, offsetByCodePoints_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Boolean_ExpressionOperator returns parseBoolean_FunctionalOperator
	 *     Boolean_FunctionalOperator_Begin returns parseBoolean_FunctionalOperator
	 *     Boolean_FunctionalOperator returns parseBoolean_FunctionalOperator
	 *     parseBoolean_FunctionalOperator returns parseBoolean_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? s=String_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_parseBoolean_FunctionalOperator(ISerializationContext context, parseBoolean_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number_ExpressionOperator returns smallerEquals_FunctionalOperator
	 *     Number_FunctionalOperator_Begin returns smallerEquals_FunctionalOperator
	 *     Number_FunctionalOperator returns smallerEquals_FunctionalOperator
	 *     smallerEquals_FunctionalOperator returns smallerEquals_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_smallerEquals_FunctionalOperator(ISerializationContext context, smallerEquals_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number_ExpressionOperator returns smallerThan_FunctionalOperator
	 *     Number_FunctionalOperator_Begin returns smallerThan_FunctionalOperator
	 *     Number_FunctionalOperator returns smallerThan_FunctionalOperator
	 *     smallerThan_FunctionalOperator returns smallerThan_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? i=Number_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_smallerThan_FunctionalOperator(ISerializationContext context, smallerThan_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns startsWithOffset_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns startsWithOffset_FunctionalOperator
	 *     String_FunctionalOperator returns startsWithOffset_FunctionalOperator
	 *     startsWithOffset_FunctionalOperator returns startsWithOffset_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? prefix=String_FunctionalParameter toffset=Integer_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_startsWithOffset_FunctionalOperator(ISerializationContext context, startsWithOffset_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns startsWith_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns startsWith_FunctionalOperator
	 *     String_FunctionalOperator returns startsWith_FunctionalOperator
	 *     startsWith_FunctionalOperator returns startsWith_FunctionalOperator
	 *
	 * Constraint:
	 *     (negated?='!'? prefix=String_FunctionalParameter operator=Boolean_FunctionalOperator?)
	 */
	protected void sequence_startsWith_FunctionalOperator(ISerializationContext context, startsWith_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns substring_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns substring_FunctionalOperator
	 *     String_FunctionalOperator returns substring_FunctionalOperator
	 *     substring_FunctionalOperator returns substring_FunctionalOperator
	 *
	 * Constraint:
	 *     (startIndex=Integer_FunctionalParameter endIndex=Integer_FunctionalParameter operator=String_FunctionalOperator?)
	 */
	protected void sequence_substring_FunctionalOperator(ISerializationContext context, substring_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns toLowerCase_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns toLowerCase_FunctionalOperator
	 *     String_FunctionalOperator returns toLowerCase_FunctionalOperator
	 *     toLowerCase_FunctionalOperator returns toLowerCase_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_toLowerCase_FunctionalOperator(ISerializationContext context, toLowerCase_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Object_ExpressionOperator returns toString_FunctionalOperator
	 *     Object_FunctionalOperator_Begin returns toString_FunctionalOperator
	 *     Object_FunctionalOperator returns toString_FunctionalOperator
	 *     toString_FunctionalOperator returns toString_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_toString_FunctionalOperator(ISerializationContext context, toString_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns toUpperCase_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns toUpperCase_FunctionalOperator
	 *     String_FunctionalOperator returns toUpperCase_FunctionalOperator
	 *     toUpperCase_FunctionalOperator returns toUpperCase_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_toUpperCase_FunctionalOperator(ISerializationContext context, toUpperCase_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     String_ExpressionOperator returns trim_FunctionalOperator
	 *     String_FunctionalOperator_Begin returns trim_FunctionalOperator
	 *     String_FunctionalOperator returns trim_FunctionalOperator
	 *     trim_FunctionalOperator returns trim_FunctionalOperator
	 *
	 * Constraint:
	 *     operator=String_FunctionalOperator?
	 */
	protected void sequence_trim_FunctionalOperator(ISerializationContext context, trim_FunctionalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
