/*
 * generated by Xtext 2.14.0
 */
grammar InternalMQL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.MQLGrammarAccess;

}

@parser::members {

 	private MQLGrammarAccess grammarAccess;

    public InternalMQLParser(TokenStream input, MQLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "FindQueryCollection";
   	}

   	@Override
   	protected MQLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFindQueryCollection
entryRuleFindQueryCollection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFindQueryCollectionRule()); }
	iv_ruleFindQueryCollection=ruleFindQueryCollection
	{ $current=$iv_ruleFindQueryCollection.current; }
	EOF;

// Rule FindQueryCollection
ruleFindQueryCollection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFindQueryCollectionAccess().getFindQueryCollectionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFindQueryCollectionAccess().getFindQueriesFindQueryParserRuleCall_1_0());
				}
				lv_findQueries_1_0=ruleFindQuery
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFindQueryCollectionRule());
					}
					add(
						$current,
						"findQueries",
						lv_findQueries_1_0,
						"org.xtext.MQL.FindQuery");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='union'
			{
				newLeafNode(otherlv_2, grammarAccess.getFindQueryCollectionAccess().getUnionKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFindQueryCollectionAccess().getFindQueriesFindQueryParserRuleCall_2_1_0());
					}
					lv_findQueries_3_0=ruleFindQuery
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFindQueryCollectionRule());
						}
						add(
							$current,
							"findQueries",
							lv_findQueries_3_0,
							"org.xtext.MQL.FindQuery");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFindQuery
entryRuleFindQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFindQueryRule()); }
	iv_ruleFindQuery=ruleFindQuery
	{ $current=$iv_ruleFindQuery.current; }
	EOF;

// Rule FindQuery
ruleFindQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFindQueryAccess().getFindQueryAction_0(),
					$current);
			}
		)
		otherlv_1='Find'
		{
			newLeafNode(otherlv_1, grammarAccess.getFindQueryAccess().getFindKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFindQueryAccess().getRootClassRootClassParserRuleCall_2_0_0());
					}
					lv_rootClass_2_0=ruleRootClass
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFindQueryRule());
						}
						add(
							$current,
							"rootClass",
							lv_rootClass_2_0,
							"org.xtext.MQL.RootClass");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getFindQueryAccess().getSemicolonKeyword_2_1());
			}
		)+
		(
			otherlv_4='Select'
			{
				newLeafNode(otherlv_4, grammarAccess.getFindQueryAccess().getSelectKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFindQueryAccess().getSelectSelectClauseParserRuleCall_3_1_0());
					}
					lv_select_5_0=ruleSelectClause
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFindQueryRule());
						}
						set(
							$current,
							"select",
							lv_select_5_0,
							"org.xtext.MQL.SelectClause");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleSelectClause
entryRuleSelectClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectClauseRule()); }
	iv_ruleSelectClause=ruleSelectClause
	{ $current=$iv_ruleSelectClause.current; }
	EOF;

// Rule SelectClause
ruleSelectClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSelectClauseAccess().getSelectClauseAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelectClauseRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getSelectClauseAccess().getNamedElementsNamedElementCrossReference_1_0());
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getSelectClauseAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSelectClauseRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getSelectClauseAccess().getNamedElementsNamedElementCrossReference_2_1_0());
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getSelectClauseAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRulePerson_Type
entryRulePerson_Type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPerson_TypeRule()); }
	iv_rulePerson_Type=rulePerson_Type
	{ $current=$iv_rulePerson_Type.current; }
	EOF;

// Rule Person_Type
rulePerson_Type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPerson_TypeAccess().getPersonParserRuleCall_0());
		}
		this_Person_0=rulePerson
		{
			$current = $this_Person_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPerson_TypeAccess().getProfessorParserRuleCall_1());
		}
		this_Professor_1=ruleProfessor
		{
			$current = $this_Professor_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPerson_TypeAccess().getStudentParserRuleCall_2());
		}
		this_Student_2=ruleStudent
		{
			$current = $this_Student_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExam_Type
entryRuleExam_Type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExam_TypeRule()); }
	iv_ruleExam_Type=ruleExam_Type
	{ $current=$iv_ruleExam_Type.current; }
	EOF;

// Rule Exam_Type
ruleExam_Type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExam_TypeAccess().getExamParserRuleCall());
	}
	this_Exam_0=ruleExam
	{
		$current = $this_Exam_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleCourse_Type
entryRuleCourse_Type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCourse_TypeRule()); }
	iv_ruleCourse_Type=ruleCourse_Type
	{ $current=$iv_ruleCourse_Type.current; }
	EOF;

// Rule Course_Type
ruleCourse_Type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getCourse_TypeAccess().getCourseParserRuleCall());
	}
	this_Course_0=ruleCourse
	{
		$current = $this_Course_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleRootClass
entryRuleRootClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRootClassRule()); }
	iv_ruleRootClass=ruleRootClass
	{ $current=$iv_ruleRootClass.current; }
	EOF;

// Rule RootClass
ruleRootClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRootClassAccess().getPersonParserRuleCall_0());
		}
		this_Person_0=rulePerson
		{
			$current = $this_Person_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRootClassAccess().getStudentParserRuleCall_1());
		}
		this_Student_1=ruleStudent
		{
			$current = $this_Student_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRootClassAccess().getProfessorParserRuleCall_2());
		}
		this_Professor_2=ruleProfessor
		{
			$current = $this_Professor_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRootClassAccess().getCourseParserRuleCall_3());
		}
		this_Course_3=ruleCourse
		{
			$current = $this_Course_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRootClassAccess().getUniversityManagementSystemParserRuleCall_4());
		}
		this_UniversityManagementSystem_4=ruleUniversityManagementSystem
		{
			$current = $this_UniversityManagementSystem_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRootClassAccess().getExamParserRuleCall_5());
		}
		this_Exam_5=ruleExam
		{
			$current = $this_Exam_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePerson
entryRulePerson returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPersonRule()); }
	iv_rulePerson=rulePerson
	{ $current=$iv_rulePerson.current; }
	EOF;

// Rule Person
rulePerson returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPersonAccess().getPersonAction_0(),
					$current);
			}
		)
		otherlv_1='Person'
		{
			newLeafNode(otherlv_1, grammarAccess.getPersonAccess().getPersonKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getPersonAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPersonRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getPersonAccess().getLeftCurlyBracketKeyword_3_0());
			}
			(
				(
					otherlv_4='eval:'
					{
						newLeafNode(otherlv_4, grammarAccess.getPersonAccess().getEvalKeyword_3_1_0_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getPersonAccess().getEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0());
							}
							lv_EvaluationOperator_5_0=ruleEvaluationOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getPersonRule());
								}
								add(
									$current,
									"EvaluationOperator",
									lv_EvaluationOperator_5_0,
									"org.xtext.MQL.EvaluationOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_6=';'
					{
						newLeafNode(otherlv_6, grammarAccess.getPersonAccess().getSemicolonKeyword_3_1_0_2());
					}
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getPersonAccess().getEmail_AttrEClassPerson_email_AttrEClassParserRuleCall_3_1_1_0());
						}
						lv_email_AttrEClass_7_0=rulePerson_email_AttrEClass
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPersonRule());
							}
							add(
								$current,
								"email_AttrEClass",
								lv_email_AttrEClass_7_0,
								"org.xtext.MQL.Person_email_AttrEClass");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getPersonAccess().getName_AttrEClassPerson_name_AttrEClassParserRuleCall_3_1_2_0());
						}
						lv_name_AttrEClass_8_0=rulePerson_name_AttrEClass
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPersonRule());
							}
							add(
								$current,
								"name_AttrEClass",
								lv_name_AttrEClass_8_0,
								"org.xtext.MQL.Person_name_AttrEClass");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_9='}'
			{
				newLeafNode(otherlv_9, grammarAccess.getPersonAccess().getRightCurlyBracketKeyword_3_2());
			}
		)?
	)
;

// Entry rule entryRuleStudent
entryRuleStudent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStudentRule()); }
	iv_ruleStudent=ruleStudent
	{ $current=$iv_ruleStudent.current; }
	EOF;

// Rule Student
ruleStudent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStudentAccess().getStudentAction_0(),
					$current);
			}
		)
		otherlv_1='Student'
		{
			newLeafNode(otherlv_1, grammarAccess.getStudentAccess().getStudentKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getStudentAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStudentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getStudentAccess().getLeftCurlyBracketKeyword_3_0());
			}
			(
				(
					otherlv_4='eval:'
					{
						newLeafNode(otherlv_4, grammarAccess.getStudentAccess().getEvalKeyword_3_1_0_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getStudentAccess().getEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0());
							}
							lv_EvaluationOperator_5_0=ruleEvaluationOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getStudentRule());
								}
								add(
									$current,
									"EvaluationOperator",
									lv_EvaluationOperator_5_0,
									"org.xtext.MQL.EvaluationOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_6=';'
					{
						newLeafNode(otherlv_6, grammarAccess.getStudentAccess().getSemicolonKeyword_3_1_0_2());
					}
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getStudentAccess().getEmail_AttrEClassPerson_email_AttrEClassParserRuleCall_3_1_1_0());
						}
						lv_email_AttrEClass_7_0=rulePerson_email_AttrEClass
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStudentRule());
							}
							add(
								$current,
								"email_AttrEClass",
								lv_email_AttrEClass_7_0,
								"org.xtext.MQL.Person_email_AttrEClass");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getStudentAccess().getMatriculationNumber_AttrEClassStudent_matriculationNumber_AttrEClassParserRuleCall_3_1_2_0());
						}
						lv_matriculationNumber_AttrEClass_8_0=ruleStudent_matriculationNumber_AttrEClass
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStudentRule());
							}
							add(
								$current,
								"matriculationNumber_AttrEClass",
								lv_matriculationNumber_AttrEClass_8_0,
								"org.xtext.MQL.Student_matriculationNumber_AttrEClass");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getStudentAccess().getName_AttrEClassPerson_name_AttrEClassParserRuleCall_3_1_3_0());
						}
						lv_name_AttrEClass_9_0=rulePerson_name_AttrEClass
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStudentRule());
							}
							add(
								$current,
								"name_AttrEClass",
								lv_name_AttrEClass_9_0,
								"org.xtext.MQL.Person_name_AttrEClass");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getStudentAccess().getAttendsStudent_attends_OrGroupParserRuleCall_3_1_4_0());
						}
						lv_attends_10_0=ruleStudent_attends_OrGroup
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStudentRule());
							}
							add(
								$current,
								"attends",
								lv_attends_10_0,
								"org.xtext.MQL.Student_attends_OrGroup");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_11='}'
			{
				newLeafNode(otherlv_11, grammarAccess.getStudentAccess().getRightCurlyBracketKeyword_3_2());
			}
		)?
	)
;

// Entry rule entryRuleProfessor
entryRuleProfessor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProfessorRule()); }
	iv_ruleProfessor=ruleProfessor
	{ $current=$iv_ruleProfessor.current; }
	EOF;

// Rule Professor
ruleProfessor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getProfessorAccess().getProfessorAction_0(),
					$current);
			}
		)
		otherlv_1='Professor'
		{
			newLeafNode(otherlv_1, grammarAccess.getProfessorAccess().getProfessorKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getProfessorAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProfessorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getProfessorAccess().getLeftCurlyBracketKeyword_3_0());
			}
			(
				(
					otherlv_4='eval:'
					{
						newLeafNode(otherlv_4, grammarAccess.getProfessorAccess().getEvalKeyword_3_1_0_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getProfessorAccess().getEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0());
							}
							lv_EvaluationOperator_5_0=ruleEvaluationOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getProfessorRule());
								}
								add(
									$current,
									"EvaluationOperator",
									lv_EvaluationOperator_5_0,
									"org.xtext.MQL.EvaluationOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_6=';'
					{
						newLeafNode(otherlv_6, grammarAccess.getProfessorAccess().getSemicolonKeyword_3_1_0_2());
					}
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getProfessorAccess().getEmail_AttrEClassPerson_email_AttrEClassParserRuleCall_3_1_1_0());
						}
						lv_email_AttrEClass_7_0=rulePerson_email_AttrEClass
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProfessorRule());
							}
							add(
								$current,
								"email_AttrEClass",
								lv_email_AttrEClass_7_0,
								"org.xtext.MQL.Person_email_AttrEClass");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getProfessorAccess().getName_AttrEClassPerson_name_AttrEClassParserRuleCall_3_1_2_0());
						}
						lv_name_AttrEClass_8_0=rulePerson_name_AttrEClass
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProfessorRule());
							}
							add(
								$current,
								"name_AttrEClass",
								lv_name_AttrEClass_8_0,
								"org.xtext.MQL.Person_name_AttrEClass");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getProfessorAccess().getEmployeeNumber_AttrEClassProfessor_employeeNumber_AttrEClassParserRuleCall_3_1_3_0());
						}
						lv_employeeNumber_AttrEClass_9_0=ruleProfessor_employeeNumber_AttrEClass
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProfessorRule());
							}
							add(
								$current,
								"employeeNumber_AttrEClass",
								lv_employeeNumber_AttrEClass_9_0,
								"org.xtext.MQL.Professor_employeeNumber_AttrEClass");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getProfessorAccess().getLecturesProfessor_lectures_OrGroupParserRuleCall_3_1_4_0());
						}
						lv_lectures_10_0=ruleProfessor_lectures_OrGroup
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProfessorRule());
							}
							add(
								$current,
								"lectures",
								lv_lectures_10_0,
								"org.xtext.MQL.Professor_lectures_OrGroup");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_11='}'
			{
				newLeafNode(otherlv_11, grammarAccess.getProfessorAccess().getRightCurlyBracketKeyword_3_2());
			}
		)?
	)
;

// Entry rule entryRuleCourse
entryRuleCourse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCourseRule()); }
	iv_ruleCourse=ruleCourse
	{ $current=$iv_ruleCourse.current; }
	EOF;

// Rule Course
ruleCourse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCourseAccess().getCourseAction_0(),
					$current);
			}
		)
		otherlv_1='Course'
		{
			newLeafNode(otherlv_1, grammarAccess.getCourseAccess().getCourseKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getCourseAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCourseRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getCourseAccess().getLeftCurlyBracketKeyword_3_0());
			}
			(
				(
					otherlv_4='eval:'
					{
						newLeafNode(otherlv_4, grammarAccess.getCourseAccess().getEvalKeyword_3_1_0_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getCourseAccess().getEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0());
							}
							lv_EvaluationOperator_5_0=ruleEvaluationOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getCourseRule());
								}
								add(
									$current,
									"EvaluationOperator",
									lv_EvaluationOperator_5_0,
									"org.xtext.MQL.EvaluationOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_6=';'
					{
						newLeafNode(otherlv_6, grammarAccess.getCourseAccess().getSemicolonKeyword_3_1_0_2());
					}
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getCourseAccess().getCourseNumber_AttrEClassCourse_courseNumber_AttrEClassParserRuleCall_3_1_1_0());
						}
						lv_courseNumber_AttrEClass_7_0=ruleCourse_courseNumber_AttrEClass
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCourseRule());
							}
							add(
								$current,
								"courseNumber_AttrEClass",
								lv_courseNumber_AttrEClass_7_0,
								"org.xtext.MQL.Course_courseNumber_AttrEClass");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getCourseAccess().getExamCourse_exam_OrGroupParserRuleCall_3_1_2_0());
						}
						lv_exam_8_0=ruleCourse_exam_OrGroup
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCourseRule());
							}
							add(
								$current,
								"exam",
								lv_exam_8_0,
								"org.xtext.MQL.Course_exam_OrGroup");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getCourseAccess().getMandatoryForCourse_mandatoryFor_OrGroupParserRuleCall_3_1_3_0());
						}
						lv_mandatoryFor_9_0=ruleCourse_mandatoryFor_OrGroup
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCourseRule());
							}
							add(
								$current,
								"mandatoryFor",
								lv_mandatoryFor_9_0,
								"org.xtext.MQL.Course_mandatoryFor_OrGroup");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getCourseAccess().getName_AttrEClassCourse_name_AttrEClassParserRuleCall_3_1_4_0());
						}
						lv_name_AttrEClass_10_0=ruleCourse_name_AttrEClass
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCourseRule());
							}
							add(
								$current,
								"name_AttrEClass",
								lv_name_AttrEClass_10_0,
								"org.xtext.MQL.Course_name_AttrEClass");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getCourseAccess().getCourseType_AttrEClassCourse_courseType_AttrEClassParserRuleCall_3_2_0_0());
						}
						lv_courseType_AttrEClass_11_0=ruleCourse_courseType_AttrEClass
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCourseRule());
							}
							set(
								$current,
								"courseType_AttrEClass",
								lv_courseType_AttrEClass_11_0,
								"org.xtext.MQL.Course_courseType_AttrEClass");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						otherlv_12='eval:'
						{
							newLeafNode(otherlv_12, grammarAccess.getCourseAccess().getEvalKeyword_3_2_1_0_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getCourseAccess().getEvaluationOperatorEvaluationOperatorParserRuleCall_3_2_1_0_1_0());
								}
								lv_EvaluationOperator_13_0=ruleEvaluationOperator
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getCourseRule());
									}
									add(
										$current,
										"EvaluationOperator",
										lv_EvaluationOperator_13_0,
										"org.xtext.MQL.EvaluationOperator");
									afterParserOrEnumRuleCall();
								}
							)
						)
						otherlv_14=';'
						{
							newLeafNode(otherlv_14, grammarAccess.getCourseAccess().getSemicolonKeyword_3_2_1_0_2());
						}
					)
					    |
					(
						(
							{
								newCompositeNode(grammarAccess.getCourseAccess().getCourseNumber_AttrEClassCourse_courseNumber_AttrEClassParserRuleCall_3_2_1_1_0());
							}
							lv_courseNumber_AttrEClass_15_0=ruleCourse_courseNumber_AttrEClass
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getCourseRule());
								}
								add(
									$current,
									"courseNumber_AttrEClass",
									lv_courseNumber_AttrEClass_15_0,
									"org.xtext.MQL.Course_courseNumber_AttrEClass");
								afterParserOrEnumRuleCall();
							}
						)
					)
					    |
					(
						(
							{
								newCompositeNode(grammarAccess.getCourseAccess().getExamCourse_exam_OrGroupParserRuleCall_3_2_1_2_0());
							}
							lv_exam_16_0=ruleCourse_exam_OrGroup
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getCourseRule());
								}
								add(
									$current,
									"exam",
									lv_exam_16_0,
									"org.xtext.MQL.Course_exam_OrGroup");
								afterParserOrEnumRuleCall();
							}
						)
					)
					    |
					(
						(
							{
								newCompositeNode(grammarAccess.getCourseAccess().getMandatoryForCourse_mandatoryFor_OrGroupParserRuleCall_3_2_1_3_0());
							}
							lv_mandatoryFor_17_0=ruleCourse_mandatoryFor_OrGroup
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getCourseRule());
								}
								add(
									$current,
									"mandatoryFor",
									lv_mandatoryFor_17_0,
									"org.xtext.MQL.Course_mandatoryFor_OrGroup");
								afterParserOrEnumRuleCall();
							}
						)
					)
					    |
					(
						(
							{
								newCompositeNode(grammarAccess.getCourseAccess().getName_AttrEClassCourse_name_AttrEClassParserRuleCall_3_2_1_4_0());
							}
							lv_name_AttrEClass_18_0=ruleCourse_name_AttrEClass
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getCourseRule());
								}
								add(
									$current,
									"name_AttrEClass",
									lv_name_AttrEClass_18_0,
									"org.xtext.MQL.Course_name_AttrEClass");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_19='}'
			{
				newLeafNode(otherlv_19, grammarAccess.getCourseAccess().getRightCurlyBracketKeyword_3_3());
			}
		)?
	)
;

// Entry rule entryRuleUniversityManagementSystem
entryRuleUniversityManagementSystem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUniversityManagementSystemRule()); }
	iv_ruleUniversityManagementSystem=ruleUniversityManagementSystem
	{ $current=$iv_ruleUniversityManagementSystem.current; }
	EOF;

// Rule UniversityManagementSystem
ruleUniversityManagementSystem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getUniversityManagementSystemAccess().getUniversityManagementSystemAction_0(),
					$current);
			}
		)
		otherlv_1='UniversityManagementSystem'
		{
			newLeafNode(otherlv_1, grammarAccess.getUniversityManagementSystemAccess().getUniversityManagementSystemKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getUniversityManagementSystemAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUniversityManagementSystemRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getUniversityManagementSystemAccess().getLeftCurlyBracketKeyword_3_0());
			}
			(
				(
					otherlv_4='eval:'
					{
						newLeafNode(otherlv_4, grammarAccess.getUniversityManagementSystemAccess().getEvalKeyword_3_1_0_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getUniversityManagementSystemAccess().getEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0());
							}
							lv_EvaluationOperator_5_0=ruleEvaluationOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getUniversityManagementSystemRule());
								}
								add(
									$current,
									"EvaluationOperator",
									lv_EvaluationOperator_5_0,
									"org.xtext.MQL.EvaluationOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_6=';'
					{
						newLeafNode(otherlv_6, grammarAccess.getUniversityManagementSystemAccess().getSemicolonKeyword_3_1_0_2());
					}
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getUniversityManagementSystemAccess().getPersonUniversityManagementSystem_person_OrGroupParserRuleCall_3_1_1_0());
						}
						lv_person_7_0=ruleUniversityManagementSystem_person_OrGroup
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getUniversityManagementSystemRule());
							}
							add(
								$current,
								"person",
								lv_person_7_0,
								"org.xtext.MQL.UniversityManagementSystem_person_OrGroup");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getUniversityManagementSystemAccess().getCourseUniversityManagementSystem_course_OrGroupParserRuleCall_3_1_2_0());
						}
						lv_course_8_0=ruleUniversityManagementSystem_course_OrGroup
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getUniversityManagementSystemRule());
							}
							add(
								$current,
								"course",
								lv_course_8_0,
								"org.xtext.MQL.UniversityManagementSystem_course_OrGroup");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_9='}'
			{
				newLeafNode(otherlv_9, grammarAccess.getUniversityManagementSystemAccess().getRightCurlyBracketKeyword_3_2());
			}
		)?
	)
;

// Entry rule entryRuleExam
entryRuleExam returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExamRule()); }
	iv_ruleExam=ruleExam
	{ $current=$iv_ruleExam.current; }
	EOF;

// Rule Exam
ruleExam returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExamAccess().getExamAction_0(),
					$current);
			}
		)
		otherlv_1='Exam'
		{
			newLeafNode(otherlv_1, grammarAccess.getExamAccess().getExamKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getExamAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExamRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getExamAccess().getLeftCurlyBracketKeyword_3_0());
			}
			(
				(
					otherlv_4='eval:'
					{
						newLeafNode(otherlv_4, grammarAccess.getExamAccess().getEvalKeyword_3_1_0_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getExamAccess().getEvaluationOperatorEvaluationOperatorParserRuleCall_3_1_0_1_0());
							}
							lv_EvaluationOperator_5_0=ruleEvaluationOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getExamRule());
								}
								add(
									$current,
									"EvaluationOperator",
									lv_EvaluationOperator_5_0,
									"org.xtext.MQL.EvaluationOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_6=';'
					{
						newLeafNode(otherlv_6, grammarAccess.getExamAccess().getSemicolonKeyword_3_1_0_2());
					}
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getExamAccess().getExamID_AttrEClassExam_examID_AttrEClassParserRuleCall_3_1_1_0());
						}
						lv_examID_AttrEClass_7_0=ruleExam_examID_AttrEClass
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExamRule());
							}
							add(
								$current,
								"examID_AttrEClass",
								lv_examID_AttrEClass_7_0,
								"org.xtext.MQL.Exam_examID_AttrEClass");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_8='}'
			{
				newLeafNode(otherlv_8, grammarAccess.getExamAccess().getRightCurlyBracketKeyword_3_2());
			}
		)?
	)
;

// Entry rule entryRuleProfessor_employeeNumber_AttrEClass
entryRuleProfessor_employeeNumber_AttrEClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProfessor_employeeNumber_AttrEClassRule()); }
	iv_ruleProfessor_employeeNumber_AttrEClass=ruleProfessor_employeeNumber_AttrEClass
	{ $current=$iv_ruleProfessor_employeeNumber_AttrEClass.current; }
	EOF;

// Rule Professor_employeeNumber_AttrEClass
ruleProfessor_employeeNumber_AttrEClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getProfessor_employeeNumber_AttrEClassAccess().getProfessor_employeeNumber_AttrEClassAction_0(),
					$current);
			}
		)
		otherlv_1='employeeNumber'
		{
			newLeafNode(otherlv_1, grammarAccess.getProfessor_employeeNumber_AttrEClassAccess().getEmployeeNumberKeyword_1());
		}
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getProfessor_employeeNumber_AttrEClassAccess().getUnorderedGroup_2());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getProfessor_employeeNumber_AttrEClassAccess().getUnorderedGroup_2(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getProfessor_employeeNumber_AttrEClassAccess().getUnorderedGroup_2(), 0);
					}
								({true}?=>((
									lv_negated_3_0='!'
									{
										newLeafNode(lv_negated_3_0, grammarAccess.getProfessor_employeeNumber_AttrEClassAccess().getNegatedExclamationMarkKeyword_2_0_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getProfessor_employeeNumber_AttrEClassRule());
										}
										setWithLastConsumed($current, "negated", true, "!");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getProfessor_employeeNumber_AttrEClassAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getProfessor_employeeNumber_AttrEClassAccess().getUnorderedGroup_2(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getProfessor_employeeNumber_AttrEClassAccess().getUnorderedGroup_2(), 1);
					}
								({true}?=>((
									lv_generalized_4_0='*'
									{
										newLeafNode(lv_generalized_4_0, grammarAccess.getProfessor_employeeNumber_AttrEClassAccess().getGeneralizedAsteriskKeyword_2_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getProfessor_employeeNumber_AttrEClassRule());
										}
										setWithLastConsumed($current, "generalized", true, "*");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getProfessor_employeeNumber_AttrEClassAccess().getUnorderedGroup_2());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getProfessor_employeeNumber_AttrEClassAccess().getUnorderedGroup_2());
				}
		)
		(
			(
				lv_name_5_0=RULE_ID
				{
					newLeafNode(lv_name_5_0, grammarAccess.getProfessor_employeeNumber_AttrEClassAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProfessor_employeeNumber_AttrEClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_5_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_6=':'
			{
				newLeafNode(otherlv_6, grammarAccess.getProfessor_employeeNumber_AttrEClassAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProfessor_employeeNumber_AttrEClassAccess().getOperatorInteger_ExpressionOperatorParserRuleCall_4_1_0());
					}
					lv_operator_7_0=ruleInteger_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProfessor_employeeNumber_AttrEClassRule());
						}
						set(
							$current,
							"operator",
							lv_operator_7_0,
							"org.xtext.MQL.Integer_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_8=';'
		{
			newLeafNode(otherlv_8, grammarAccess.getProfessor_employeeNumber_AttrEClassAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleStudent_matriculationNumber_AttrEClass
entryRuleStudent_matriculationNumber_AttrEClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStudent_matriculationNumber_AttrEClassRule()); }
	iv_ruleStudent_matriculationNumber_AttrEClass=ruleStudent_matriculationNumber_AttrEClass
	{ $current=$iv_ruleStudent_matriculationNumber_AttrEClass.current; }
	EOF;

// Rule Student_matriculationNumber_AttrEClass
ruleStudent_matriculationNumber_AttrEClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStudent_matriculationNumber_AttrEClassAccess().getStudent_matriculationNumber_AttrEClassAction_0(),
					$current);
			}
		)
		otherlv_1='matriculationNumber'
		{
			newLeafNode(otherlv_1, grammarAccess.getStudent_matriculationNumber_AttrEClassAccess().getMatriculationNumberKeyword_1());
		}
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getStudent_matriculationNumber_AttrEClassAccess().getUnorderedGroup_2());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getStudent_matriculationNumber_AttrEClassAccess().getUnorderedGroup_2(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getStudent_matriculationNumber_AttrEClassAccess().getUnorderedGroup_2(), 0);
					}
								({true}?=>((
									lv_negated_3_0='!'
									{
										newLeafNode(lv_negated_3_0, grammarAccess.getStudent_matriculationNumber_AttrEClassAccess().getNegatedExclamationMarkKeyword_2_0_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getStudent_matriculationNumber_AttrEClassRule());
										}
										setWithLastConsumed($current, "negated", true, "!");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStudent_matriculationNumber_AttrEClassAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getStudent_matriculationNumber_AttrEClassAccess().getUnorderedGroup_2(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getStudent_matriculationNumber_AttrEClassAccess().getUnorderedGroup_2(), 1);
					}
								({true}?=>((
									lv_generalized_4_0='*'
									{
										newLeafNode(lv_generalized_4_0, grammarAccess.getStudent_matriculationNumber_AttrEClassAccess().getGeneralizedAsteriskKeyword_2_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getStudent_matriculationNumber_AttrEClassRule());
										}
										setWithLastConsumed($current, "generalized", true, "*");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStudent_matriculationNumber_AttrEClassAccess().getUnorderedGroup_2());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getStudent_matriculationNumber_AttrEClassAccess().getUnorderedGroup_2());
				}
		)
		(
			(
				lv_name_5_0=RULE_ID
				{
					newLeafNode(lv_name_5_0, grammarAccess.getStudent_matriculationNumber_AttrEClassAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStudent_matriculationNumber_AttrEClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_5_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_6=':'
			{
				newLeafNode(otherlv_6, grammarAccess.getStudent_matriculationNumber_AttrEClassAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStudent_matriculationNumber_AttrEClassAccess().getOperatorInteger_ExpressionOperatorParserRuleCall_4_1_0());
					}
					lv_operator_7_0=ruleInteger_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStudent_matriculationNumber_AttrEClassRule());
						}
						set(
							$current,
							"operator",
							lv_operator_7_0,
							"org.xtext.MQL.Integer_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_8=';'
		{
			newLeafNode(otherlv_8, grammarAccess.getStudent_matriculationNumber_AttrEClassAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRulePerson_name_AttrEClass
entryRulePerson_name_AttrEClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPerson_name_AttrEClassRule()); }
	iv_rulePerson_name_AttrEClass=rulePerson_name_AttrEClass
	{ $current=$iv_rulePerson_name_AttrEClass.current; }
	EOF;

// Rule Person_name_AttrEClass
rulePerson_name_AttrEClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPerson_name_AttrEClassAccess().getPerson_name_AttrEClassAction_0(),
					$current);
			}
		)
		otherlv_1='name'
		{
			newLeafNode(otherlv_1, grammarAccess.getPerson_name_AttrEClassAccess().getNameKeyword_1());
		}
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getPerson_name_AttrEClassAccess().getUnorderedGroup_2());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getPerson_name_AttrEClassAccess().getUnorderedGroup_2(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getPerson_name_AttrEClassAccess().getUnorderedGroup_2(), 0);
					}
								({true}?=>((
									lv_negated_3_0='!'
									{
										newLeafNode(lv_negated_3_0, grammarAccess.getPerson_name_AttrEClassAccess().getNegatedExclamationMarkKeyword_2_0_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getPerson_name_AttrEClassRule());
										}
										setWithLastConsumed($current, "negated", true, "!");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPerson_name_AttrEClassAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getPerson_name_AttrEClassAccess().getUnorderedGroup_2(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getPerson_name_AttrEClassAccess().getUnorderedGroup_2(), 1);
					}
								({true}?=>((
									lv_generalized_4_0='*'
									{
										newLeafNode(lv_generalized_4_0, grammarAccess.getPerson_name_AttrEClassAccess().getGeneralizedAsteriskKeyword_2_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getPerson_name_AttrEClassRule());
										}
										setWithLastConsumed($current, "generalized", true, "*");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPerson_name_AttrEClassAccess().getUnorderedGroup_2());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getPerson_name_AttrEClassAccess().getUnorderedGroup_2());
				}
		)
		(
			(
				lv_name_5_0=RULE_ID
				{
					newLeafNode(lv_name_5_0, grammarAccess.getPerson_name_AttrEClassAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPerson_name_AttrEClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_5_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_6=':'
			{
				newLeafNode(otherlv_6, grammarAccess.getPerson_name_AttrEClassAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPerson_name_AttrEClassAccess().getOperatorString_ExpressionOperatorParserRuleCall_4_1_0());
					}
					lv_operator_7_0=ruleString_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPerson_name_AttrEClassRule());
						}
						set(
							$current,
							"operator",
							lv_operator_7_0,
							"org.xtext.MQL.String_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_8=';'
		{
			newLeafNode(otherlv_8, grammarAccess.getPerson_name_AttrEClassAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleCourse_courseType_AttrEClass
entryRuleCourse_courseType_AttrEClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCourse_courseType_AttrEClassRule()); }
	iv_ruleCourse_courseType_AttrEClass=ruleCourse_courseType_AttrEClass
	{ $current=$iv_ruleCourse_courseType_AttrEClass.current; }
	EOF;

// Rule Course_courseType_AttrEClass
ruleCourse_courseType_AttrEClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCourse_courseType_AttrEClassAccess().getCourse_courseType_AttrEClassAction_0(),
					$current);
			}
		)
		otherlv_1='courseType'
		{
			newLeafNode(otherlv_1, grammarAccess.getCourse_courseType_AttrEClassAccess().getCourseTypeKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getCourse_courseType_AttrEClassAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCourse_courseType_AttrEClassRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getCourse_courseType_AttrEClassAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCourse_courseType_AttrEClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_4=':'
			{
				newLeafNode(otherlv_4, grammarAccess.getCourse_courseType_AttrEClassAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCourse_courseType_AttrEClassAccess().getOperatorCourseType_EnumerationOperatorParserRuleCall_4_1_0());
					}
					lv_operator_5_0=ruleCourseType_EnumerationOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCourse_courseType_AttrEClassRule());
						}
						set(
							$current,
							"operator",
							lv_operator_5_0,
							"org.xtext.MQL.CourseType_EnumerationOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getCourse_courseType_AttrEClassAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleCourse_courseNumber_AttrEClass
entryRuleCourse_courseNumber_AttrEClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCourse_courseNumber_AttrEClassRule()); }
	iv_ruleCourse_courseNumber_AttrEClass=ruleCourse_courseNumber_AttrEClass
	{ $current=$iv_ruleCourse_courseNumber_AttrEClass.current; }
	EOF;

// Rule Course_courseNumber_AttrEClass
ruleCourse_courseNumber_AttrEClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCourse_courseNumber_AttrEClassAccess().getCourse_courseNumber_AttrEClassAction_0(),
					$current);
			}
		)
		otherlv_1='courseNumber'
		{
			newLeafNode(otherlv_1, grammarAccess.getCourse_courseNumber_AttrEClassAccess().getCourseNumberKeyword_1());
		}
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getCourse_courseNumber_AttrEClassAccess().getUnorderedGroup_2());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getCourse_courseNumber_AttrEClassAccess().getUnorderedGroup_2(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getCourse_courseNumber_AttrEClassAccess().getUnorderedGroup_2(), 0);
					}
								({true}?=>((
									lv_negated_3_0='!'
									{
										newLeafNode(lv_negated_3_0, grammarAccess.getCourse_courseNumber_AttrEClassAccess().getNegatedExclamationMarkKeyword_2_0_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getCourse_courseNumber_AttrEClassRule());
										}
										setWithLastConsumed($current, "negated", true, "!");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCourse_courseNumber_AttrEClassAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getCourse_courseNumber_AttrEClassAccess().getUnorderedGroup_2(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getCourse_courseNumber_AttrEClassAccess().getUnorderedGroup_2(), 1);
					}
								({true}?=>((
									lv_generalized_4_0='*'
									{
										newLeafNode(lv_generalized_4_0, grammarAccess.getCourse_courseNumber_AttrEClassAccess().getGeneralizedAsteriskKeyword_2_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getCourse_courseNumber_AttrEClassRule());
										}
										setWithLastConsumed($current, "generalized", true, "*");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCourse_courseNumber_AttrEClassAccess().getUnorderedGroup_2());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getCourse_courseNumber_AttrEClassAccess().getUnorderedGroup_2());
				}
		)
		(
			(
				lv_name_5_0=RULE_ID
				{
					newLeafNode(lv_name_5_0, grammarAccess.getCourse_courseNumber_AttrEClassAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCourse_courseNumber_AttrEClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_5_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_6=':'
			{
				newLeafNode(otherlv_6, grammarAccess.getCourse_courseNumber_AttrEClassAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCourse_courseNumber_AttrEClassAccess().getOperatorInteger_ExpressionOperatorParserRuleCall_4_1_0());
					}
					lv_operator_7_0=ruleInteger_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCourse_courseNumber_AttrEClassRule());
						}
						set(
							$current,
							"operator",
							lv_operator_7_0,
							"org.xtext.MQL.Integer_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_8=';'
		{
			newLeafNode(otherlv_8, grammarAccess.getCourse_courseNumber_AttrEClassAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRulePerson_email_AttrEClass
entryRulePerson_email_AttrEClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPerson_email_AttrEClassRule()); }
	iv_rulePerson_email_AttrEClass=rulePerson_email_AttrEClass
	{ $current=$iv_rulePerson_email_AttrEClass.current; }
	EOF;

// Rule Person_email_AttrEClass
rulePerson_email_AttrEClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPerson_email_AttrEClassAccess().getPerson_email_AttrEClassAction_0(),
					$current);
			}
		)
		otherlv_1='email'
		{
			newLeafNode(otherlv_1, grammarAccess.getPerson_email_AttrEClassAccess().getEmailKeyword_1());
		}
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getPerson_email_AttrEClassAccess().getUnorderedGroup_2());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getPerson_email_AttrEClassAccess().getUnorderedGroup_2(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getPerson_email_AttrEClassAccess().getUnorderedGroup_2(), 0);
					}
								({true}?=>((
									lv_negated_3_0='!'
									{
										newLeafNode(lv_negated_3_0, grammarAccess.getPerson_email_AttrEClassAccess().getNegatedExclamationMarkKeyword_2_0_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getPerson_email_AttrEClassRule());
										}
										setWithLastConsumed($current, "negated", true, "!");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPerson_email_AttrEClassAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getPerson_email_AttrEClassAccess().getUnorderedGroup_2(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getPerson_email_AttrEClassAccess().getUnorderedGroup_2(), 1);
					}
								({true}?=>((
									lv_generalized_4_0='*'
									{
										newLeafNode(lv_generalized_4_0, grammarAccess.getPerson_email_AttrEClassAccess().getGeneralizedAsteriskKeyword_2_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getPerson_email_AttrEClassRule());
										}
										setWithLastConsumed($current, "generalized", true, "*");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPerson_email_AttrEClassAccess().getUnorderedGroup_2());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getPerson_email_AttrEClassAccess().getUnorderedGroup_2());
				}
		)
		(
			(
				lv_name_5_0=RULE_ID
				{
					newLeafNode(lv_name_5_0, grammarAccess.getPerson_email_AttrEClassAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPerson_email_AttrEClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_5_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_6=':'
			{
				newLeafNode(otherlv_6, grammarAccess.getPerson_email_AttrEClassAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPerson_email_AttrEClassAccess().getOperatorString_ExpressionOperatorParserRuleCall_4_1_0());
					}
					lv_operator_7_0=ruleString_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPerson_email_AttrEClassRule());
						}
						set(
							$current,
							"operator",
							lv_operator_7_0,
							"org.xtext.MQL.String_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_8=';'
		{
			newLeafNode(otherlv_8, grammarAccess.getPerson_email_AttrEClassAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleCourse_name_AttrEClass
entryRuleCourse_name_AttrEClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCourse_name_AttrEClassRule()); }
	iv_ruleCourse_name_AttrEClass=ruleCourse_name_AttrEClass
	{ $current=$iv_ruleCourse_name_AttrEClass.current; }
	EOF;

// Rule Course_name_AttrEClass
ruleCourse_name_AttrEClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCourse_name_AttrEClassAccess().getCourse_name_AttrEClassAction_0(),
					$current);
			}
		)
		otherlv_1='name'
		{
			newLeafNode(otherlv_1, grammarAccess.getCourse_name_AttrEClassAccess().getNameKeyword_1());
		}
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getCourse_name_AttrEClassAccess().getUnorderedGroup_2());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getCourse_name_AttrEClassAccess().getUnorderedGroup_2(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getCourse_name_AttrEClassAccess().getUnorderedGroup_2(), 0);
					}
								({true}?=>((
									lv_negated_3_0='!'
									{
										newLeafNode(lv_negated_3_0, grammarAccess.getCourse_name_AttrEClassAccess().getNegatedExclamationMarkKeyword_2_0_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getCourse_name_AttrEClassRule());
										}
										setWithLastConsumed($current, "negated", true, "!");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCourse_name_AttrEClassAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getCourse_name_AttrEClassAccess().getUnorderedGroup_2(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getCourse_name_AttrEClassAccess().getUnorderedGroup_2(), 1);
					}
								({true}?=>((
									lv_generalized_4_0='*'
									{
										newLeafNode(lv_generalized_4_0, grammarAccess.getCourse_name_AttrEClassAccess().getGeneralizedAsteriskKeyword_2_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getCourse_name_AttrEClassRule());
										}
										setWithLastConsumed($current, "generalized", true, "*");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCourse_name_AttrEClassAccess().getUnorderedGroup_2());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getCourse_name_AttrEClassAccess().getUnorderedGroup_2());
				}
		)
		(
			(
				lv_name_5_0=RULE_ID
				{
					newLeafNode(lv_name_5_0, grammarAccess.getCourse_name_AttrEClassAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCourse_name_AttrEClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_5_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_6=':'
			{
				newLeafNode(otherlv_6, grammarAccess.getCourse_name_AttrEClassAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCourse_name_AttrEClassAccess().getOperatorString_ExpressionOperatorParserRuleCall_4_1_0());
					}
					lv_operator_7_0=ruleString_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCourse_name_AttrEClassRule());
						}
						set(
							$current,
							"operator",
							lv_operator_7_0,
							"org.xtext.MQL.String_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_8=';'
		{
			newLeafNode(otherlv_8, grammarAccess.getCourse_name_AttrEClassAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleExam_examID_AttrEClass
entryRuleExam_examID_AttrEClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExam_examID_AttrEClassRule()); }
	iv_ruleExam_examID_AttrEClass=ruleExam_examID_AttrEClass
	{ $current=$iv_ruleExam_examID_AttrEClass.current; }
	EOF;

// Rule Exam_examID_AttrEClass
ruleExam_examID_AttrEClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExam_examID_AttrEClassAccess().getExam_examID_AttrEClassAction_0(),
					$current);
			}
		)
		otherlv_1='examID'
		{
			newLeafNode(otherlv_1, grammarAccess.getExam_examID_AttrEClassAccess().getExamIDKeyword_1());
		}
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getExam_examID_AttrEClassAccess().getUnorderedGroup_2());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getExam_examID_AttrEClassAccess().getUnorderedGroup_2(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getExam_examID_AttrEClassAccess().getUnorderedGroup_2(), 0);
					}
								({true}?=>((
									lv_negated_3_0='!'
									{
										newLeafNode(lv_negated_3_0, grammarAccess.getExam_examID_AttrEClassAccess().getNegatedExclamationMarkKeyword_2_0_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getExam_examID_AttrEClassRule());
										}
										setWithLastConsumed($current, "negated", true, "!");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getExam_examID_AttrEClassAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getExam_examID_AttrEClassAccess().getUnorderedGroup_2(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getExam_examID_AttrEClassAccess().getUnorderedGroup_2(), 1);
					}
								({true}?=>((
									lv_generalized_4_0='*'
									{
										newLeafNode(lv_generalized_4_0, grammarAccess.getExam_examID_AttrEClassAccess().getGeneralizedAsteriskKeyword_2_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getExam_examID_AttrEClassRule());
										}
										setWithLastConsumed($current, "generalized", true, "*");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getExam_examID_AttrEClassAccess().getUnorderedGroup_2());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getExam_examID_AttrEClassAccess().getUnorderedGroup_2());
				}
		)
		(
			(
				lv_name_5_0=RULE_ID
				{
					newLeafNode(lv_name_5_0, grammarAccess.getExam_examID_AttrEClassAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExam_examID_AttrEClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_5_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_6=':'
			{
				newLeafNode(otherlv_6, grammarAccess.getExam_examID_AttrEClassAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExam_examID_AttrEClassAccess().getOperatorString_ExpressionOperatorParserRuleCall_4_1_0());
					}
					lv_operator_7_0=ruleString_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExam_examID_AttrEClassRule());
						}
						set(
							$current,
							"operator",
							lv_operator_7_0,
							"org.xtext.MQL.String_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_8=';'
		{
			newLeafNode(otherlv_8, grammarAccess.getExam_examID_AttrEClassAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleStudent_attends_OrGroup
entryRuleStudent_attends_OrGroup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStudent_attends_OrGroupRule()); }
	iv_ruleStudent_attends_OrGroup=ruleStudent_attends_OrGroup
	{ $current=$iv_ruleStudent_attends_OrGroup.current; }
	EOF;

// Rule Student_attends_OrGroup
ruleStudent_attends_OrGroup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStudent_attends_OrGroupAccess().getCourse_Reference_OrGroupAction_0(),
					$current);
			}
		)
		otherlv_1='attends'
		{
			newLeafNode(otherlv_1, grammarAccess.getStudent_attends_OrGroupAccess().getAttendsKeyword_1());
		}
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getStudent_attends_OrGroupAccess().getUnorderedGroup_2());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getStudent_attends_OrGroupAccess().getUnorderedGroup_2(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getStudent_attends_OrGroupAccess().getUnorderedGroup_2(), 0);
					}
								({true}?=>((
									lv_negated_3_0='!'
									{
										newLeafNode(lv_negated_3_0, grammarAccess.getStudent_attends_OrGroupAccess().getNegatedExclamationMarkKeyword_2_0_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getStudent_attends_OrGroupRule());
										}
										setWithLastConsumed($current, "negated", true, "!");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStudent_attends_OrGroupAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getStudent_attends_OrGroupAccess().getUnorderedGroup_2(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getStudent_attends_OrGroupAccess().getUnorderedGroup_2(), 1);
					}
								({true}?=>((
									lv_transitive_4_0='+'
									{
										newLeafNode(lv_transitive_4_0, grammarAccess.getStudent_attends_OrGroupAccess().getTransitivePlusSignKeyword_2_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getStudent_attends_OrGroupRule());
										}
										setWithLastConsumed($current, "transitive", true, "+");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStudent_attends_OrGroupAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getStudent_attends_OrGroupAccess().getUnorderedGroup_2(), 2)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getStudent_attends_OrGroupAccess().getUnorderedGroup_2(), 2);
					}
								({true}?=>((
									lv_generalized_5_0='*'
									{
										newLeafNode(lv_generalized_5_0, grammarAccess.getStudent_attends_OrGroupAccess().getGeneralizedAsteriskKeyword_2_2_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getStudent_attends_OrGroupRule());
										}
										setWithLastConsumed($current, "generalized", true, "*");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStudent_attends_OrGroupAccess().getUnorderedGroup_2());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getStudent_attends_OrGroupAccess().getUnorderedGroup_2());
				}
		)
		(
			(
				lv_name_6_0=RULE_ID
				{
					newLeafNode(lv_name_6_0, grammarAccess.getStudent_attends_OrGroupAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStudent_attends_OrGroupRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_6_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_7=':'
			{
				newLeafNode(otherlv_7, grammarAccess.getStudent_attends_OrGroupAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStudent_attends_OrGroupRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getStudent_attends_OrGroupAccess().getReferenceCourseCrossReference_4_1_0());
					}
				)
			)
			(
				otherlv_9='OR'
				{
					newLeafNode(otherlv_9, grammarAccess.getStudent_attends_OrGroupAccess().getORKeyword_4_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getStudent_attends_OrGroupRule());
							}
						}
						otherlv_10=RULE_ID
						{
							newLeafNode(otherlv_10, grammarAccess.getStudent_attends_OrGroupAccess().getReferenceCourseCrossReference_4_2_1_0());
						}
					)
				)
			)*
		)?
		otherlv_11=';'
		{
			newLeafNode(otherlv_11, grammarAccess.getStudent_attends_OrGroupAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleProfessor_lectures_OrGroup
entryRuleProfessor_lectures_OrGroup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProfessor_lectures_OrGroupRule()); }
	iv_ruleProfessor_lectures_OrGroup=ruleProfessor_lectures_OrGroup
	{ $current=$iv_ruleProfessor_lectures_OrGroup.current; }
	EOF;

// Rule Professor_lectures_OrGroup
ruleProfessor_lectures_OrGroup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getProfessor_lectures_OrGroupAccess().getCourse_Reference_OrGroupAction_0(),
					$current);
			}
		)
		otherlv_1='lectures'
		{
			newLeafNode(otherlv_1, grammarAccess.getProfessor_lectures_OrGroupAccess().getLecturesKeyword_1());
		}
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getProfessor_lectures_OrGroupAccess().getUnorderedGroup_2());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getProfessor_lectures_OrGroupAccess().getUnorderedGroup_2(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getProfessor_lectures_OrGroupAccess().getUnorderedGroup_2(), 0);
					}
								({true}?=>((
									lv_negated_3_0='!'
									{
										newLeafNode(lv_negated_3_0, grammarAccess.getProfessor_lectures_OrGroupAccess().getNegatedExclamationMarkKeyword_2_0_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getProfessor_lectures_OrGroupRule());
										}
										setWithLastConsumed($current, "negated", true, "!");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getProfessor_lectures_OrGroupAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getProfessor_lectures_OrGroupAccess().getUnorderedGroup_2(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getProfessor_lectures_OrGroupAccess().getUnorderedGroup_2(), 1);
					}
								({true}?=>((
									lv_transitive_4_0='+'
									{
										newLeafNode(lv_transitive_4_0, grammarAccess.getProfessor_lectures_OrGroupAccess().getTransitivePlusSignKeyword_2_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getProfessor_lectures_OrGroupRule());
										}
										setWithLastConsumed($current, "transitive", true, "+");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getProfessor_lectures_OrGroupAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getProfessor_lectures_OrGroupAccess().getUnorderedGroup_2(), 2)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getProfessor_lectures_OrGroupAccess().getUnorderedGroup_2(), 2);
					}
								({true}?=>((
									lv_generalized_5_0='*'
									{
										newLeafNode(lv_generalized_5_0, grammarAccess.getProfessor_lectures_OrGroupAccess().getGeneralizedAsteriskKeyword_2_2_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getProfessor_lectures_OrGroupRule());
										}
										setWithLastConsumed($current, "generalized", true, "*");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getProfessor_lectures_OrGroupAccess().getUnorderedGroup_2());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getProfessor_lectures_OrGroupAccess().getUnorderedGroup_2());
				}
		)
		(
			(
				lv_name_6_0=RULE_ID
				{
					newLeafNode(lv_name_6_0, grammarAccess.getProfessor_lectures_OrGroupAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProfessor_lectures_OrGroupRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_6_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_7=':'
			{
				newLeafNode(otherlv_7, grammarAccess.getProfessor_lectures_OrGroupAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProfessor_lectures_OrGroupRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getProfessor_lectures_OrGroupAccess().getReferenceCourseCrossReference_4_1_0());
					}
				)
			)
			(
				otherlv_9='OR'
				{
					newLeafNode(otherlv_9, grammarAccess.getProfessor_lectures_OrGroupAccess().getORKeyword_4_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getProfessor_lectures_OrGroupRule());
							}
						}
						otherlv_10=RULE_ID
						{
							newLeafNode(otherlv_10, grammarAccess.getProfessor_lectures_OrGroupAccess().getReferenceCourseCrossReference_4_2_1_0());
						}
					)
				)
			)*
		)?
		otherlv_11=';'
		{
			newLeafNode(otherlv_11, grammarAccess.getProfessor_lectures_OrGroupAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleCourse_exam_OrGroup
entryRuleCourse_exam_OrGroup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCourse_exam_OrGroupRule()); }
	iv_ruleCourse_exam_OrGroup=ruleCourse_exam_OrGroup
	{ $current=$iv_ruleCourse_exam_OrGroup.current; }
	EOF;

// Rule Course_exam_OrGroup
ruleCourse_exam_OrGroup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCourse_exam_OrGroupAccess().getExam_Containment_OrGroupAction_0(),
					$current);
			}
		)
		otherlv_1='exam'
		{
			newLeafNode(otherlv_1, grammarAccess.getCourse_exam_OrGroupAccess().getExamKeyword_1());
		}
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getCourse_exam_OrGroupAccess().getUnorderedGroup_2());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getCourse_exam_OrGroupAccess().getUnorderedGroup_2(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getCourse_exam_OrGroupAccess().getUnorderedGroup_2(), 0);
					}
								({true}?=>((
									lv_negated_3_0='!'
									{
										newLeafNode(lv_negated_3_0, grammarAccess.getCourse_exam_OrGroupAccess().getNegatedExclamationMarkKeyword_2_0_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getCourse_exam_OrGroupRule());
										}
										setWithLastConsumed($current, "negated", true, "!");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCourse_exam_OrGroupAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getCourse_exam_OrGroupAccess().getUnorderedGroup_2(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getCourse_exam_OrGroupAccess().getUnorderedGroup_2(), 1);
					}
								({true}?=>((
									lv_transitive_4_0='+'
									{
										newLeafNode(lv_transitive_4_0, grammarAccess.getCourse_exam_OrGroupAccess().getTransitivePlusSignKeyword_2_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getCourse_exam_OrGroupRule());
										}
										setWithLastConsumed($current, "transitive", true, "+");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCourse_exam_OrGroupAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getCourse_exam_OrGroupAccess().getUnorderedGroup_2(), 2)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getCourse_exam_OrGroupAccess().getUnorderedGroup_2(), 2);
					}
								({true}?=>((
									lv_generalized_5_0='*'
									{
										newLeafNode(lv_generalized_5_0, grammarAccess.getCourse_exam_OrGroupAccess().getGeneralizedAsteriskKeyword_2_2_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getCourse_exam_OrGroupRule());
										}
										setWithLastConsumed($current, "generalized", true, "*");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCourse_exam_OrGroupAccess().getUnorderedGroup_2());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getCourse_exam_OrGroupAccess().getUnorderedGroup_2());
				}
		)
		(
			(
				lv_name_6_0=RULE_ID
				{
					newLeafNode(lv_name_6_0, grammarAccess.getCourse_exam_OrGroupAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCourse_exam_OrGroupRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_6_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_7=':'
			{
				newLeafNode(otherlv_7, grammarAccess.getCourse_exam_OrGroupAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCourse_exam_OrGroupAccess().getContainmentExam_TypeParserRuleCall_4_1_0());
					}
					lv_containment_8_0=ruleExam_Type
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCourse_exam_OrGroupRule());
						}
						add(
							$current,
							"containment",
							lv_containment_8_0,
							"org.xtext.MQL.Exam_Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9='OR'
				{
					newLeafNode(otherlv_9, grammarAccess.getCourse_exam_OrGroupAccess().getORKeyword_4_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCourse_exam_OrGroupAccess().getContainmentExam_TypeParserRuleCall_4_2_1_0());
						}
						lv_containment_10_0=ruleExam_Type
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCourse_exam_OrGroupRule());
							}
							add(
								$current,
								"containment",
								lv_containment_10_0,
								"org.xtext.MQL.Exam_Type");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_11=';'
		{
			newLeafNode(otherlv_11, grammarAccess.getCourse_exam_OrGroupAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleCourse_mandatoryFor_OrGroup
entryRuleCourse_mandatoryFor_OrGroup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCourse_mandatoryFor_OrGroupRule()); }
	iv_ruleCourse_mandatoryFor_OrGroup=ruleCourse_mandatoryFor_OrGroup
	{ $current=$iv_ruleCourse_mandatoryFor_OrGroup.current; }
	EOF;

// Rule Course_mandatoryFor_OrGroup
ruleCourse_mandatoryFor_OrGroup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getCourse_Reference_OrGroupAction_0(),
					$current);
			}
		)
		otherlv_1='mandatoryFor'
		{
			newLeafNode(otherlv_1, grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getMandatoryForKeyword_1());
		}
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getUnorderedGroup_2());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getUnorderedGroup_2(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getUnorderedGroup_2(), 0);
					}
								({true}?=>((
									lv_negated_3_0='!'
									{
										newLeafNode(lv_negated_3_0, grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getNegatedExclamationMarkKeyword_2_0_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getCourse_mandatoryFor_OrGroupRule());
										}
										setWithLastConsumed($current, "negated", true, "!");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getUnorderedGroup_2(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getUnorderedGroup_2(), 1);
					}
								({true}?=>((
									lv_transitive_4_0='+'
									{
										newLeafNode(lv_transitive_4_0, grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getTransitivePlusSignKeyword_2_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getCourse_mandatoryFor_OrGroupRule());
										}
										setWithLastConsumed($current, "transitive", true, "+");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getUnorderedGroup_2(), 2)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getUnorderedGroup_2(), 2);
					}
								({true}?=>((
									lv_generalized_5_0='*'
									{
										newLeafNode(lv_generalized_5_0, grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getGeneralizedAsteriskKeyword_2_2_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getCourse_mandatoryFor_OrGroupRule());
										}
										setWithLastConsumed($current, "generalized", true, "*");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getUnorderedGroup_2());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getUnorderedGroup_2());
				}
		)
		(
			(
				lv_name_6_0=RULE_ID
				{
					newLeafNode(lv_name_6_0, grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCourse_mandatoryFor_OrGroupRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_6_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_7=':'
			{
				newLeafNode(otherlv_7, grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCourse_mandatoryFor_OrGroupRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getReferenceCourseCrossReference_4_1_0());
					}
				)
			)
			(
				otherlv_9='OR'
				{
					newLeafNode(otherlv_9, grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getORKeyword_4_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCourse_mandatoryFor_OrGroupRule());
							}
						}
						otherlv_10=RULE_ID
						{
							newLeafNode(otherlv_10, grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getReferenceCourseCrossReference_4_2_1_0());
						}
					)
				)
			)*
		)?
		otherlv_11=';'
		{
			newLeafNode(otherlv_11, grammarAccess.getCourse_mandatoryFor_OrGroupAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleUniversityManagementSystem_person_OrGroup
entryRuleUniversityManagementSystem_person_OrGroup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUniversityManagementSystem_person_OrGroupRule()); }
	iv_ruleUniversityManagementSystem_person_OrGroup=ruleUniversityManagementSystem_person_OrGroup
	{ $current=$iv_ruleUniversityManagementSystem_person_OrGroup.current; }
	EOF;

// Rule UniversityManagementSystem_person_OrGroup
ruleUniversityManagementSystem_person_OrGroup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getPerson_Containment_OrGroupAction_0(),
					$current);
			}
		)
		otherlv_1='person'
		{
			newLeafNode(otherlv_1, grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getPersonKeyword_1());
		}
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getUnorderedGroup_2());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getUnorderedGroup_2(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getUnorderedGroup_2(), 0);
					}
								({true}?=>((
									lv_negated_3_0='!'
									{
										newLeafNode(lv_negated_3_0, grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getNegatedExclamationMarkKeyword_2_0_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getUniversityManagementSystem_person_OrGroupRule());
										}
										setWithLastConsumed($current, "negated", true, "!");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getUnorderedGroup_2(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getUnorderedGroup_2(), 1);
					}
								({true}?=>((
									lv_transitive_4_0='+'
									{
										newLeafNode(lv_transitive_4_0, grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getTransitivePlusSignKeyword_2_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getUniversityManagementSystem_person_OrGroupRule());
										}
										setWithLastConsumed($current, "transitive", true, "+");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getUnorderedGroup_2(), 2)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getUnorderedGroup_2(), 2);
					}
								({true}?=>((
									lv_generalized_5_0='*'
									{
										newLeafNode(lv_generalized_5_0, grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getGeneralizedAsteriskKeyword_2_2_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getUniversityManagementSystem_person_OrGroupRule());
										}
										setWithLastConsumed($current, "generalized", true, "*");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getUnorderedGroup_2());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getUnorderedGroup_2());
				}
		)
		(
			(
				lv_name_6_0=RULE_ID
				{
					newLeafNode(lv_name_6_0, grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUniversityManagementSystem_person_OrGroupRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_6_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_7=':'
			{
				newLeafNode(otherlv_7, grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getContainmentPerson_TypeParserRuleCall_4_1_0());
					}
					lv_containment_8_0=rulePerson_Type
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUniversityManagementSystem_person_OrGroupRule());
						}
						add(
							$current,
							"containment",
							lv_containment_8_0,
							"org.xtext.MQL.Person_Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9='OR'
				{
					newLeafNode(otherlv_9, grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getORKeyword_4_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getContainmentPerson_TypeParserRuleCall_4_2_1_0());
						}
						lv_containment_10_0=rulePerson_Type
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getUniversityManagementSystem_person_OrGroupRule());
							}
							add(
								$current,
								"containment",
								lv_containment_10_0,
								"org.xtext.MQL.Person_Type");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_11=';'
		{
			newLeafNode(otherlv_11, grammarAccess.getUniversityManagementSystem_person_OrGroupAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleUniversityManagementSystem_course_OrGroup
entryRuleUniversityManagementSystem_course_OrGroup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUniversityManagementSystem_course_OrGroupRule()); }
	iv_ruleUniversityManagementSystem_course_OrGroup=ruleUniversityManagementSystem_course_OrGroup
	{ $current=$iv_ruleUniversityManagementSystem_course_OrGroup.current; }
	EOF;

// Rule UniversityManagementSystem_course_OrGroup
ruleUniversityManagementSystem_course_OrGroup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getCourse_Containment_OrGroupAction_0(),
					$current);
			}
		)
		otherlv_1='course'
		{
			newLeafNode(otherlv_1, grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getCourseKeyword_1());
		}
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getUnorderedGroup_2());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getUnorderedGroup_2(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getUnorderedGroup_2(), 0);
					}
								({true}?=>((
									lv_negated_3_0='!'
									{
										newLeafNode(lv_negated_3_0, grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getNegatedExclamationMarkKeyword_2_0_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getUniversityManagementSystem_course_OrGroupRule());
										}
										setWithLastConsumed($current, "negated", true, "!");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getUnorderedGroup_2(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getUnorderedGroup_2(), 1);
					}
								({true}?=>((
									lv_transitive_4_0='+'
									{
										newLeafNode(lv_transitive_4_0, grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getTransitivePlusSignKeyword_2_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getUniversityManagementSystem_course_OrGroupRule());
										}
										setWithLastConsumed($current, "transitive", true, "+");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getUnorderedGroup_2(), 2)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getUnorderedGroup_2(), 2);
					}
								({true}?=>((
									lv_generalized_5_0='*'
									{
										newLeafNode(lv_generalized_5_0, grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getGeneralizedAsteriskKeyword_2_2_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getUniversityManagementSystem_course_OrGroupRule());
										}
										setWithLastConsumed($current, "generalized", true, "*");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getUnorderedGroup_2());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getUnorderedGroup_2());
				}
		)
		(
			(
				lv_name_6_0=RULE_ID
				{
					newLeafNode(lv_name_6_0, grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUniversityManagementSystem_course_OrGroupRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_6_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_7=':'
			{
				newLeafNode(otherlv_7, grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getContainmentCourse_TypeParserRuleCall_4_1_0());
					}
					lv_containment_8_0=ruleCourse_Type
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUniversityManagementSystem_course_OrGroupRule());
						}
						add(
							$current,
							"containment",
							lv_containment_8_0,
							"org.xtext.MQL.Course_Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9='OR'
				{
					newLeafNode(otherlv_9, grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getORKeyword_4_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getContainmentCourse_TypeParserRuleCall_4_2_1_0());
						}
						lv_containment_10_0=ruleCourse_Type
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getUniversityManagementSystem_course_OrGroupRule());
							}
							add(
								$current,
								"containment",
								lv_containment_10_0,
								"org.xtext.MQL.Course_Type");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_11=';'
		{
			newLeafNode(otherlv_11, grammarAccess.getUniversityManagementSystem_course_OrGroupAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleFunctionalArgument
entryRuleFunctionalArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionalArgumentRule()); }
	iv_ruleFunctionalArgument=ruleFunctionalArgument
	{ $current=$iv_ruleFunctionalArgument.current; }
	EOF;

// Rule FunctionalArgument
ruleFunctionalArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFunctionalArgumentAccess().getPrimitiveArgumentParserRuleCall_0());
		}
		this_PrimitiveArgument_0=rulePrimitiveArgument
		{
			$current = $this_PrimitiveArgument_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionalArgumentAccess().getCalculateable_ArgumentParserRuleCall_1());
		}
		this_Calculateable_Argument_1=ruleCalculateable_Argument
		{
			$current = $this_Calculateable_Argument_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCalculateable_Argument
entryRuleCalculateable_Argument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCalculateable_ArgumentRule()); }
	iv_ruleCalculateable_Argument=ruleCalculateable_Argument
	{ $current=$iv_ruleCalculateable_Argument.current; }
	EOF;

// Rule Calculateable_Argument
ruleCalculateable_Argument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCalculateable_ArgumentAccess().getCalculateableElement_ReferenceArgumentParserRuleCall_0());
		}
		this_CalculateableElement_ReferenceArgument_0=ruleCalculateableElement_ReferenceArgument
		{
			$current = $this_CalculateableElement_ReferenceArgument_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCalculateable_ArgumentAccess().getEvaluationOperation_ArgumentParserRuleCall_1());
		}
		this_EvaluationOperation_Argument_1=ruleEvaluationOperation_Argument
		{
			$current = $this_EvaluationOperation_Argument_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrimitiveArgument
entryRulePrimitiveArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveArgumentRule()); }
	iv_rulePrimitiveArgument=rulePrimitiveArgument
	{ $current=$iv_rulePrimitiveArgument.current; }
	EOF;

// Rule PrimitiveArgument
rulePrimitiveArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimitiveArgumentAccess().getInteger_PrimitiveArgumentParserRuleCall_0());
		}
		this_Integer_PrimitiveArgument_0=ruleInteger_PrimitiveArgument
		{
			$current = $this_Integer_PrimitiveArgument_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveArgumentAccess().getString_PrimitiveArgumentParserRuleCall_1());
		}
		this_String_PrimitiveArgument_1=ruleString_PrimitiveArgument
		{
			$current = $this_String_PrimitiveArgument_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInteger_PrimitiveArgument
entryRuleInteger_PrimitiveArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInteger_PrimitiveArgumentRule()); }
	iv_ruleInteger_PrimitiveArgument=ruleInteger_PrimitiveArgument
	{ $current=$iv_ruleInteger_PrimitiveArgument.current; }
	EOF;

// Rule Integer_PrimitiveArgument
ruleInteger_PrimitiveArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInteger_PrimitiveArgumentAccess().getInteger_PrimitiveArgumentAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getInteger_PrimitiveArgumentAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInteger_PrimitiveArgumentRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInteger_PrimitiveArgumentAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_2_0());
				}
				lv_operator_2_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInteger_PrimitiveArgumentRule());
					}
					set(
						$current,
						"operator",
						lv_operator_2_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleString_PrimitiveArgument
entryRuleString_PrimitiveArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getString_PrimitiveArgumentRule()); }
	iv_ruleString_PrimitiveArgument=ruleString_PrimitiveArgument
	{ $current=$iv_ruleString_PrimitiveArgument.current; }
	EOF;

// Rule String_PrimitiveArgument
ruleString_PrimitiveArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getString_PrimitiveArgumentAccess().getString_PrimitiveArgumentAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_STRING
				{
					newLeafNode(lv_value_1_0, grammarAccess.getString_PrimitiveArgumentAccess().getValueSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getString_PrimitiveArgumentRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getString_PrimitiveArgumentAccess().getOperatorString_FunctionalOperatorParserRuleCall_2_0());
				}
				lv_operator_2_0=ruleString_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getString_PrimitiveArgumentRule());
					}
					set(
						$current,
						"operator",
						lv_operator_2_0,
						"org.xtext.MQL.String_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleCalculateableElement_ReferenceArgument
entryRuleCalculateableElement_ReferenceArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCalculateableElement_ReferenceArgumentRule()); }
	iv_ruleCalculateableElement_ReferenceArgument=ruleCalculateableElement_ReferenceArgument
	{ $current=$iv_ruleCalculateableElement_ReferenceArgument.current; }
	EOF;

// Rule CalculateableElement_ReferenceArgument
ruleCalculateableElement_ReferenceArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCalculateableElement_ReferenceArgumentAccess().getInteger_CalculateableElementReferenceArgumentParserRuleCall_0());
		}
		this_Integer_CalculateableElementReferenceArgument_0=ruleInteger_CalculateableElementReferenceArgument
		{
			$current = $this_Integer_CalculateableElementReferenceArgument_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCalculateableElement_ReferenceArgumentAccess().getString_CalculateableElementReferenceArgumentParserRuleCall_1());
		}
		this_String_CalculateableElementReferenceArgument_1=ruleString_CalculateableElementReferenceArgument
		{
			$current = $this_String_CalculateableElementReferenceArgument_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInteger_CalculateableElementReferenceArgument
entryRuleInteger_CalculateableElementReferenceArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInteger_CalculateableElementReferenceArgumentRule()); }
	iv_ruleInteger_CalculateableElementReferenceArgument=ruleInteger_CalculateableElementReferenceArgument
	{ $current=$iv_ruleInteger_CalculateableElementReferenceArgument.current; }
	EOF;

// Rule Integer_CalculateableElementReferenceArgument
ruleInteger_CalculateableElementReferenceArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInteger_CalculateableElementReferenceArgumentAccess().getInteger_CalculateableElementReferenceArgumentAction_0(),
					$current);
			}
		)
		otherlv_1='IntegerRef('
		{
			newLeafNode(otherlv_1, grammarAccess.getInteger_CalculateableElementReferenceArgumentAccess().getIntegerRefKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInteger_CalculateableElementReferenceArgumentRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getInteger_CalculateableElementReferenceArgumentAccess().getReferenceInteger_CalculateableElementCrossReference_2_0());
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getInteger_CalculateableElementReferenceArgumentAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInteger_CalculateableElementReferenceArgumentAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_4_0());
				}
				lv_operator_4_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInteger_CalculateableElementReferenceArgumentRule());
					}
					set(
						$current,
						"operator",
						lv_operator_4_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleString_CalculateableElementReferenceArgument
entryRuleString_CalculateableElementReferenceArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getString_CalculateableElementReferenceArgumentRule()); }
	iv_ruleString_CalculateableElementReferenceArgument=ruleString_CalculateableElementReferenceArgument
	{ $current=$iv_ruleString_CalculateableElementReferenceArgument.current; }
	EOF;

// Rule String_CalculateableElementReferenceArgument
ruleString_CalculateableElementReferenceArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getString_CalculateableElementReferenceArgumentAccess().getString_CalculateableElementReferenceArgumentAction_0(),
					$current);
			}
		)
		otherlv_1='StringRef('
		{
			newLeafNode(otherlv_1, grammarAccess.getString_CalculateableElementReferenceArgumentAccess().getStringRefKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getString_CalculateableElementReferenceArgumentRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getString_CalculateableElementReferenceArgumentAccess().getReferenceString_CalculateableElementCrossReference_2_0());
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getString_CalculateableElementReferenceArgumentAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getString_CalculateableElementReferenceArgumentAccess().getOperatorString_FunctionalOperatorParserRuleCall_4_0());
				}
				lv_operator_4_0=ruleString_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getString_CalculateableElementReferenceArgumentRule());
					}
					set(
						$current,
						"operator",
						lv_operator_4_0,
						"org.xtext.MQL.String_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleEvaluationOperation_Argument
entryRuleEvaluationOperation_Argument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvaluationOperation_ArgumentRule()); }
	iv_ruleEvaluationOperation_Argument=ruleEvaluationOperation_Argument
	{ $current=$iv_ruleEvaluationOperation_Argument.current; }
	EOF;

// Rule EvaluationOperation_Argument
ruleEvaluationOperation_Argument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEvaluationOperation_ArgumentAccess().getInteger_EvaluationOperation_ArgumentParserRuleCall_0());
		}
		this_Integer_EvaluationOperation_Argument_0=ruleInteger_EvaluationOperation_Argument
		{
			$current = $this_Integer_EvaluationOperation_Argument_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEvaluationOperation_ArgumentAccess().getDouble_EvaluationOperation_ArgumentParserRuleCall_1());
		}
		this_Double_EvaluationOperation_Argument_1=ruleDouble_EvaluationOperation_Argument
		{
			$current = $this_Double_EvaluationOperation_Argument_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInteger_EvaluationOperation_Argument
entryRuleInteger_EvaluationOperation_Argument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInteger_EvaluationOperation_ArgumentRule()); }
	iv_ruleInteger_EvaluationOperation_Argument=ruleInteger_EvaluationOperation_Argument
	{ $current=$iv_ruleInteger_EvaluationOperation_Argument.current; }
	EOF;

// Rule Integer_EvaluationOperation_Argument
ruleInteger_EvaluationOperation_Argument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInteger_EvaluationOperation_ArgumentAccess().getCount_AggregationOperatorParserRuleCall_0());
		}
		this_Count_AggregationOperator_0=ruleCount_AggregationOperator
		{
			$current = $this_Count_AggregationOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInteger_EvaluationOperation_ArgumentAccess().getSum_AggregationOperator_IntegerParserRuleCall_1());
		}
		this_Sum_AggregationOperator_Integer_1=ruleSum_AggregationOperator_Integer
		{
			$current = $this_Sum_AggregationOperator_Integer_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInteger_EvaluationOperation_ArgumentAccess().getMin_AggregationOperator_IntegerParserRuleCall_2());
		}
		this_Min_AggregationOperator_Integer_2=ruleMin_AggregationOperator_Integer
		{
			$current = $this_Min_AggregationOperator_Integer_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInteger_EvaluationOperation_ArgumentAccess().getMax_AggregationOperator_IntegerParserRuleCall_3());
		}
		this_Max_AggregationOperator_Integer_3=ruleMax_AggregationOperator_Integer
		{
			$current = $this_Max_AggregationOperator_Integer_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInteger_EvaluationOperation_ArgumentAccess().getIntegerParseInt_ClassOperatorParserRuleCall_4());
		}
		this_IntegerParseInt_ClassOperator_4=ruleIntegerParseInt_ClassOperator
		{
			$current = $this_IntegerParseInt_ClassOperator_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDouble_EvaluationOperation_Argument
entryRuleDouble_EvaluationOperation_Argument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDouble_EvaluationOperation_ArgumentRule()); }
	iv_ruleDouble_EvaluationOperation_Argument=ruleDouble_EvaluationOperation_Argument
	{ $current=$iv_ruleDouble_EvaluationOperation_Argument.current; }
	EOF;

// Rule Double_EvaluationOperation_Argument
ruleDouble_EvaluationOperation_Argument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDouble_EvaluationOperation_ArgumentAccess().getSum_AggregationOperator_DoubleParserRuleCall_0());
		}
		this_Sum_AggregationOperator_Double_0=ruleSum_AggregationOperator_Double
		{
			$current = $this_Sum_AggregationOperator_Double_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDouble_EvaluationOperation_ArgumentAccess().getMin_AggregationOperator_DoubleParserRuleCall_1());
		}
		this_Min_AggregationOperator_Double_1=ruleMin_AggregationOperator_Double
		{
			$current = $this_Min_AggregationOperator_Double_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDouble_EvaluationOperation_ArgumentAccess().getMax_AggregationOperator_DoubleParserRuleCall_2());
		}
		this_Max_AggregationOperator_Double_2=ruleMax_AggregationOperator_Double
		{
			$current = $this_Max_AggregationOperator_Double_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCountable_ReferenceArgument
entryRuleCountable_ReferenceArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCountable_ReferenceArgumentRule()); }
	iv_ruleCountable_ReferenceArgument=ruleCountable_ReferenceArgument
	{ $current=$iv_ruleCountable_ReferenceArgument.current; }
	EOF;

// Rule Countable_ReferenceArgument
ruleCountable_ReferenceArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCountable_ReferenceArgumentAccess().getCountable_ReferenceArgumentAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCountable_ReferenceArgumentRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getCountable_ReferenceArgumentAccess().getReferenceCountableCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleInteger_FunctionalParameter
entryRuleInteger_FunctionalParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInteger_FunctionalParameterRule()); }
	iv_ruleInteger_FunctionalParameter=ruleInteger_FunctionalParameter
	{ $current=$iv_ruleInteger_FunctionalParameter.current; }
	EOF;

// Rule Integer_FunctionalParameter
ruleInteger_FunctionalParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInteger_FunctionalParameterAccess().getInteger_FunctionalParameterAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInteger_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0());
				}
				lv_argument_1_0=ruleFunctionalArgument
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInteger_FunctionalParameterRule());
					}
					set(
						$current,
						"argument",
						lv_argument_1_0,
						"org.xtext.MQL.FunctionalArgument");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNumber_FunctionalParameter
entryRuleNumber_FunctionalParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_FunctionalParameterRule()); }
	iv_ruleNumber_FunctionalParameter=ruleNumber_FunctionalParameter
	{ $current=$iv_ruleNumber_FunctionalParameter.current; }
	EOF;

// Rule Number_FunctionalParameter
ruleNumber_FunctionalParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumber_FunctionalParameterAccess().getNumber_FunctionalParameterAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0());
				}
				lv_argument_1_0=ruleFunctionalArgument
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_FunctionalParameterRule());
					}
					set(
						$current,
						"argument",
						lv_argument_1_0,
						"org.xtext.MQL.FunctionalArgument");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCharSequence_FunctionalParameter
entryRuleCharSequence_FunctionalParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharSequence_FunctionalParameterRule()); }
	iv_ruleCharSequence_FunctionalParameter=ruleCharSequence_FunctionalParameter
	{ $current=$iv_ruleCharSequence_FunctionalParameter.current; }
	EOF;

// Rule CharSequence_FunctionalParameter
ruleCharSequence_FunctionalParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCharSequence_FunctionalParameterAccess().getCharSequence_FunctionalParameterAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCharSequence_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0());
				}
				lv_argument_1_0=ruleFunctionalArgument
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCharSequence_FunctionalParameterRule());
					}
					set(
						$current,
						"argument",
						lv_argument_1_0,
						"org.xtext.MQL.FunctionalArgument");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleObject_FunctionalParameter
entryRuleObject_FunctionalParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObject_FunctionalParameterRule()); }
	iv_ruleObject_FunctionalParameter=ruleObject_FunctionalParameter
	{ $current=$iv_ruleObject_FunctionalParameter.current; }
	EOF;

// Rule Object_FunctionalParameter
ruleObject_FunctionalParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObject_FunctionalParameterAccess().getObject_FunctionalParameterAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getObject_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0());
				}
				lv_argument_1_0=ruleFunctionalArgument
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObject_FunctionalParameterRule());
					}
					set(
						$current,
						"argument",
						lv_argument_1_0,
						"org.xtext.MQL.FunctionalArgument");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleString_FunctionalParameter
entryRuleString_FunctionalParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getString_FunctionalParameterRule()); }
	iv_ruleString_FunctionalParameter=ruleString_FunctionalParameter
	{ $current=$iv_ruleString_FunctionalParameter.current; }
	EOF;

// Rule String_FunctionalParameter
ruleString_FunctionalParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getString_FunctionalParameterAccess().getString_FunctionalParameterAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getString_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0());
				}
				lv_argument_1_0=ruleFunctionalArgument
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getString_FunctionalParameterRule());
					}
					set(
						$current,
						"argument",
						lv_argument_1_0,
						"org.xtext.MQL.FunctionalArgument");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBoolean_FunctionalParameter
entryRuleBoolean_FunctionalParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolean_FunctionalParameterRule()); }
	iv_ruleBoolean_FunctionalParameter=ruleBoolean_FunctionalParameter
	{ $current=$iv_ruleBoolean_FunctionalParameter.current; }
	EOF;

// Rule Boolean_FunctionalParameter
ruleBoolean_FunctionalParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBoolean_FunctionalParameterAccess().getBoolean_FunctionalParameterAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBoolean_FunctionalParameterAccess().getArgumentFunctionalArgumentParserRuleCall_1_0());
				}
				lv_argument_1_0=ruleFunctionalArgument
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoolean_FunctionalParameterRule());
					}
					set(
						$current,
						"argument",
						lv_argument_1_0,
						"org.xtext.MQL.FunctionalArgument");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCountableReferenceParameter
entryRuleCountableReferenceParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCountableReferenceParameterRule()); }
	iv_ruleCountableReferenceParameter=ruleCountableReferenceParameter
	{ $current=$iv_ruleCountableReferenceParameter.current; }
	EOF;

// Rule CountableReferenceParameter
ruleCountableReferenceParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCountableReferenceParameterAccess().getCountableReferenceParameterAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCountableReferenceParameterAccess().getArgumentCountable_ReferenceArgumentParserRuleCall_1_0());
				}
				lv_argument_1_0=ruleCountable_ReferenceArgument
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCountableReferenceParameterRule());
					}
					set(
						$current,
						"argument",
						lv_argument_1_0,
						"org.xtext.MQL.Countable_ReferenceArgument");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInteger_CalculateableParameter
entryRuleInteger_CalculateableParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInteger_CalculateableParameterRule()); }
	iv_ruleInteger_CalculateableParameter=ruleInteger_CalculateableParameter
	{ $current=$iv_ruleInteger_CalculateableParameter.current; }
	EOF;

// Rule Integer_CalculateableParameter
ruleInteger_CalculateableParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInteger_CalculateableParameterAccess().getInteger_CalculateableParameterAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInteger_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0());
				}
				lv_argument_1_0=ruleCalculateable_Argument
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInteger_CalculateableParameterRule());
					}
					set(
						$current,
						"argument",
						lv_argument_1_0,
						"org.xtext.MQL.Calculateable_Argument");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDouble_CalculateableParameter
entryRuleDouble_CalculateableParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDouble_CalculateableParameterRule()); }
	iv_ruleDouble_CalculateableParameter=ruleDouble_CalculateableParameter
	{ $current=$iv_ruleDouble_CalculateableParameter.current; }
	EOF;

// Rule Double_CalculateableParameter
ruleDouble_CalculateableParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDouble_CalculateableParameterAccess().getDouble_CalculateableParameterAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDouble_CalculateableParameterAccess().getArgumentCalculateable_ArgumentParserRuleCall_1_0());
				}
				lv_argument_1_0=ruleCalculateable_Argument
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDouble_CalculateableParameterRule());
					}
					set(
						$current,
						"argument",
						lv_argument_1_0,
						"org.xtext.MQL.Calculateable_Argument");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCourseType_EnumerationOperator
entryRuleCourseType_EnumerationOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCourseType_EnumerationOperatorRule()); }
	iv_ruleCourseType_EnumerationOperator=ruleCourseType_EnumerationOperator
	{ $current=$iv_ruleCourseType_EnumerationOperator.current; }
	EOF;

// Rule CourseType_EnumerationOperator
ruleCourseType_EnumerationOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCourseType_EnumerationOperatorAccess().getCourseType_EnumerationOperatorAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCourseType_EnumerationOperatorAccess().getArgumentCourseTypeEnumRuleCall_1_0());
				}
				lv_argument_1_0=ruleCourseType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCourseType_EnumerationOperatorRule());
					}
					set(
						$current,
						"argument",
						lv_argument_1_0,
						"org.xtext.MQL.CourseType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='or'
			{
				newLeafNode(otherlv_2, grammarAccess.getCourseType_EnumerationOperatorAccess().getOrKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCourseType_EnumerationOperatorAccess().getOrCourseType_EnumerationOperatorParserRuleCall_2_1_0());
					}
					lv_or_3_0=ruleCourseType_EnumerationOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCourseType_EnumerationOperatorRule());
						}
						set(
							$current,
							"or",
							lv_or_3_0,
							"org.xtext.MQL.CourseType_EnumerationOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleInteger_ExpressionOperator
entryRuleInteger_ExpressionOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInteger_ExpressionOperatorRule()); }
	iv_ruleInteger_ExpressionOperator=ruleInteger_ExpressionOperator
	{ $current=$iv_ruleInteger_ExpressionOperator.current; }
	EOF;

// Rule Integer_ExpressionOperator
ruleInteger_ExpressionOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInteger_ExpressionOperatorAccess().getInteger_BitOperatorParserRuleCall_0());
		}
		this_Integer_BitOperator_0=ruleInteger_BitOperator
		{
			$current = $this_Integer_BitOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInteger_ExpressionOperatorAccess().getInteger_FunctionalOperator_BeginParserRuleCall_1());
		}
		this_Integer_FunctionalOperator_Begin_1=ruleInteger_FunctionalOperator_Begin
		{
			$current = $this_Integer_FunctionalOperator_Begin_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInteger_BitOperator
entryRuleInteger_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInteger_BitOperatorRule()); }
	iv_ruleInteger_BitOperator=ruleInteger_BitOperator
	{ $current=$iv_ruleInteger_BitOperator.current; }
	EOF;

// Rule Integer_BitOperator
ruleInteger_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInteger_BitOperatorAccess().getInteger_And_BitOperatorParserRuleCall_0());
		}
		this_Integer_And_BitOperator_0=ruleInteger_And_BitOperator
		{
			$current = $this_Integer_And_BitOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInteger_BitOperatorAccess().getInteger_Or_BitOperatorParserRuleCall_1());
		}
		this_Integer_Or_BitOperator_1=ruleInteger_Or_BitOperator
		{
			$current = $this_Integer_Or_BitOperator_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInteger_And_BitOperator
entryRuleInteger_And_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInteger_And_BitOperatorRule()); }
	iv_ruleInteger_And_BitOperator=ruleInteger_And_BitOperator
	{ $current=$iv_ruleInteger_And_BitOperator.current; }
	EOF;

// Rule Integer_And_BitOperator
ruleInteger_And_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInteger_And_BitOperatorAccess().getInteger_And_BitOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='And'
		{
			newLeafNode(otherlv_1, grammarAccess.getInteger_And_BitOperatorAccess().getAndKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getInteger_And_BitOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInteger_And_BitOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getInteger_And_BitOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInteger_And_BitOperatorAccess().getConnectsInteger_ExpressionOperatorParserRuleCall_4_0());
				}
				lv_connects_4_0=ruleInteger_ExpressionOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInteger_And_BitOperatorRule());
					}
					add(
						$current,
						"connects",
						lv_connects_4_0,
						"org.xtext.MQL.Integer_ExpressionOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getInteger_And_BitOperatorAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInteger_And_BitOperatorAccess().getConnectsInteger_ExpressionOperatorParserRuleCall_5_1_0());
					}
					lv_connects_6_0=ruleInteger_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInteger_And_BitOperatorRule());
						}
						add(
							$current,
							"connects",
							lv_connects_6_0,
							"org.xtext.MQL.Integer_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getInteger_And_BitOperatorAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleInteger_Or_BitOperator
entryRuleInteger_Or_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInteger_Or_BitOperatorRule()); }
	iv_ruleInteger_Or_BitOperator=ruleInteger_Or_BitOperator
	{ $current=$iv_ruleInteger_Or_BitOperator.current; }
	EOF;

// Rule Integer_Or_BitOperator
ruleInteger_Or_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInteger_Or_BitOperatorAccess().getInteger_Or_BitOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='Or'
		{
			newLeafNode(otherlv_1, grammarAccess.getInteger_Or_BitOperatorAccess().getOrKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getInteger_Or_BitOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInteger_Or_BitOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getInteger_Or_BitOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInteger_Or_BitOperatorAccess().getConnectsInteger_ExpressionOperatorParserRuleCall_4_0());
				}
				lv_connects_4_0=ruleInteger_ExpressionOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInteger_Or_BitOperatorRule());
					}
					add(
						$current,
						"connects",
						lv_connects_4_0,
						"org.xtext.MQL.Integer_ExpressionOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getInteger_Or_BitOperatorAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInteger_Or_BitOperatorAccess().getConnectsInteger_ExpressionOperatorParserRuleCall_5_1_0());
					}
					lv_connects_6_0=ruleInteger_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInteger_Or_BitOperatorRule());
						}
						add(
							$current,
							"connects",
							lv_connects_6_0,
							"org.xtext.MQL.Integer_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getInteger_Or_BitOperatorAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleInteger_FunctionalOperator_Begin
entryRuleInteger_FunctionalOperator_Begin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInteger_FunctionalOperator_BeginRule()); }
	iv_ruleInteger_FunctionalOperator_Begin=ruleInteger_FunctionalOperator_Begin
	{ $current=$iv_ruleInteger_FunctionalOperator_Begin.current; }
	EOF;

// Rule Integer_FunctionalOperator_Begin
ruleInteger_FunctionalOperator_Begin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='self'
		{
			newLeafNode(otherlv_0, grammarAccess.getInteger_FunctionalOperator_BeginAccess().getSelfKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getInteger_FunctionalOperator_BeginAccess().getInteger_FunctionalOperatorParserRuleCall_1());
		}
		this_Integer_FunctionalOperator_1=ruleInteger_FunctionalOperator
		{
			$current = $this_Integer_FunctionalOperator_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNumber_ExpressionOperator
entryRuleNumber_ExpressionOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_ExpressionOperatorRule()); }
	iv_ruleNumber_ExpressionOperator=ruleNumber_ExpressionOperator
	{ $current=$iv_ruleNumber_ExpressionOperator.current; }
	EOF;

// Rule Number_ExpressionOperator
ruleNumber_ExpressionOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNumber_ExpressionOperatorAccess().getNumber_BitOperatorParserRuleCall_0());
		}
		this_Number_BitOperator_0=ruleNumber_BitOperator
		{
			$current = $this_Number_BitOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumber_ExpressionOperatorAccess().getNumber_FunctionalOperator_BeginParserRuleCall_1());
		}
		this_Number_FunctionalOperator_Begin_1=ruleNumber_FunctionalOperator_Begin
		{
			$current = $this_Number_FunctionalOperator_Begin_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNumber_BitOperator
entryRuleNumber_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_BitOperatorRule()); }
	iv_ruleNumber_BitOperator=ruleNumber_BitOperator
	{ $current=$iv_ruleNumber_BitOperator.current; }
	EOF;

// Rule Number_BitOperator
ruleNumber_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNumber_BitOperatorAccess().getNumber_And_BitOperatorParserRuleCall_0());
		}
		this_Number_And_BitOperator_0=ruleNumber_And_BitOperator
		{
			$current = $this_Number_And_BitOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumber_BitOperatorAccess().getNumber_Or_BitOperatorParserRuleCall_1());
		}
		this_Number_Or_BitOperator_1=ruleNumber_Or_BitOperator
		{
			$current = $this_Number_Or_BitOperator_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNumber_And_BitOperator
entryRuleNumber_And_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_And_BitOperatorRule()); }
	iv_ruleNumber_And_BitOperator=ruleNumber_And_BitOperator
	{ $current=$iv_ruleNumber_And_BitOperator.current; }
	EOF;

// Rule Number_And_BitOperator
ruleNumber_And_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumber_And_BitOperatorAccess().getNumber_And_BitOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='And'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumber_And_BitOperatorAccess().getAndKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getNumber_And_BitOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumber_And_BitOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getNumber_And_BitOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_And_BitOperatorAccess().getConnectsNumber_ExpressionOperatorParserRuleCall_4_0());
				}
				lv_connects_4_0=ruleNumber_ExpressionOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_And_BitOperatorRule());
					}
					add(
						$current,
						"connects",
						lv_connects_4_0,
						"org.xtext.MQL.Number_ExpressionOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getNumber_And_BitOperatorAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNumber_And_BitOperatorAccess().getConnectsNumber_ExpressionOperatorParserRuleCall_5_1_0());
					}
					lv_connects_6_0=ruleNumber_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNumber_And_BitOperatorRule());
						}
						add(
							$current,
							"connects",
							lv_connects_6_0,
							"org.xtext.MQL.Number_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getNumber_And_BitOperatorAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleNumber_Or_BitOperator
entryRuleNumber_Or_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_Or_BitOperatorRule()); }
	iv_ruleNumber_Or_BitOperator=ruleNumber_Or_BitOperator
	{ $current=$iv_ruleNumber_Or_BitOperator.current; }
	EOF;

// Rule Number_Or_BitOperator
ruleNumber_Or_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumber_Or_BitOperatorAccess().getNumber_Or_BitOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='Or'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumber_Or_BitOperatorAccess().getOrKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getNumber_Or_BitOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumber_Or_BitOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getNumber_Or_BitOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Or_BitOperatorAccess().getConnectsNumber_ExpressionOperatorParserRuleCall_4_0());
				}
				lv_connects_4_0=ruleNumber_ExpressionOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Or_BitOperatorRule());
					}
					add(
						$current,
						"connects",
						lv_connects_4_0,
						"org.xtext.MQL.Number_ExpressionOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getNumber_Or_BitOperatorAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNumber_Or_BitOperatorAccess().getConnectsNumber_ExpressionOperatorParserRuleCall_5_1_0());
					}
					lv_connects_6_0=ruleNumber_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNumber_Or_BitOperatorRule());
						}
						add(
							$current,
							"connects",
							lv_connects_6_0,
							"org.xtext.MQL.Number_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getNumber_Or_BitOperatorAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleNumber_FunctionalOperator_Begin
entryRuleNumber_FunctionalOperator_Begin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_FunctionalOperator_BeginRule()); }
	iv_ruleNumber_FunctionalOperator_Begin=ruleNumber_FunctionalOperator_Begin
	{ $current=$iv_ruleNumber_FunctionalOperator_Begin.current; }
	EOF;

// Rule Number_FunctionalOperator_Begin
ruleNumber_FunctionalOperator_Begin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='self'
		{
			newLeafNode(otherlv_0, grammarAccess.getNumber_FunctionalOperator_BeginAccess().getSelfKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getNumber_FunctionalOperator_BeginAccess().getNumber_FunctionalOperatorParserRuleCall_1());
		}
		this_Number_FunctionalOperator_1=ruleNumber_FunctionalOperator
		{
			$current = $this_Number_FunctionalOperator_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCharacter_ExpressionOperator
entryRuleCharacter_ExpressionOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharacter_ExpressionOperatorRule()); }
	iv_ruleCharacter_ExpressionOperator=ruleCharacter_ExpressionOperator
	{ $current=$iv_ruleCharacter_ExpressionOperator.current; }
	EOF;

// Rule Character_ExpressionOperator
ruleCharacter_ExpressionOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCharacter_ExpressionOperatorAccess().getCharacter_BitOperatorParserRuleCall_0());
		}
		this_Character_BitOperator_0=ruleCharacter_BitOperator
		{
			$current = $this_Character_BitOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCharacter_ExpressionOperatorAccess().getCharacter_FunctionalOperator_BeginParserRuleCall_1());
		}
		this_Character_FunctionalOperator_Begin_1=ruleCharacter_FunctionalOperator_Begin
		{
			$current = $this_Character_FunctionalOperator_Begin_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCharacter_BitOperator
entryRuleCharacter_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharacter_BitOperatorRule()); }
	iv_ruleCharacter_BitOperator=ruleCharacter_BitOperator
	{ $current=$iv_ruleCharacter_BitOperator.current; }
	EOF;

// Rule Character_BitOperator
ruleCharacter_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCharacter_BitOperatorAccess().getCharacter_And_BitOperatorParserRuleCall_0());
		}
		this_Character_And_BitOperator_0=ruleCharacter_And_BitOperator
		{
			$current = $this_Character_And_BitOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCharacter_BitOperatorAccess().getCharacter_Or_BitOperatorParserRuleCall_1());
		}
		this_Character_Or_BitOperator_1=ruleCharacter_Or_BitOperator
		{
			$current = $this_Character_Or_BitOperator_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCharacter_And_BitOperator
entryRuleCharacter_And_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharacter_And_BitOperatorRule()); }
	iv_ruleCharacter_And_BitOperator=ruleCharacter_And_BitOperator
	{ $current=$iv_ruleCharacter_And_BitOperator.current; }
	EOF;

// Rule Character_And_BitOperator
ruleCharacter_And_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCharacter_And_BitOperatorAccess().getCharacter_And_BitOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='And'
		{
			newLeafNode(otherlv_1, grammarAccess.getCharacter_And_BitOperatorAccess().getAndKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getCharacter_And_BitOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCharacter_And_BitOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getCharacter_And_BitOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCharacter_And_BitOperatorAccess().getConnectsCharacter_ExpressionOperatorParserRuleCall_4_0());
				}
				lv_connects_4_0=ruleCharacter_ExpressionOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCharacter_And_BitOperatorRule());
					}
					add(
						$current,
						"connects",
						lv_connects_4_0,
						"org.xtext.MQL.Character_ExpressionOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getCharacter_And_BitOperatorAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCharacter_And_BitOperatorAccess().getConnectsCharacter_ExpressionOperatorParserRuleCall_5_1_0());
					}
					lv_connects_6_0=ruleCharacter_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCharacter_And_BitOperatorRule());
						}
						add(
							$current,
							"connects",
							lv_connects_6_0,
							"org.xtext.MQL.Character_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getCharacter_And_BitOperatorAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleCharacter_Or_BitOperator
entryRuleCharacter_Or_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharacter_Or_BitOperatorRule()); }
	iv_ruleCharacter_Or_BitOperator=ruleCharacter_Or_BitOperator
	{ $current=$iv_ruleCharacter_Or_BitOperator.current; }
	EOF;

// Rule Character_Or_BitOperator
ruleCharacter_Or_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCharacter_Or_BitOperatorAccess().getCharacter_Or_BitOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='Or'
		{
			newLeafNode(otherlv_1, grammarAccess.getCharacter_Or_BitOperatorAccess().getOrKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getCharacter_Or_BitOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCharacter_Or_BitOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getCharacter_Or_BitOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCharacter_Or_BitOperatorAccess().getConnectsCharacter_ExpressionOperatorParserRuleCall_4_0());
				}
				lv_connects_4_0=ruleCharacter_ExpressionOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCharacter_Or_BitOperatorRule());
					}
					add(
						$current,
						"connects",
						lv_connects_4_0,
						"org.xtext.MQL.Character_ExpressionOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getCharacter_Or_BitOperatorAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCharacter_Or_BitOperatorAccess().getConnectsCharacter_ExpressionOperatorParserRuleCall_5_1_0());
					}
					lv_connects_6_0=ruleCharacter_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCharacter_Or_BitOperatorRule());
						}
						add(
							$current,
							"connects",
							lv_connects_6_0,
							"org.xtext.MQL.Character_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getCharacter_Or_BitOperatorAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleCharacter_FunctionalOperator_Begin
entryRuleCharacter_FunctionalOperator_Begin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharacter_FunctionalOperator_BeginRule()); }
	iv_ruleCharacter_FunctionalOperator_Begin=ruleCharacter_FunctionalOperator_Begin
	{ $current=$iv_ruleCharacter_FunctionalOperator_Begin.current; }
	EOF;

// Rule Character_FunctionalOperator_Begin
ruleCharacter_FunctionalOperator_Begin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='self'
		{
			newLeafNode(otherlv_0, grammarAccess.getCharacter_FunctionalOperator_BeginAccess().getSelfKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getCharacter_FunctionalOperator_BeginAccess().getCharacter_FunctionalOperatorParserRuleCall_1());
		}
		this_Character_FunctionalOperator_1=ruleCharacter_FunctionalOperator
		{
			$current = $this_Character_FunctionalOperator_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCharSequence_ExpressionOperator
entryRuleCharSequence_ExpressionOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharSequence_ExpressionOperatorRule()); }
	iv_ruleCharSequence_ExpressionOperator=ruleCharSequence_ExpressionOperator
	{ $current=$iv_ruleCharSequence_ExpressionOperator.current; }
	EOF;

// Rule CharSequence_ExpressionOperator
ruleCharSequence_ExpressionOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCharSequence_ExpressionOperatorAccess().getCharSequence_BitOperatorParserRuleCall_0());
		}
		this_CharSequence_BitOperator_0=ruleCharSequence_BitOperator
		{
			$current = $this_CharSequence_BitOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCharSequence_ExpressionOperatorAccess().getCharSequence_FunctionalOperator_BeginParserRuleCall_1());
		}
		this_CharSequence_FunctionalOperator_Begin_1=ruleCharSequence_FunctionalOperator_Begin
		{
			$current = $this_CharSequence_FunctionalOperator_Begin_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCharSequence_BitOperator
entryRuleCharSequence_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharSequence_BitOperatorRule()); }
	iv_ruleCharSequence_BitOperator=ruleCharSequence_BitOperator
	{ $current=$iv_ruleCharSequence_BitOperator.current; }
	EOF;

// Rule CharSequence_BitOperator
ruleCharSequence_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCharSequence_BitOperatorAccess().getCharSequence_And_BitOperatorParserRuleCall_0());
		}
		this_CharSequence_And_BitOperator_0=ruleCharSequence_And_BitOperator
		{
			$current = $this_CharSequence_And_BitOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCharSequence_BitOperatorAccess().getCharSequence_Or_BitOperatorParserRuleCall_1());
		}
		this_CharSequence_Or_BitOperator_1=ruleCharSequence_Or_BitOperator
		{
			$current = $this_CharSequence_Or_BitOperator_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCharSequence_And_BitOperator
entryRuleCharSequence_And_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharSequence_And_BitOperatorRule()); }
	iv_ruleCharSequence_And_BitOperator=ruleCharSequence_And_BitOperator
	{ $current=$iv_ruleCharSequence_And_BitOperator.current; }
	EOF;

// Rule CharSequence_And_BitOperator
ruleCharSequence_And_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCharSequence_And_BitOperatorAccess().getCharSequence_And_BitOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='And'
		{
			newLeafNode(otherlv_1, grammarAccess.getCharSequence_And_BitOperatorAccess().getAndKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getCharSequence_And_BitOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCharSequence_And_BitOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getCharSequence_And_BitOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCharSequence_And_BitOperatorAccess().getConnectsCharSequence_ExpressionOperatorParserRuleCall_4_0());
				}
				lv_connects_4_0=ruleCharSequence_ExpressionOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCharSequence_And_BitOperatorRule());
					}
					add(
						$current,
						"connects",
						lv_connects_4_0,
						"org.xtext.MQL.CharSequence_ExpressionOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getCharSequence_And_BitOperatorAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCharSequence_And_BitOperatorAccess().getConnectsCharSequence_ExpressionOperatorParserRuleCall_5_1_0());
					}
					lv_connects_6_0=ruleCharSequence_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCharSequence_And_BitOperatorRule());
						}
						add(
							$current,
							"connects",
							lv_connects_6_0,
							"org.xtext.MQL.CharSequence_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getCharSequence_And_BitOperatorAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleCharSequence_Or_BitOperator
entryRuleCharSequence_Or_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharSequence_Or_BitOperatorRule()); }
	iv_ruleCharSequence_Or_BitOperator=ruleCharSequence_Or_BitOperator
	{ $current=$iv_ruleCharSequence_Or_BitOperator.current; }
	EOF;

// Rule CharSequence_Or_BitOperator
ruleCharSequence_Or_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCharSequence_Or_BitOperatorAccess().getCharSequence_Or_BitOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='Or'
		{
			newLeafNode(otherlv_1, grammarAccess.getCharSequence_Or_BitOperatorAccess().getOrKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getCharSequence_Or_BitOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCharSequence_Or_BitOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getCharSequence_Or_BitOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCharSequence_Or_BitOperatorAccess().getConnectsCharSequence_ExpressionOperatorParserRuleCall_4_0());
				}
				lv_connects_4_0=ruleCharSequence_ExpressionOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCharSequence_Or_BitOperatorRule());
					}
					add(
						$current,
						"connects",
						lv_connects_4_0,
						"org.xtext.MQL.CharSequence_ExpressionOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getCharSequence_Or_BitOperatorAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCharSequence_Or_BitOperatorAccess().getConnectsCharSequence_ExpressionOperatorParserRuleCall_5_1_0());
					}
					lv_connects_6_0=ruleCharSequence_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCharSequence_Or_BitOperatorRule());
						}
						add(
							$current,
							"connects",
							lv_connects_6_0,
							"org.xtext.MQL.CharSequence_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getCharSequence_Or_BitOperatorAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleCharSequence_FunctionalOperator_Begin
entryRuleCharSequence_FunctionalOperator_Begin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharSequence_FunctionalOperator_BeginRule()); }
	iv_ruleCharSequence_FunctionalOperator_Begin=ruleCharSequence_FunctionalOperator_Begin
	{ $current=$iv_ruleCharSequence_FunctionalOperator_Begin.current; }
	EOF;

// Rule CharSequence_FunctionalOperator_Begin
ruleCharSequence_FunctionalOperator_Begin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='self'
		{
			newLeafNode(otherlv_0, grammarAccess.getCharSequence_FunctionalOperator_BeginAccess().getSelfKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getCharSequence_FunctionalOperator_BeginAccess().getCharSequence_FunctionalOperatorParserRuleCall_1());
		}
		this_CharSequence_FunctionalOperator_1=ruleCharSequence_FunctionalOperator
		{
			$current = $this_CharSequence_FunctionalOperator_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleObject_ExpressionOperator
entryRuleObject_ExpressionOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObject_ExpressionOperatorRule()); }
	iv_ruleObject_ExpressionOperator=ruleObject_ExpressionOperator
	{ $current=$iv_ruleObject_ExpressionOperator.current; }
	EOF;

// Rule Object_ExpressionOperator
ruleObject_ExpressionOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getObject_ExpressionOperatorAccess().getObject_BitOperatorParserRuleCall_0());
		}
		this_Object_BitOperator_0=ruleObject_BitOperator
		{
			$current = $this_Object_BitOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getObject_ExpressionOperatorAccess().getObject_FunctionalOperator_BeginParserRuleCall_1());
		}
		this_Object_FunctionalOperator_Begin_1=ruleObject_FunctionalOperator_Begin
		{
			$current = $this_Object_FunctionalOperator_Begin_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleObject_BitOperator
entryRuleObject_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObject_BitOperatorRule()); }
	iv_ruleObject_BitOperator=ruleObject_BitOperator
	{ $current=$iv_ruleObject_BitOperator.current; }
	EOF;

// Rule Object_BitOperator
ruleObject_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getObject_BitOperatorAccess().getObject_And_BitOperatorParserRuleCall_0());
		}
		this_Object_And_BitOperator_0=ruleObject_And_BitOperator
		{
			$current = $this_Object_And_BitOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getObject_BitOperatorAccess().getObject_Or_BitOperatorParserRuleCall_1());
		}
		this_Object_Or_BitOperator_1=ruleObject_Or_BitOperator
		{
			$current = $this_Object_Or_BitOperator_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleObject_And_BitOperator
entryRuleObject_And_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObject_And_BitOperatorRule()); }
	iv_ruleObject_And_BitOperator=ruleObject_And_BitOperator
	{ $current=$iv_ruleObject_And_BitOperator.current; }
	EOF;

// Rule Object_And_BitOperator
ruleObject_And_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObject_And_BitOperatorAccess().getObject_And_BitOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='And'
		{
			newLeafNode(otherlv_1, grammarAccess.getObject_And_BitOperatorAccess().getAndKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getObject_And_BitOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObject_And_BitOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getObject_And_BitOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObject_And_BitOperatorAccess().getConnectsObject_ExpressionOperatorParserRuleCall_4_0());
				}
				lv_connects_4_0=ruleObject_ExpressionOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObject_And_BitOperatorRule());
					}
					add(
						$current,
						"connects",
						lv_connects_4_0,
						"org.xtext.MQL.Object_ExpressionOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getObject_And_BitOperatorAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getObject_And_BitOperatorAccess().getConnectsObject_ExpressionOperatorParserRuleCall_5_1_0());
					}
					lv_connects_6_0=ruleObject_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObject_And_BitOperatorRule());
						}
						add(
							$current,
							"connects",
							lv_connects_6_0,
							"org.xtext.MQL.Object_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getObject_And_BitOperatorAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleObject_Or_BitOperator
entryRuleObject_Or_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObject_Or_BitOperatorRule()); }
	iv_ruleObject_Or_BitOperator=ruleObject_Or_BitOperator
	{ $current=$iv_ruleObject_Or_BitOperator.current; }
	EOF;

// Rule Object_Or_BitOperator
ruleObject_Or_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObject_Or_BitOperatorAccess().getObject_Or_BitOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='Or'
		{
			newLeafNode(otherlv_1, grammarAccess.getObject_Or_BitOperatorAccess().getOrKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getObject_Or_BitOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObject_Or_BitOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getObject_Or_BitOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObject_Or_BitOperatorAccess().getConnectsObject_ExpressionOperatorParserRuleCall_4_0());
				}
				lv_connects_4_0=ruleObject_ExpressionOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObject_Or_BitOperatorRule());
					}
					add(
						$current,
						"connects",
						lv_connects_4_0,
						"org.xtext.MQL.Object_ExpressionOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getObject_Or_BitOperatorAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getObject_Or_BitOperatorAccess().getConnectsObject_ExpressionOperatorParserRuleCall_5_1_0());
					}
					lv_connects_6_0=ruleObject_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObject_Or_BitOperatorRule());
						}
						add(
							$current,
							"connects",
							lv_connects_6_0,
							"org.xtext.MQL.Object_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getObject_Or_BitOperatorAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleObject_FunctionalOperator_Begin
entryRuleObject_FunctionalOperator_Begin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObject_FunctionalOperator_BeginRule()); }
	iv_ruleObject_FunctionalOperator_Begin=ruleObject_FunctionalOperator_Begin
	{ $current=$iv_ruleObject_FunctionalOperator_Begin.current; }
	EOF;

// Rule Object_FunctionalOperator_Begin
ruleObject_FunctionalOperator_Begin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='self'
		{
			newLeafNode(otherlv_0, grammarAccess.getObject_FunctionalOperator_BeginAccess().getSelfKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getObject_FunctionalOperator_BeginAccess().getObject_FunctionalOperatorParserRuleCall_1());
		}
		this_Object_FunctionalOperator_1=ruleObject_FunctionalOperator
		{
			$current = $this_Object_FunctionalOperator_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleString_ExpressionOperator
entryRuleString_ExpressionOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getString_ExpressionOperatorRule()); }
	iv_ruleString_ExpressionOperator=ruleString_ExpressionOperator
	{ $current=$iv_ruleString_ExpressionOperator.current; }
	EOF;

// Rule String_ExpressionOperator
ruleString_ExpressionOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getString_ExpressionOperatorAccess().getString_BitOperatorParserRuleCall_0());
		}
		this_String_BitOperator_0=ruleString_BitOperator
		{
			$current = $this_String_BitOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_ExpressionOperatorAccess().getString_FunctionalOperator_BeginParserRuleCall_1());
		}
		this_String_FunctionalOperator_Begin_1=ruleString_FunctionalOperator_Begin
		{
			$current = $this_String_FunctionalOperator_Begin_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleString_BitOperator
entryRuleString_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getString_BitOperatorRule()); }
	iv_ruleString_BitOperator=ruleString_BitOperator
	{ $current=$iv_ruleString_BitOperator.current; }
	EOF;

// Rule String_BitOperator
ruleString_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getString_BitOperatorAccess().getString_And_BitOperatorParserRuleCall_0());
		}
		this_String_And_BitOperator_0=ruleString_And_BitOperator
		{
			$current = $this_String_And_BitOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_BitOperatorAccess().getString_Or_BitOperatorParserRuleCall_1());
		}
		this_String_Or_BitOperator_1=ruleString_Or_BitOperator
		{
			$current = $this_String_Or_BitOperator_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleString_And_BitOperator
entryRuleString_And_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getString_And_BitOperatorRule()); }
	iv_ruleString_And_BitOperator=ruleString_And_BitOperator
	{ $current=$iv_ruleString_And_BitOperator.current; }
	EOF;

// Rule String_And_BitOperator
ruleString_And_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getString_And_BitOperatorAccess().getString_And_BitOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='And'
		{
			newLeafNode(otherlv_1, grammarAccess.getString_And_BitOperatorAccess().getAndKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getString_And_BitOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getString_And_BitOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getString_And_BitOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getString_And_BitOperatorAccess().getConnectsString_ExpressionOperatorParserRuleCall_4_0());
				}
				lv_connects_4_0=ruleString_ExpressionOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getString_And_BitOperatorRule());
					}
					add(
						$current,
						"connects",
						lv_connects_4_0,
						"org.xtext.MQL.String_ExpressionOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getString_And_BitOperatorAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getString_And_BitOperatorAccess().getConnectsString_ExpressionOperatorParserRuleCall_5_1_0());
					}
					lv_connects_6_0=ruleString_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getString_And_BitOperatorRule());
						}
						add(
							$current,
							"connects",
							lv_connects_6_0,
							"org.xtext.MQL.String_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getString_And_BitOperatorAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleString_Or_BitOperator
entryRuleString_Or_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getString_Or_BitOperatorRule()); }
	iv_ruleString_Or_BitOperator=ruleString_Or_BitOperator
	{ $current=$iv_ruleString_Or_BitOperator.current; }
	EOF;

// Rule String_Or_BitOperator
ruleString_Or_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getString_Or_BitOperatorAccess().getString_Or_BitOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='Or'
		{
			newLeafNode(otherlv_1, grammarAccess.getString_Or_BitOperatorAccess().getOrKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getString_Or_BitOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getString_Or_BitOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getString_Or_BitOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getString_Or_BitOperatorAccess().getConnectsString_ExpressionOperatorParserRuleCall_4_0());
				}
				lv_connects_4_0=ruleString_ExpressionOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getString_Or_BitOperatorRule());
					}
					add(
						$current,
						"connects",
						lv_connects_4_0,
						"org.xtext.MQL.String_ExpressionOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getString_Or_BitOperatorAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getString_Or_BitOperatorAccess().getConnectsString_ExpressionOperatorParserRuleCall_5_1_0());
					}
					lv_connects_6_0=ruleString_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getString_Or_BitOperatorRule());
						}
						add(
							$current,
							"connects",
							lv_connects_6_0,
							"org.xtext.MQL.String_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getString_Or_BitOperatorAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleString_FunctionalOperator_Begin
entryRuleString_FunctionalOperator_Begin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getString_FunctionalOperator_BeginRule()); }
	iv_ruleString_FunctionalOperator_Begin=ruleString_FunctionalOperator_Begin
	{ $current=$iv_ruleString_FunctionalOperator_Begin.current; }
	EOF;

// Rule String_FunctionalOperator_Begin
ruleString_FunctionalOperator_Begin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='self'
		{
			newLeafNode(otherlv_0, grammarAccess.getString_FunctionalOperator_BeginAccess().getSelfKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperator_BeginAccess().getString_FunctionalOperatorParserRuleCall_1());
		}
		this_String_FunctionalOperator_1=ruleString_FunctionalOperator
		{
			$current = $this_String_FunctionalOperator_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBoolean_ExpressionOperator
entryRuleBoolean_ExpressionOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolean_ExpressionOperatorRule()); }
	iv_ruleBoolean_ExpressionOperator=ruleBoolean_ExpressionOperator
	{ $current=$iv_ruleBoolean_ExpressionOperator.current; }
	EOF;

// Rule Boolean_ExpressionOperator
ruleBoolean_ExpressionOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBoolean_ExpressionOperatorAccess().getBoolean_BitOperatorParserRuleCall_0());
		}
		this_Boolean_BitOperator_0=ruleBoolean_BitOperator
		{
			$current = $this_Boolean_BitOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBoolean_ExpressionOperatorAccess().getBoolean_FunctionalOperator_BeginParserRuleCall_1());
		}
		this_Boolean_FunctionalOperator_Begin_1=ruleBoolean_FunctionalOperator_Begin
		{
			$current = $this_Boolean_FunctionalOperator_Begin_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBoolean_BitOperator
entryRuleBoolean_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolean_BitOperatorRule()); }
	iv_ruleBoolean_BitOperator=ruleBoolean_BitOperator
	{ $current=$iv_ruleBoolean_BitOperator.current; }
	EOF;

// Rule Boolean_BitOperator
ruleBoolean_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBoolean_BitOperatorAccess().getBoolean_And_BitOperatorParserRuleCall_0());
		}
		this_Boolean_And_BitOperator_0=ruleBoolean_And_BitOperator
		{
			$current = $this_Boolean_And_BitOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBoolean_BitOperatorAccess().getBoolean_Or_BitOperatorParserRuleCall_1());
		}
		this_Boolean_Or_BitOperator_1=ruleBoolean_Or_BitOperator
		{
			$current = $this_Boolean_Or_BitOperator_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBoolean_And_BitOperator
entryRuleBoolean_And_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolean_And_BitOperatorRule()); }
	iv_ruleBoolean_And_BitOperator=ruleBoolean_And_BitOperator
	{ $current=$iv_ruleBoolean_And_BitOperator.current; }
	EOF;

// Rule Boolean_And_BitOperator
ruleBoolean_And_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBoolean_And_BitOperatorAccess().getBoolean_And_BitOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='And'
		{
			newLeafNode(otherlv_1, grammarAccess.getBoolean_And_BitOperatorAccess().getAndKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getBoolean_And_BitOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoolean_And_BitOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getBoolean_And_BitOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBoolean_And_BitOperatorAccess().getConnectsBoolean_ExpressionOperatorParserRuleCall_4_0());
				}
				lv_connects_4_0=ruleBoolean_ExpressionOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoolean_And_BitOperatorRule());
					}
					add(
						$current,
						"connects",
						lv_connects_4_0,
						"org.xtext.MQL.Boolean_ExpressionOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getBoolean_And_BitOperatorAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolean_And_BitOperatorAccess().getConnectsBoolean_ExpressionOperatorParserRuleCall_5_1_0());
					}
					lv_connects_6_0=ruleBoolean_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolean_And_BitOperatorRule());
						}
						add(
							$current,
							"connects",
							lv_connects_6_0,
							"org.xtext.MQL.Boolean_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getBoolean_And_BitOperatorAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleBoolean_Or_BitOperator
entryRuleBoolean_Or_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolean_Or_BitOperatorRule()); }
	iv_ruleBoolean_Or_BitOperator=ruleBoolean_Or_BitOperator
	{ $current=$iv_ruleBoolean_Or_BitOperator.current; }
	EOF;

// Rule Boolean_Or_BitOperator
ruleBoolean_Or_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBoolean_Or_BitOperatorAccess().getBoolean_Or_BitOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='Or'
		{
			newLeafNode(otherlv_1, grammarAccess.getBoolean_Or_BitOperatorAccess().getOrKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getBoolean_Or_BitOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoolean_Or_BitOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getBoolean_Or_BitOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBoolean_Or_BitOperatorAccess().getConnectsBoolean_ExpressionOperatorParserRuleCall_4_0());
				}
				lv_connects_4_0=ruleBoolean_ExpressionOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoolean_Or_BitOperatorRule());
					}
					add(
						$current,
						"connects",
						lv_connects_4_0,
						"org.xtext.MQL.Boolean_ExpressionOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getBoolean_Or_BitOperatorAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBoolean_Or_BitOperatorAccess().getConnectsBoolean_ExpressionOperatorParserRuleCall_5_1_0());
					}
					lv_connects_6_0=ruleBoolean_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoolean_Or_BitOperatorRule());
						}
						add(
							$current,
							"connects",
							lv_connects_6_0,
							"org.xtext.MQL.Boolean_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getBoolean_Or_BitOperatorAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleBoolean_FunctionalOperator_Begin
entryRuleBoolean_FunctionalOperator_Begin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolean_FunctionalOperator_BeginRule()); }
	iv_ruleBoolean_FunctionalOperator_Begin=ruleBoolean_FunctionalOperator_Begin
	{ $current=$iv_ruleBoolean_FunctionalOperator_Begin.current; }
	EOF;

// Rule Boolean_FunctionalOperator_Begin
ruleBoolean_FunctionalOperator_Begin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='self'
		{
			newLeafNode(otherlv_0, grammarAccess.getBoolean_FunctionalOperator_BeginAccess().getSelfKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getBoolean_FunctionalOperator_BeginAccess().getBoolean_FunctionalOperatorParserRuleCall_1());
		}
		this_Boolean_FunctionalOperator_1=ruleBoolean_FunctionalOperator
		{
			$current = $this_Boolean_FunctionalOperator_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDouble_ExpressionOperator
entryRuleDouble_ExpressionOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDouble_ExpressionOperatorRule()); }
	iv_ruleDouble_ExpressionOperator=ruleDouble_ExpressionOperator
	{ $current=$iv_ruleDouble_ExpressionOperator.current; }
	EOF;

// Rule Double_ExpressionOperator
ruleDouble_ExpressionOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDouble_ExpressionOperatorAccess().getDouble_BitOperatorParserRuleCall_0());
		}
		this_Double_BitOperator_0=ruleDouble_BitOperator
		{
			$current = $this_Double_BitOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDouble_ExpressionOperatorAccess().getDouble_FunctionalOperator_BeginParserRuleCall_1());
		}
		this_Double_FunctionalOperator_Begin_1=ruleDouble_FunctionalOperator_Begin
		{
			$current = $this_Double_FunctionalOperator_Begin_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDouble_BitOperator
entryRuleDouble_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDouble_BitOperatorRule()); }
	iv_ruleDouble_BitOperator=ruleDouble_BitOperator
	{ $current=$iv_ruleDouble_BitOperator.current; }
	EOF;

// Rule Double_BitOperator
ruleDouble_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDouble_BitOperatorAccess().getDouble_And_BitOperatorParserRuleCall_0());
		}
		this_Double_And_BitOperator_0=ruleDouble_And_BitOperator
		{
			$current = $this_Double_And_BitOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDouble_BitOperatorAccess().getDouble_Or_BitOperatorParserRuleCall_1());
		}
		this_Double_Or_BitOperator_1=ruleDouble_Or_BitOperator
		{
			$current = $this_Double_Or_BitOperator_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDouble_And_BitOperator
entryRuleDouble_And_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDouble_And_BitOperatorRule()); }
	iv_ruleDouble_And_BitOperator=ruleDouble_And_BitOperator
	{ $current=$iv_ruleDouble_And_BitOperator.current; }
	EOF;

// Rule Double_And_BitOperator
ruleDouble_And_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDouble_And_BitOperatorAccess().getDouble_And_BitOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='And'
		{
			newLeafNode(otherlv_1, grammarAccess.getDouble_And_BitOperatorAccess().getAndKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getDouble_And_BitOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDouble_And_BitOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getDouble_And_BitOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDouble_And_BitOperatorAccess().getConnectsDouble_ExpressionOperatorParserRuleCall_4_0());
				}
				lv_connects_4_0=ruleDouble_ExpressionOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDouble_And_BitOperatorRule());
					}
					add(
						$current,
						"connects",
						lv_connects_4_0,
						"org.xtext.MQL.Double_ExpressionOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getDouble_And_BitOperatorAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDouble_And_BitOperatorAccess().getConnectsDouble_ExpressionOperatorParserRuleCall_5_1_0());
					}
					lv_connects_6_0=ruleDouble_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDouble_And_BitOperatorRule());
						}
						add(
							$current,
							"connects",
							lv_connects_6_0,
							"org.xtext.MQL.Double_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getDouble_And_BitOperatorAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleDouble_Or_BitOperator
entryRuleDouble_Or_BitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDouble_Or_BitOperatorRule()); }
	iv_ruleDouble_Or_BitOperator=ruleDouble_Or_BitOperator
	{ $current=$iv_ruleDouble_Or_BitOperator.current; }
	EOF;

// Rule Double_Or_BitOperator
ruleDouble_Or_BitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDouble_Or_BitOperatorAccess().getDouble_Or_BitOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='Or'
		{
			newLeafNode(otherlv_1, grammarAccess.getDouble_Or_BitOperatorAccess().getOrKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getDouble_Or_BitOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDouble_Or_BitOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getDouble_Or_BitOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDouble_Or_BitOperatorAccess().getConnectsDouble_ExpressionOperatorParserRuleCall_4_0());
				}
				lv_connects_4_0=ruleDouble_ExpressionOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDouble_Or_BitOperatorRule());
					}
					add(
						$current,
						"connects",
						lv_connects_4_0,
						"org.xtext.MQL.Double_ExpressionOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getDouble_Or_BitOperatorAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDouble_Or_BitOperatorAccess().getConnectsDouble_ExpressionOperatorParserRuleCall_5_1_0());
					}
					lv_connects_6_0=ruleDouble_ExpressionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDouble_Or_BitOperatorRule());
						}
						add(
							$current,
							"connects",
							lv_connects_6_0,
							"org.xtext.MQL.Double_ExpressionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getDouble_Or_BitOperatorAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleDouble_FunctionalOperator_Begin
entryRuleDouble_FunctionalOperator_Begin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDouble_FunctionalOperator_BeginRule()); }
	iv_ruleDouble_FunctionalOperator_Begin=ruleDouble_FunctionalOperator_Begin
	{ $current=$iv_ruleDouble_FunctionalOperator_Begin.current; }
	EOF;

// Rule Double_FunctionalOperator_Begin
ruleDouble_FunctionalOperator_Begin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='self'
		{
			newLeafNode(otherlv_0, grammarAccess.getDouble_FunctionalOperator_BeginAccess().getSelfKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getDouble_FunctionalOperator_BeginAccess().getDouble_FunctionalOperatorParserRuleCall_1());
		}
		this_Double_FunctionalOperator_1=ruleDouble_FunctionalOperator
		{
			$current = $this_Double_FunctionalOperator_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInteger_FunctionalOperator
entryRuleInteger_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInteger_FunctionalOperatorRule()); }
	iv_ruleInteger_FunctionalOperator=ruleInteger_FunctionalOperator
	{ $current=$iv_ruleInteger_FunctionalOperator.current; }
	EOF;

// Rule Integer_FunctionalOperator
ruleInteger_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInteger_FunctionalOperatorAccess().getDoubleValue_FunctionalOperatorParserRuleCall_0());
		}
		this_doubleValue_FunctionalOperator_0=ruledoubleValue_FunctionalOperator
		{
			$current = $this_doubleValue_FunctionalOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInteger_FunctionalOperatorAccess().getNumber_Integer_greaterThan_FunctionalOperatorParserRuleCall_1());
		}
		this_Number_Integer_greaterThan_FunctionalOperator_1=ruleNumber_Integer_greaterThan_FunctionalOperator
		{
			$current = $this_Number_Integer_greaterThan_FunctionalOperator_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInteger_FunctionalOperatorAccess().getNumber_Integer_greaterEquals_FunctionalOperatorParserRuleCall_2());
		}
		this_Number_Integer_greaterEquals_FunctionalOperator_2=ruleNumber_Integer_greaterEquals_FunctionalOperator
		{
			$current = $this_Number_Integer_greaterEquals_FunctionalOperator_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInteger_FunctionalOperatorAccess().getNumber_Integer_smallerThan_FunctionalOperatorParserRuleCall_3());
		}
		this_Number_Integer_smallerThan_FunctionalOperator_3=ruleNumber_Integer_smallerThan_FunctionalOperator
		{
			$current = $this_Number_Integer_smallerThan_FunctionalOperator_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInteger_FunctionalOperatorAccess().getNumber_Integer_smallerEquals_FunctionalOperatorParserRuleCall_4());
		}
		this_Number_Integer_smallerEquals_FunctionalOperator_4=ruleNumber_Integer_smallerEquals_FunctionalOperator
		{
			$current = $this_Number_Integer_smallerEquals_FunctionalOperator_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInteger_FunctionalOperatorAccess().getNumber_Integer_Object_Number_equals_FunctionalOperatorParserRuleCall_5());
		}
		this_Number_Integer_Object_Number_equals_FunctionalOperator_5=ruleNumber_Integer_Object_Number_equals_FunctionalOperator
		{
			$current = $this_Number_Integer_Object_Number_equals_FunctionalOperator_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInteger_FunctionalOperatorAccess().getNumber_Integer_Object_Number_toString_FunctionalOperatorParserRuleCall_6());
		}
		this_Number_Integer_Object_Number_toString_FunctionalOperator_6=ruleNumber_Integer_Object_Number_toString_FunctionalOperator
		{
			$current = $this_Number_Integer_Object_Number_toString_FunctionalOperator_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInteger_FunctionalOperatorAccess().getNumber_Integer_Object_Number_hashCode_FunctionalOperatorParserRuleCall_7());
		}
		this_Number_Integer_Object_Number_hashCode_FunctionalOperator_7=ruleNumber_Integer_Object_Number_hashCode_FunctionalOperator
		{
			$current = $this_Number_Integer_Object_Number_hashCode_FunctionalOperator_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNumber_FunctionalOperator
entryRuleNumber_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_FunctionalOperatorRule()); }
	iv_ruleNumber_FunctionalOperator=ruleNumber_FunctionalOperator
	{ $current=$iv_ruleNumber_FunctionalOperator.current; }
	EOF;

// Rule Number_FunctionalOperator
ruleNumber_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNumber_FunctionalOperatorAccess().getGreaterThan_FunctionalOperatorParserRuleCall_0());
		}
		this_greaterThan_FunctionalOperator_0=rulegreaterThan_FunctionalOperator
		{
			$current = $this_greaterThan_FunctionalOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumber_FunctionalOperatorAccess().getGreaterEquals_FunctionalOperatorParserRuleCall_1());
		}
		this_greaterEquals_FunctionalOperator_1=rulegreaterEquals_FunctionalOperator
		{
			$current = $this_greaterEquals_FunctionalOperator_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumber_FunctionalOperatorAccess().getSmallerThan_FunctionalOperatorParserRuleCall_2());
		}
		this_smallerThan_FunctionalOperator_2=rulesmallerThan_FunctionalOperator
		{
			$current = $this_smallerThan_FunctionalOperator_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumber_FunctionalOperatorAccess().getSmallerEquals_FunctionalOperatorParserRuleCall_3());
		}
		this_smallerEquals_FunctionalOperator_3=rulesmallerEquals_FunctionalOperator
		{
			$current = $this_smallerEquals_FunctionalOperator_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumber_FunctionalOperatorAccess().getObject_Number_equals_FunctionalOperatorParserRuleCall_4());
		}
		this_Object_Number_equals_FunctionalOperator_4=ruleObject_Number_equals_FunctionalOperator
		{
			$current = $this_Object_Number_equals_FunctionalOperator_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumber_FunctionalOperatorAccess().getObject_Number_toString_FunctionalOperatorParserRuleCall_5());
		}
		this_Object_Number_toString_FunctionalOperator_5=ruleObject_Number_toString_FunctionalOperator
		{
			$current = $this_Object_Number_toString_FunctionalOperator_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumber_FunctionalOperatorAccess().getObject_Number_hashCode_FunctionalOperatorParserRuleCall_6());
		}
		this_Object_Number_hashCode_FunctionalOperator_6=ruleObject_Number_hashCode_FunctionalOperator
		{
			$current = $this_Object_Number_hashCode_FunctionalOperator_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCharacter_FunctionalOperator
entryRuleCharacter_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharacter_FunctionalOperatorRule()); }
	iv_ruleCharacter_FunctionalOperator=ruleCharacter_FunctionalOperator
	{ $current=$iv_ruleCharacter_FunctionalOperator.current; }
	EOF;

// Rule Character_FunctionalOperator
ruleCharacter_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCharacter_FunctionalOperatorAccess().getObject_Character_equals_FunctionalOperatorParserRuleCall_0());
		}
		this_Object_Character_equals_FunctionalOperator_0=ruleObject_Character_equals_FunctionalOperator
		{
			$current = $this_Object_Character_equals_FunctionalOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCharacter_FunctionalOperatorAccess().getObject_Character_toString_FunctionalOperatorParserRuleCall_1());
		}
		this_Object_Character_toString_FunctionalOperator_1=ruleObject_Character_toString_FunctionalOperator
		{
			$current = $this_Object_Character_toString_FunctionalOperator_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCharacter_FunctionalOperatorAccess().getObject_Character_hashCode_FunctionalOperatorParserRuleCall_2());
		}
		this_Object_Character_hashCode_FunctionalOperator_2=ruleObject_Character_hashCode_FunctionalOperator
		{
			$current = $this_Object_Character_hashCode_FunctionalOperator_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCharSequence_FunctionalOperator
entryRuleCharSequence_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharSequence_FunctionalOperatorRule()); }
	iv_ruleCharSequence_FunctionalOperator=ruleCharSequence_FunctionalOperator
	{ $current=$iv_ruleCharSequence_FunctionalOperator.current; }
	EOF;

// Rule CharSequence_FunctionalOperator
ruleCharSequence_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCharSequence_FunctionalOperatorAccess().getLength_FunctionalOperatorParserRuleCall_0());
		}
		this_length_FunctionalOperator_0=rulelength_FunctionalOperator
		{
			$current = $this_length_FunctionalOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCharSequence_FunctionalOperatorAccess().getObject_CharSequence_equals_FunctionalOperatorParserRuleCall_1());
		}
		this_Object_CharSequence_equals_FunctionalOperator_1=ruleObject_CharSequence_equals_FunctionalOperator
		{
			$current = $this_Object_CharSequence_equals_FunctionalOperator_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCharSequence_FunctionalOperatorAccess().getObject_CharSequence_toString_FunctionalOperatorParserRuleCall_2());
		}
		this_Object_CharSequence_toString_FunctionalOperator_2=ruleObject_CharSequence_toString_FunctionalOperator
		{
			$current = $this_Object_CharSequence_toString_FunctionalOperator_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCharSequence_FunctionalOperatorAccess().getObject_CharSequence_hashCode_FunctionalOperatorParserRuleCall_3());
		}
		this_Object_CharSequence_hashCode_FunctionalOperator_3=ruleObject_CharSequence_hashCode_FunctionalOperator
		{
			$current = $this_Object_CharSequence_hashCode_FunctionalOperator_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleObject_FunctionalOperator
entryRuleObject_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObject_FunctionalOperatorRule()); }
	iv_ruleObject_FunctionalOperator=ruleObject_FunctionalOperator
	{ $current=$iv_ruleObject_FunctionalOperator.current; }
	EOF;

// Rule Object_FunctionalOperator
ruleObject_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getObject_FunctionalOperatorAccess().getEquals_FunctionalOperatorParserRuleCall_0());
		}
		this_equals_FunctionalOperator_0=ruleequals_FunctionalOperator
		{
			$current = $this_equals_FunctionalOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getObject_FunctionalOperatorAccess().getToString_FunctionalOperatorParserRuleCall_1());
		}
		this_toString_FunctionalOperator_1=ruletoString_FunctionalOperator
		{
			$current = $this_toString_FunctionalOperator_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getObject_FunctionalOperatorAccess().getHashCode_FunctionalOperatorParserRuleCall_2());
		}
		this_hashCode_FunctionalOperator_2=rulehashCode_FunctionalOperator
		{
			$current = $this_hashCode_FunctionalOperator_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleString_FunctionalOperator
entryRuleString_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getString_FunctionalOperatorRule()); }
	iv_ruleString_FunctionalOperator=ruleString_FunctionalOperator
	{ $current=$iv_ruleString_FunctionalOperator.current; }
	EOF;

// Rule String_FunctionalOperator
ruleString_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getCharAt_FunctionalOperatorParserRuleCall_0());
		}
		this_charAt_FunctionalOperator_0=rulecharAt_FunctionalOperator
		{
			$current = $this_charAt_FunctionalOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getCodePointAt_FunctionalOperatorParserRuleCall_1());
		}
		this_codePointAt_FunctionalOperator_1=rulecodePointAt_FunctionalOperator
		{
			$current = $this_codePointAt_FunctionalOperator_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getCodePointBefore_FunctionalOperatorParserRuleCall_2());
		}
		this_codePointBefore_FunctionalOperator_2=rulecodePointBefore_FunctionalOperator
		{
			$current = $this_codePointBefore_FunctionalOperator_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getCompareToString_FunctionalOperatorParserRuleCall_3());
		}
		this_compareToString_FunctionalOperator_3=rulecompareToString_FunctionalOperator
		{
			$current = $this_compareToString_FunctionalOperator_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getCompareToStringIgnoreCase_FunctionalOperatorParserRuleCall_4());
		}
		this_compareToStringIgnoreCase_FunctionalOperator_4=rulecompareToStringIgnoreCase_FunctionalOperator
		{
			$current = $this_compareToStringIgnoreCase_FunctionalOperator_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getContains_FunctionalOperatorParserRuleCall_5());
		}
		this_contains_FunctionalOperator_5=rulecontains_FunctionalOperator
		{
			$current = $this_contains_FunctionalOperator_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getSubstring_FunctionalOperatorParserRuleCall_6());
		}
		this_substring_FunctionalOperator_6=rulesubstring_FunctionalOperator
		{
			$current = $this_substring_FunctionalOperator_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getConcat_FunctionalOperatorParserRuleCall_7());
		}
		this_concat_FunctionalOperator_7=ruleconcat_FunctionalOperator
		{
			$current = $this_concat_FunctionalOperator_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getEndsWith_FunctionalOperatorParserRuleCall_8());
		}
		this_endsWith_FunctionalOperator_8=ruleendsWith_FunctionalOperator
		{
			$current = $this_endsWith_FunctionalOperator_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getEqualsIgnoreCase_FunctionalOperatorParserRuleCall_9());
		}
		this_equalsIgnoreCase_FunctionalOperator_9=ruleequalsIgnoreCase_FunctionalOperator
		{
			$current = $this_equalsIgnoreCase_FunctionalOperator_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getIndexOfString_FunctionalOperatorParserRuleCall_10());
		}
		this_indexOfString_FunctionalOperator_10=ruleindexOfString_FunctionalOperator
		{
			$current = $this_indexOfString_FunctionalOperator_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getIndexOfChar_FunctionalOperatorParserRuleCall_11());
		}
		this_indexOfChar_FunctionalOperator_11=ruleindexOfChar_FunctionalOperator
		{
			$current = $this_indexOfChar_FunctionalOperator_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getIndexOfCharFromIndex_FunctionalOperatorParserRuleCall_12());
		}
		this_indexOfCharFromIndex_FunctionalOperator_12=ruleindexOfCharFromIndex_FunctionalOperator
		{
			$current = $this_indexOfCharFromIndex_FunctionalOperator_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getIsEmpty_FunctionalOperatorParserRuleCall_13());
		}
		this_isEmpty_FunctionalOperator_13=ruleisEmpty_FunctionalOperator
		{
			$current = $this_isEmpty_FunctionalOperator_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getOffsetByCodePoints_FunctionalOperatorParserRuleCall_14());
		}
		this_offsetByCodePoints_FunctionalOperator_14=ruleoffsetByCodePoints_FunctionalOperator
		{
			$current = $this_offsetByCodePoints_FunctionalOperator_14.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getStartsWith_FunctionalOperatorParserRuleCall_15());
		}
		this_startsWith_FunctionalOperator_15=rulestartsWith_FunctionalOperator
		{
			$current = $this_startsWith_FunctionalOperator_15.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getStartsWithOffset_FunctionalOperatorParserRuleCall_16());
		}
		this_startsWithOffset_FunctionalOperator_16=rulestartsWithOffset_FunctionalOperator
		{
			$current = $this_startsWithOffset_FunctionalOperator_16.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getToLowerCase_FunctionalOperatorParserRuleCall_17());
		}
		this_toLowerCase_FunctionalOperator_17=ruletoLowerCase_FunctionalOperator
		{
			$current = $this_toLowerCase_FunctionalOperator_17.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getToUpperCase_FunctionalOperatorParserRuleCall_18());
		}
		this_toUpperCase_FunctionalOperator_18=ruletoUpperCase_FunctionalOperator
		{
			$current = $this_toUpperCase_FunctionalOperator_18.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getTrim_FunctionalOperatorParserRuleCall_19());
		}
		this_trim_FunctionalOperator_19=ruletrim_FunctionalOperator
		{
			$current = $this_trim_FunctionalOperator_19.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getCharSequence_String_length_FunctionalOperatorParserRuleCall_20());
		}
		this_CharSequence_String_length_FunctionalOperator_20=ruleCharSequence_String_length_FunctionalOperator
		{
			$current = $this_CharSequence_String_length_FunctionalOperator_20.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getCharSequence_String_Object_CharSequence_equals_FunctionalOperatorParserRuleCall_21());
		}
		this_CharSequence_String_Object_CharSequence_equals_FunctionalOperator_21=ruleCharSequence_String_Object_CharSequence_equals_FunctionalOperator
		{
			$current = $this_CharSequence_String_Object_CharSequence_equals_FunctionalOperator_21.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getCharSequence_String_Object_CharSequence_toString_FunctionalOperatorParserRuleCall_22());
		}
		this_CharSequence_String_Object_CharSequence_toString_FunctionalOperator_22=ruleCharSequence_String_Object_CharSequence_toString_FunctionalOperator
		{
			$current = $this_CharSequence_String_Object_CharSequence_toString_FunctionalOperator_22.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_FunctionalOperatorAccess().getCharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorParserRuleCall_23());
		}
		this_CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator_23=ruleCharSequence_String_Object_CharSequence_hashCode_FunctionalOperator
		{
			$current = $this_CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator_23.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBoolean_FunctionalOperator
entryRuleBoolean_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolean_FunctionalOperatorRule()); }
	iv_ruleBoolean_FunctionalOperator=ruleBoolean_FunctionalOperator
	{ $current=$iv_ruleBoolean_FunctionalOperator.current; }
	EOF;

// Rule Boolean_FunctionalOperator
ruleBoolean_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBoolean_FunctionalOperatorAccess().getParseBoolean_FunctionalOperatorParserRuleCall_0());
		}
		this_parseBoolean_FunctionalOperator_0=ruleparseBoolean_FunctionalOperator
		{
			$current = $this_parseBoolean_FunctionalOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBoolean_FunctionalOperatorAccess().getCompareToBoolean_FunctionalOperatorParserRuleCall_1());
		}
		this_compareToBoolean_FunctionalOperator_1=rulecompareToBoolean_FunctionalOperator
		{
			$current = $this_compareToBoolean_FunctionalOperator_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBoolean_FunctionalOperatorAccess().getObject_Boolean_equals_FunctionalOperatorParserRuleCall_2());
		}
		this_Object_Boolean_equals_FunctionalOperator_2=ruleObject_Boolean_equals_FunctionalOperator
		{
			$current = $this_Object_Boolean_equals_FunctionalOperator_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBoolean_FunctionalOperatorAccess().getObject_Boolean_toString_FunctionalOperatorParserRuleCall_3());
		}
		this_Object_Boolean_toString_FunctionalOperator_3=ruleObject_Boolean_toString_FunctionalOperator
		{
			$current = $this_Object_Boolean_toString_FunctionalOperator_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBoolean_FunctionalOperatorAccess().getObject_Boolean_hashCode_FunctionalOperatorParserRuleCall_4());
		}
		this_Object_Boolean_hashCode_FunctionalOperator_4=ruleObject_Boolean_hashCode_FunctionalOperator
		{
			$current = $this_Object_Boolean_hashCode_FunctionalOperator_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDouble_FunctionalOperator
entryRuleDouble_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDouble_FunctionalOperatorRule()); }
	iv_ruleDouble_FunctionalOperator=ruleDouble_FunctionalOperator
	{ $current=$iv_ruleDouble_FunctionalOperator.current; }
	EOF;

// Rule Double_FunctionalOperator
ruleDouble_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDouble_FunctionalOperatorAccess().getNumber_Double_greaterThan_FunctionalOperatorParserRuleCall_0());
		}
		this_Number_Double_greaterThan_FunctionalOperator_0=ruleNumber_Double_greaterThan_FunctionalOperator
		{
			$current = $this_Number_Double_greaterThan_FunctionalOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDouble_FunctionalOperatorAccess().getNumber_Double_greaterEquals_FunctionalOperatorParserRuleCall_1());
		}
		this_Number_Double_greaterEquals_FunctionalOperator_1=ruleNumber_Double_greaterEquals_FunctionalOperator
		{
			$current = $this_Number_Double_greaterEquals_FunctionalOperator_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDouble_FunctionalOperatorAccess().getNumber_Double_smallerThan_FunctionalOperatorParserRuleCall_2());
		}
		this_Number_Double_smallerThan_FunctionalOperator_2=ruleNumber_Double_smallerThan_FunctionalOperator
		{
			$current = $this_Number_Double_smallerThan_FunctionalOperator_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDouble_FunctionalOperatorAccess().getNumber_Double_smallerEquals_FunctionalOperatorParserRuleCall_3());
		}
		this_Number_Double_smallerEquals_FunctionalOperator_3=ruleNumber_Double_smallerEquals_FunctionalOperator
		{
			$current = $this_Number_Double_smallerEquals_FunctionalOperator_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDouble_FunctionalOperatorAccess().getNumber_Double_Object_Number_equals_FunctionalOperatorParserRuleCall_4());
		}
		this_Number_Double_Object_Number_equals_FunctionalOperator_4=ruleNumber_Double_Object_Number_equals_FunctionalOperator
		{
			$current = $this_Number_Double_Object_Number_equals_FunctionalOperator_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDouble_FunctionalOperatorAccess().getNumber_Double_Object_Number_toString_FunctionalOperatorParserRuleCall_5());
		}
		this_Number_Double_Object_Number_toString_FunctionalOperator_5=ruleNumber_Double_Object_Number_toString_FunctionalOperator
		{
			$current = $this_Number_Double_Object_Number_toString_FunctionalOperator_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDouble_FunctionalOperatorAccess().getNumber_Double_Object_Number_hashCode_FunctionalOperatorParserRuleCall_6());
		}
		this_Number_Double_Object_Number_hashCode_FunctionalOperator_6=ruleNumber_Double_Object_Number_hashCode_FunctionalOperator
		{
			$current = $this_Number_Double_Object_Number_hashCode_FunctionalOperator_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuledoubleValue_FunctionalOperator
entryRuledoubleValue_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDoubleValue_FunctionalOperatorRule()); }
	iv_ruledoubleValue_FunctionalOperator=ruledoubleValue_FunctionalOperator
	{ $current=$iv_ruledoubleValue_FunctionalOperator.current; }
	EOF;

// Rule doubleValue_FunctionalOperator
ruledoubleValue_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDoubleValue_FunctionalOperatorAccess().getDoubleValue_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.doubleValue'
		{
			newLeafNode(otherlv_1, grammarAccess.getDoubleValue_FunctionalOperatorAccess().getDoubleValueKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getDoubleValue_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDoubleValue_FunctionalOperatorAccess().getOperatorDouble_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleDouble_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDoubleValue_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.Double_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleNumber_Integer_greaterThan_FunctionalOperator
entryRuleNumber_Integer_greaterThan_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_Integer_greaterThan_FunctionalOperatorRule()); }
	iv_ruleNumber_Integer_greaterThan_FunctionalOperator=ruleNumber_Integer_greaterThan_FunctionalOperator
	{ $current=$iv_ruleNumber_Integer_greaterThan_FunctionalOperator.current; }
	EOF;

// Rule Number_Integer_greaterThan_FunctionalOperator
ruleNumber_Integer_greaterThan_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumber_Integer_greaterThan_FunctionalOperatorAccess().getNumber_Integer_greaterThan_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.greaterThan'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumber_Integer_greaterThan_FunctionalOperatorAccess().getGreaterThanKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getNumber_Integer_greaterThan_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumber_Integer_greaterThan_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getNumber_Integer_greaterThan_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Integer_greaterThan_FunctionalOperatorAccess().getINumber_FunctionalParameterParserRuleCall_4_0());
				}
				lv_i_4_0=ruleNumber_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Integer_greaterThan_FunctionalOperatorRule());
					}
					set(
						$current,
						"i",
						lv_i_4_0,
						"org.xtext.MQL.Number_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getNumber_Integer_greaterThan_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Integer_greaterThan_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Integer_greaterThan_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleNumber_Integer_greaterEquals_FunctionalOperator
entryRuleNumber_Integer_greaterEquals_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_Integer_greaterEquals_FunctionalOperatorRule()); }
	iv_ruleNumber_Integer_greaterEquals_FunctionalOperator=ruleNumber_Integer_greaterEquals_FunctionalOperator
	{ $current=$iv_ruleNumber_Integer_greaterEquals_FunctionalOperator.current; }
	EOF;

// Rule Number_Integer_greaterEquals_FunctionalOperator
ruleNumber_Integer_greaterEquals_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumber_Integer_greaterEquals_FunctionalOperatorAccess().getNumber_Integer_greaterEquals_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.greaterEquals'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumber_Integer_greaterEquals_FunctionalOperatorAccess().getGreaterEqualsKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getNumber_Integer_greaterEquals_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumber_Integer_greaterEquals_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getNumber_Integer_greaterEquals_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Integer_greaterEquals_FunctionalOperatorAccess().getINumber_FunctionalParameterParserRuleCall_4_0());
				}
				lv_i_4_0=ruleNumber_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Integer_greaterEquals_FunctionalOperatorRule());
					}
					set(
						$current,
						"i",
						lv_i_4_0,
						"org.xtext.MQL.Number_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getNumber_Integer_greaterEquals_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Integer_greaterEquals_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Integer_greaterEquals_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleNumber_Integer_smallerThan_FunctionalOperator
entryRuleNumber_Integer_smallerThan_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_Integer_smallerThan_FunctionalOperatorRule()); }
	iv_ruleNumber_Integer_smallerThan_FunctionalOperator=ruleNumber_Integer_smallerThan_FunctionalOperator
	{ $current=$iv_ruleNumber_Integer_smallerThan_FunctionalOperator.current; }
	EOF;

// Rule Number_Integer_smallerThan_FunctionalOperator
ruleNumber_Integer_smallerThan_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumber_Integer_smallerThan_FunctionalOperatorAccess().getNumber_Integer_smallerThan_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.smallerThan'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumber_Integer_smallerThan_FunctionalOperatorAccess().getSmallerThanKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getNumber_Integer_smallerThan_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumber_Integer_smallerThan_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getNumber_Integer_smallerThan_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Integer_smallerThan_FunctionalOperatorAccess().getINumber_FunctionalParameterParserRuleCall_4_0());
				}
				lv_i_4_0=ruleNumber_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Integer_smallerThan_FunctionalOperatorRule());
					}
					set(
						$current,
						"i",
						lv_i_4_0,
						"org.xtext.MQL.Number_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getNumber_Integer_smallerThan_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Integer_smallerThan_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Integer_smallerThan_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleNumber_Integer_smallerEquals_FunctionalOperator
entryRuleNumber_Integer_smallerEquals_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_Integer_smallerEquals_FunctionalOperatorRule()); }
	iv_ruleNumber_Integer_smallerEquals_FunctionalOperator=ruleNumber_Integer_smallerEquals_FunctionalOperator
	{ $current=$iv_ruleNumber_Integer_smallerEquals_FunctionalOperator.current; }
	EOF;

// Rule Number_Integer_smallerEquals_FunctionalOperator
ruleNumber_Integer_smallerEquals_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumber_Integer_smallerEquals_FunctionalOperatorAccess().getNumber_Integer_smallerEquals_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.smallerEquals'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumber_Integer_smallerEquals_FunctionalOperatorAccess().getSmallerEqualsKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getNumber_Integer_smallerEquals_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumber_Integer_smallerEquals_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getNumber_Integer_smallerEquals_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Integer_smallerEquals_FunctionalOperatorAccess().getINumber_FunctionalParameterParserRuleCall_4_0());
				}
				lv_i_4_0=ruleNumber_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Integer_smallerEquals_FunctionalOperatorRule());
					}
					set(
						$current,
						"i",
						lv_i_4_0,
						"org.xtext.MQL.Number_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getNumber_Integer_smallerEquals_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Integer_smallerEquals_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Integer_smallerEquals_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleNumber_Integer_Object_Number_equals_FunctionalOperator
entryRuleNumber_Integer_Object_Number_equals_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_Integer_Object_Number_equals_FunctionalOperatorRule()); }
	iv_ruleNumber_Integer_Object_Number_equals_FunctionalOperator=ruleNumber_Integer_Object_Number_equals_FunctionalOperator
	{ $current=$iv_ruleNumber_Integer_Object_Number_equals_FunctionalOperator.current; }
	EOF;

// Rule Number_Integer_Object_Number_equals_FunctionalOperator
ruleNumber_Integer_Object_Number_equals_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumber_Integer_Object_Number_equals_FunctionalOperatorAccess().getNumber_Integer_Object_Number_equals_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.equals'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumber_Integer_Object_Number_equals_FunctionalOperatorAccess().getEqualsKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getNumber_Integer_Object_Number_equals_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumber_Integer_Object_Number_equals_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getNumber_Integer_Object_Number_equals_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Integer_Object_Number_equals_FunctionalOperatorAccess().getObjObject_FunctionalParameterParserRuleCall_4_0());
				}
				lv_obj_4_0=ruleObject_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Integer_Object_Number_equals_FunctionalOperatorRule());
					}
					set(
						$current,
						"obj",
						lv_obj_4_0,
						"org.xtext.MQL.Object_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getNumber_Integer_Object_Number_equals_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Integer_Object_Number_equals_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Integer_Object_Number_equals_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleNumber_Integer_Object_Number_toString_FunctionalOperator
entryRuleNumber_Integer_Object_Number_toString_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_Integer_Object_Number_toString_FunctionalOperatorRule()); }
	iv_ruleNumber_Integer_Object_Number_toString_FunctionalOperator=ruleNumber_Integer_Object_Number_toString_FunctionalOperator
	{ $current=$iv_ruleNumber_Integer_Object_Number_toString_FunctionalOperator.current; }
	EOF;

// Rule Number_Integer_Object_Number_toString_FunctionalOperator
ruleNumber_Integer_Object_Number_toString_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumber_Integer_Object_Number_toString_FunctionalOperatorAccess().getNumber_Integer_Object_Number_toString_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.toString'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumber_Integer_Object_Number_toString_FunctionalOperatorAccess().getToStringKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getNumber_Integer_Object_Number_toString_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Integer_Object_Number_toString_FunctionalOperatorAccess().getOperatorString_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleString_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Integer_Object_Number_toString_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.String_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleNumber_Integer_Object_Number_hashCode_FunctionalOperator
entryRuleNumber_Integer_Object_Number_hashCode_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_Integer_Object_Number_hashCode_FunctionalOperatorRule()); }
	iv_ruleNumber_Integer_Object_Number_hashCode_FunctionalOperator=ruleNumber_Integer_Object_Number_hashCode_FunctionalOperator
	{ $current=$iv_ruleNumber_Integer_Object_Number_hashCode_FunctionalOperator.current; }
	EOF;

// Rule Number_Integer_Object_Number_hashCode_FunctionalOperator
ruleNumber_Integer_Object_Number_hashCode_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumber_Integer_Object_Number_hashCode_FunctionalOperatorAccess().getNumber_Integer_Object_Number_hashCode_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.hashCode'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumber_Integer_Object_Number_hashCode_FunctionalOperatorAccess().getHashCodeKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getNumber_Integer_Object_Number_hashCode_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Integer_Object_Number_hashCode_FunctionalOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Integer_Object_Number_hashCode_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulegreaterThan_FunctionalOperator
entryRulegreaterThan_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGreaterThan_FunctionalOperatorRule()); }
	iv_rulegreaterThan_FunctionalOperator=rulegreaterThan_FunctionalOperator
	{ $current=$iv_rulegreaterThan_FunctionalOperator.current; }
	EOF;

// Rule greaterThan_FunctionalOperator
rulegreaterThan_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGreaterThan_FunctionalOperatorAccess().getGreaterThan_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.greaterThan'
		{
			newLeafNode(otherlv_1, grammarAccess.getGreaterThan_FunctionalOperatorAccess().getGreaterThanKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getGreaterThan_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGreaterThan_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getGreaterThan_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGreaterThan_FunctionalOperatorAccess().getINumber_FunctionalParameterParserRuleCall_4_0());
				}
				lv_i_4_0=ruleNumber_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGreaterThan_FunctionalOperatorRule());
					}
					set(
						$current,
						"i",
						lv_i_4_0,
						"org.xtext.MQL.Number_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getGreaterThan_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGreaterThan_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGreaterThan_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulegreaterEquals_FunctionalOperator
entryRulegreaterEquals_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGreaterEquals_FunctionalOperatorRule()); }
	iv_rulegreaterEquals_FunctionalOperator=rulegreaterEquals_FunctionalOperator
	{ $current=$iv_rulegreaterEquals_FunctionalOperator.current; }
	EOF;

// Rule greaterEquals_FunctionalOperator
rulegreaterEquals_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGreaterEquals_FunctionalOperatorAccess().getGreaterEquals_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.greaterEquals'
		{
			newLeafNode(otherlv_1, grammarAccess.getGreaterEquals_FunctionalOperatorAccess().getGreaterEqualsKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getGreaterEquals_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGreaterEquals_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getGreaterEquals_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGreaterEquals_FunctionalOperatorAccess().getINumber_FunctionalParameterParserRuleCall_4_0());
				}
				lv_i_4_0=ruleNumber_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGreaterEquals_FunctionalOperatorRule());
					}
					set(
						$current,
						"i",
						lv_i_4_0,
						"org.xtext.MQL.Number_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getGreaterEquals_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGreaterEquals_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGreaterEquals_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulesmallerThan_FunctionalOperator
entryRulesmallerThan_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSmallerThan_FunctionalOperatorRule()); }
	iv_rulesmallerThan_FunctionalOperator=rulesmallerThan_FunctionalOperator
	{ $current=$iv_rulesmallerThan_FunctionalOperator.current; }
	EOF;

// Rule smallerThan_FunctionalOperator
rulesmallerThan_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSmallerThan_FunctionalOperatorAccess().getSmallerThan_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.smallerThan'
		{
			newLeafNode(otherlv_1, grammarAccess.getSmallerThan_FunctionalOperatorAccess().getSmallerThanKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getSmallerThan_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSmallerThan_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getSmallerThan_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSmallerThan_FunctionalOperatorAccess().getINumber_FunctionalParameterParserRuleCall_4_0());
				}
				lv_i_4_0=ruleNumber_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSmallerThan_FunctionalOperatorRule());
					}
					set(
						$current,
						"i",
						lv_i_4_0,
						"org.xtext.MQL.Number_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getSmallerThan_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSmallerThan_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSmallerThan_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulesmallerEquals_FunctionalOperator
entryRulesmallerEquals_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSmallerEquals_FunctionalOperatorRule()); }
	iv_rulesmallerEquals_FunctionalOperator=rulesmallerEquals_FunctionalOperator
	{ $current=$iv_rulesmallerEquals_FunctionalOperator.current; }
	EOF;

// Rule smallerEquals_FunctionalOperator
rulesmallerEquals_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSmallerEquals_FunctionalOperatorAccess().getSmallerEquals_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.smallerEquals'
		{
			newLeafNode(otherlv_1, grammarAccess.getSmallerEquals_FunctionalOperatorAccess().getSmallerEqualsKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getSmallerEquals_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSmallerEquals_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getSmallerEquals_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSmallerEquals_FunctionalOperatorAccess().getINumber_FunctionalParameterParserRuleCall_4_0());
				}
				lv_i_4_0=ruleNumber_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSmallerEquals_FunctionalOperatorRule());
					}
					set(
						$current,
						"i",
						lv_i_4_0,
						"org.xtext.MQL.Number_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getSmallerEquals_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSmallerEquals_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSmallerEquals_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleObject_Number_equals_FunctionalOperator
entryRuleObject_Number_equals_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObject_Number_equals_FunctionalOperatorRule()); }
	iv_ruleObject_Number_equals_FunctionalOperator=ruleObject_Number_equals_FunctionalOperator
	{ $current=$iv_ruleObject_Number_equals_FunctionalOperator.current; }
	EOF;

// Rule Object_Number_equals_FunctionalOperator
ruleObject_Number_equals_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObject_Number_equals_FunctionalOperatorAccess().getObject_Number_equals_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.equals'
		{
			newLeafNode(otherlv_1, grammarAccess.getObject_Number_equals_FunctionalOperatorAccess().getEqualsKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getObject_Number_equals_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObject_Number_equals_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getObject_Number_equals_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObject_Number_equals_FunctionalOperatorAccess().getObjObject_FunctionalParameterParserRuleCall_4_0());
				}
				lv_obj_4_0=ruleObject_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObject_Number_equals_FunctionalOperatorRule());
					}
					set(
						$current,
						"obj",
						lv_obj_4_0,
						"org.xtext.MQL.Object_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getObject_Number_equals_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObject_Number_equals_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObject_Number_equals_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleObject_Number_toString_FunctionalOperator
entryRuleObject_Number_toString_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObject_Number_toString_FunctionalOperatorRule()); }
	iv_ruleObject_Number_toString_FunctionalOperator=ruleObject_Number_toString_FunctionalOperator
	{ $current=$iv_ruleObject_Number_toString_FunctionalOperator.current; }
	EOF;

// Rule Object_Number_toString_FunctionalOperator
ruleObject_Number_toString_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObject_Number_toString_FunctionalOperatorAccess().getObject_Number_toString_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.toString'
		{
			newLeafNode(otherlv_1, grammarAccess.getObject_Number_toString_FunctionalOperatorAccess().getToStringKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getObject_Number_toString_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObject_Number_toString_FunctionalOperatorAccess().getOperatorString_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleString_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObject_Number_toString_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.String_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleObject_Number_hashCode_FunctionalOperator
entryRuleObject_Number_hashCode_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObject_Number_hashCode_FunctionalOperatorRule()); }
	iv_ruleObject_Number_hashCode_FunctionalOperator=ruleObject_Number_hashCode_FunctionalOperator
	{ $current=$iv_ruleObject_Number_hashCode_FunctionalOperator.current; }
	EOF;

// Rule Object_Number_hashCode_FunctionalOperator
ruleObject_Number_hashCode_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObject_Number_hashCode_FunctionalOperatorAccess().getObject_Number_hashCode_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.hashCode'
		{
			newLeafNode(otherlv_1, grammarAccess.getObject_Number_hashCode_FunctionalOperatorAccess().getHashCodeKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getObject_Number_hashCode_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObject_Number_hashCode_FunctionalOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObject_Number_hashCode_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleObject_Character_equals_FunctionalOperator
entryRuleObject_Character_equals_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObject_Character_equals_FunctionalOperatorRule()); }
	iv_ruleObject_Character_equals_FunctionalOperator=ruleObject_Character_equals_FunctionalOperator
	{ $current=$iv_ruleObject_Character_equals_FunctionalOperator.current; }
	EOF;

// Rule Object_Character_equals_FunctionalOperator
ruleObject_Character_equals_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObject_Character_equals_FunctionalOperatorAccess().getObject_Character_equals_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.equals'
		{
			newLeafNode(otherlv_1, grammarAccess.getObject_Character_equals_FunctionalOperatorAccess().getEqualsKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getObject_Character_equals_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObject_Character_equals_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getObject_Character_equals_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObject_Character_equals_FunctionalOperatorAccess().getObjObject_FunctionalParameterParserRuleCall_4_0());
				}
				lv_obj_4_0=ruleObject_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObject_Character_equals_FunctionalOperatorRule());
					}
					set(
						$current,
						"obj",
						lv_obj_4_0,
						"org.xtext.MQL.Object_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getObject_Character_equals_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObject_Character_equals_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObject_Character_equals_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleObject_Character_toString_FunctionalOperator
entryRuleObject_Character_toString_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObject_Character_toString_FunctionalOperatorRule()); }
	iv_ruleObject_Character_toString_FunctionalOperator=ruleObject_Character_toString_FunctionalOperator
	{ $current=$iv_ruleObject_Character_toString_FunctionalOperator.current; }
	EOF;

// Rule Object_Character_toString_FunctionalOperator
ruleObject_Character_toString_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObject_Character_toString_FunctionalOperatorAccess().getObject_Character_toString_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.toString'
		{
			newLeafNode(otherlv_1, grammarAccess.getObject_Character_toString_FunctionalOperatorAccess().getToStringKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getObject_Character_toString_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObject_Character_toString_FunctionalOperatorAccess().getOperatorString_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleString_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObject_Character_toString_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.String_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleObject_Character_hashCode_FunctionalOperator
entryRuleObject_Character_hashCode_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObject_Character_hashCode_FunctionalOperatorRule()); }
	iv_ruleObject_Character_hashCode_FunctionalOperator=ruleObject_Character_hashCode_FunctionalOperator
	{ $current=$iv_ruleObject_Character_hashCode_FunctionalOperator.current; }
	EOF;

// Rule Object_Character_hashCode_FunctionalOperator
ruleObject_Character_hashCode_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObject_Character_hashCode_FunctionalOperatorAccess().getObject_Character_hashCode_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.hashCode'
		{
			newLeafNode(otherlv_1, grammarAccess.getObject_Character_hashCode_FunctionalOperatorAccess().getHashCodeKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getObject_Character_hashCode_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObject_Character_hashCode_FunctionalOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObject_Character_hashCode_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulelength_FunctionalOperator
entryRulelength_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLength_FunctionalOperatorRule()); }
	iv_rulelength_FunctionalOperator=rulelength_FunctionalOperator
	{ $current=$iv_rulelength_FunctionalOperator.current; }
	EOF;

// Rule length_FunctionalOperator
rulelength_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLength_FunctionalOperatorAccess().getLength_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.length'
		{
			newLeafNode(otherlv_1, grammarAccess.getLength_FunctionalOperatorAccess().getLengthKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getLength_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLength_FunctionalOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLength_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleObject_CharSequence_equals_FunctionalOperator
entryRuleObject_CharSequence_equals_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObject_CharSequence_equals_FunctionalOperatorRule()); }
	iv_ruleObject_CharSequence_equals_FunctionalOperator=ruleObject_CharSequence_equals_FunctionalOperator
	{ $current=$iv_ruleObject_CharSequence_equals_FunctionalOperator.current; }
	EOF;

// Rule Object_CharSequence_equals_FunctionalOperator
ruleObject_CharSequence_equals_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObject_CharSequence_equals_FunctionalOperatorAccess().getObject_CharSequence_equals_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.equals'
		{
			newLeafNode(otherlv_1, grammarAccess.getObject_CharSequence_equals_FunctionalOperatorAccess().getEqualsKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getObject_CharSequence_equals_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObject_CharSequence_equals_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getObject_CharSequence_equals_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObject_CharSequence_equals_FunctionalOperatorAccess().getObjObject_FunctionalParameterParserRuleCall_4_0());
				}
				lv_obj_4_0=ruleObject_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObject_CharSequence_equals_FunctionalOperatorRule());
					}
					set(
						$current,
						"obj",
						lv_obj_4_0,
						"org.xtext.MQL.Object_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getObject_CharSequence_equals_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObject_CharSequence_equals_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObject_CharSequence_equals_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleObject_CharSequence_toString_FunctionalOperator
entryRuleObject_CharSequence_toString_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObject_CharSequence_toString_FunctionalOperatorRule()); }
	iv_ruleObject_CharSequence_toString_FunctionalOperator=ruleObject_CharSequence_toString_FunctionalOperator
	{ $current=$iv_ruleObject_CharSequence_toString_FunctionalOperator.current; }
	EOF;

// Rule Object_CharSequence_toString_FunctionalOperator
ruleObject_CharSequence_toString_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObject_CharSequence_toString_FunctionalOperatorAccess().getObject_CharSequence_toString_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.toString'
		{
			newLeafNode(otherlv_1, grammarAccess.getObject_CharSequence_toString_FunctionalOperatorAccess().getToStringKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getObject_CharSequence_toString_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObject_CharSequence_toString_FunctionalOperatorAccess().getOperatorString_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleString_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObject_CharSequence_toString_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.String_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleObject_CharSequence_hashCode_FunctionalOperator
entryRuleObject_CharSequence_hashCode_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObject_CharSequence_hashCode_FunctionalOperatorRule()); }
	iv_ruleObject_CharSequence_hashCode_FunctionalOperator=ruleObject_CharSequence_hashCode_FunctionalOperator
	{ $current=$iv_ruleObject_CharSequence_hashCode_FunctionalOperator.current; }
	EOF;

// Rule Object_CharSequence_hashCode_FunctionalOperator
ruleObject_CharSequence_hashCode_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObject_CharSequence_hashCode_FunctionalOperatorAccess().getObject_CharSequence_hashCode_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.hashCode'
		{
			newLeafNode(otherlv_1, grammarAccess.getObject_CharSequence_hashCode_FunctionalOperatorAccess().getHashCodeKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getObject_CharSequence_hashCode_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObject_CharSequence_hashCode_FunctionalOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObject_CharSequence_hashCode_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleequals_FunctionalOperator
entryRuleequals_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEquals_FunctionalOperatorRule()); }
	iv_ruleequals_FunctionalOperator=ruleequals_FunctionalOperator
	{ $current=$iv_ruleequals_FunctionalOperator.current; }
	EOF;

// Rule equals_FunctionalOperator
ruleequals_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEquals_FunctionalOperatorAccess().getEquals_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.equals'
		{
			newLeafNode(otherlv_1, grammarAccess.getEquals_FunctionalOperatorAccess().getEqualsKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getEquals_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEquals_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getEquals_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEquals_FunctionalOperatorAccess().getObjObject_FunctionalParameterParserRuleCall_4_0());
				}
				lv_obj_4_0=ruleObject_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEquals_FunctionalOperatorRule());
					}
					set(
						$current,
						"obj",
						lv_obj_4_0,
						"org.xtext.MQL.Object_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getEquals_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEquals_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEquals_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuletoString_FunctionalOperator
entryRuletoString_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getToString_FunctionalOperatorRule()); }
	iv_ruletoString_FunctionalOperator=ruletoString_FunctionalOperator
	{ $current=$iv_ruletoString_FunctionalOperator.current; }
	EOF;

// Rule toString_FunctionalOperator
ruletoString_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getToString_FunctionalOperatorAccess().getToString_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.toString'
		{
			newLeafNode(otherlv_1, grammarAccess.getToString_FunctionalOperatorAccess().getToStringKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getToString_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getToString_FunctionalOperatorAccess().getOperatorString_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleString_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getToString_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.String_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulehashCode_FunctionalOperator
entryRulehashCode_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHashCode_FunctionalOperatorRule()); }
	iv_rulehashCode_FunctionalOperator=rulehashCode_FunctionalOperator
	{ $current=$iv_rulehashCode_FunctionalOperator.current; }
	EOF;

// Rule hashCode_FunctionalOperator
rulehashCode_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getHashCode_FunctionalOperatorAccess().getHashCode_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.hashCode'
		{
			newLeafNode(otherlv_1, grammarAccess.getHashCode_FunctionalOperatorAccess().getHashCodeKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getHashCode_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHashCode_FunctionalOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHashCode_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulecharAt_FunctionalOperator
entryRulecharAt_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharAt_FunctionalOperatorRule()); }
	iv_rulecharAt_FunctionalOperator=rulecharAt_FunctionalOperator
	{ $current=$iv_rulecharAt_FunctionalOperator.current; }
	EOF;

// Rule charAt_FunctionalOperator
rulecharAt_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCharAt_FunctionalOperatorAccess().getCharAt_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.charAt'
		{
			newLeafNode(otherlv_1, grammarAccess.getCharAt_FunctionalOperatorAccess().getCharAtKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getCharAt_FunctionalOperatorAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCharAt_FunctionalOperatorAccess().getIInteger_FunctionalParameterParserRuleCall_3_0());
				}
				lv_i_3_0=ruleInteger_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCharAt_FunctionalOperatorRule());
					}
					set(
						$current,
						"i",
						lv_i_3_0,
						"org.xtext.MQL.Integer_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getCharAt_FunctionalOperatorAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCharAt_FunctionalOperatorAccess().getOperatorCharacter_FunctionalOperatorParserRuleCall_5_0());
				}
				lv_operator_5_0=ruleCharacter_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCharAt_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_5_0,
						"org.xtext.MQL.Character_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulecodePointAt_FunctionalOperator
entryRulecodePointAt_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCodePointAt_FunctionalOperatorRule()); }
	iv_rulecodePointAt_FunctionalOperator=rulecodePointAt_FunctionalOperator
	{ $current=$iv_rulecodePointAt_FunctionalOperator.current; }
	EOF;

// Rule codePointAt_FunctionalOperator
rulecodePointAt_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCodePointAt_FunctionalOperatorAccess().getCodePointAt_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.codePointAt'
		{
			newLeafNode(otherlv_1, grammarAccess.getCodePointAt_FunctionalOperatorAccess().getCodePointAtKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getCodePointAt_FunctionalOperatorAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCodePointAt_FunctionalOperatorAccess().getIndexInteger_FunctionalParameterParserRuleCall_3_0());
				}
				lv_index_3_0=ruleInteger_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCodePointAt_FunctionalOperatorRule());
					}
					set(
						$current,
						"index",
						lv_index_3_0,
						"org.xtext.MQL.Integer_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getCodePointAt_FunctionalOperatorAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCodePointAt_FunctionalOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_5_0());
				}
				lv_operator_5_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCodePointAt_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_5_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulecodePointBefore_FunctionalOperator
entryRulecodePointBefore_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCodePointBefore_FunctionalOperatorRule()); }
	iv_rulecodePointBefore_FunctionalOperator=rulecodePointBefore_FunctionalOperator
	{ $current=$iv_rulecodePointBefore_FunctionalOperator.current; }
	EOF;

// Rule codePointBefore_FunctionalOperator
rulecodePointBefore_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCodePointBefore_FunctionalOperatorAccess().getCodePointBefore_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.codePointBefore'
		{
			newLeafNode(otherlv_1, grammarAccess.getCodePointBefore_FunctionalOperatorAccess().getCodePointBeforeKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getCodePointBefore_FunctionalOperatorAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCodePointBefore_FunctionalOperatorAccess().getIndexInteger_FunctionalParameterParserRuleCall_3_0());
				}
				lv_index_3_0=ruleInteger_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCodePointBefore_FunctionalOperatorRule());
					}
					set(
						$current,
						"index",
						lv_index_3_0,
						"org.xtext.MQL.Integer_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getCodePointBefore_FunctionalOperatorAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCodePointBefore_FunctionalOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_5_0());
				}
				lv_operator_5_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCodePointBefore_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_5_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulecompareToString_FunctionalOperator
entryRulecompareToString_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompareToString_FunctionalOperatorRule()); }
	iv_rulecompareToString_FunctionalOperator=rulecompareToString_FunctionalOperator
	{ $current=$iv_rulecompareToString_FunctionalOperator.current; }
	EOF;

// Rule compareToString_FunctionalOperator
rulecompareToString_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCompareToString_FunctionalOperatorAccess().getCompareToString_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.compareToString'
		{
			newLeafNode(otherlv_1, grammarAccess.getCompareToString_FunctionalOperatorAccess().getCompareToStringKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getCompareToString_FunctionalOperatorAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompareToString_FunctionalOperatorAccess().getAnotherStringString_FunctionalParameterParserRuleCall_3_0());
				}
				lv_anotherString_3_0=ruleString_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompareToString_FunctionalOperatorRule());
					}
					set(
						$current,
						"anotherString",
						lv_anotherString_3_0,
						"org.xtext.MQL.String_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getCompareToString_FunctionalOperatorAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompareToString_FunctionalOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_5_0());
				}
				lv_operator_5_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompareToString_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_5_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulecompareToStringIgnoreCase_FunctionalOperator
entryRulecompareToStringIgnoreCase_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompareToStringIgnoreCase_FunctionalOperatorRule()); }
	iv_rulecompareToStringIgnoreCase_FunctionalOperator=rulecompareToStringIgnoreCase_FunctionalOperator
	{ $current=$iv_rulecompareToStringIgnoreCase_FunctionalOperator.current; }
	EOF;

// Rule compareToStringIgnoreCase_FunctionalOperator
rulecompareToStringIgnoreCase_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCompareToStringIgnoreCase_FunctionalOperatorAccess().getCompareToStringIgnoreCase_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.compareToStringIgnoreCase'
		{
			newLeafNode(otherlv_1, grammarAccess.getCompareToStringIgnoreCase_FunctionalOperatorAccess().getCompareToStringIgnoreCaseKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getCompareToStringIgnoreCase_FunctionalOperatorAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompareToStringIgnoreCase_FunctionalOperatorAccess().getStrString_FunctionalParameterParserRuleCall_3_0());
				}
				lv_str_3_0=ruleString_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompareToStringIgnoreCase_FunctionalOperatorRule());
					}
					set(
						$current,
						"str",
						lv_str_3_0,
						"org.xtext.MQL.String_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getCompareToStringIgnoreCase_FunctionalOperatorAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompareToStringIgnoreCase_FunctionalOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_5_0());
				}
				lv_operator_5_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompareToStringIgnoreCase_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_5_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulecontains_FunctionalOperator
entryRulecontains_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContains_FunctionalOperatorRule()); }
	iv_rulecontains_FunctionalOperator=rulecontains_FunctionalOperator
	{ $current=$iv_rulecontains_FunctionalOperator.current; }
	EOF;

// Rule contains_FunctionalOperator
rulecontains_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getContains_FunctionalOperatorAccess().getContains_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.contains'
		{
			newLeafNode(otherlv_1, grammarAccess.getContains_FunctionalOperatorAccess().getContainsKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getContains_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContains_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getContains_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContains_FunctionalOperatorAccess().getCharSequenceCharSequence_FunctionalParameterParserRuleCall_4_0());
				}
				lv_charSequence_4_0=ruleCharSequence_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContains_FunctionalOperatorRule());
					}
					set(
						$current,
						"charSequence",
						lv_charSequence_4_0,
						"org.xtext.MQL.CharSequence_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getContains_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContains_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContains_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulesubstring_FunctionalOperator
entryRulesubstring_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubstring_FunctionalOperatorRule()); }
	iv_rulesubstring_FunctionalOperator=rulesubstring_FunctionalOperator
	{ $current=$iv_rulesubstring_FunctionalOperator.current; }
	EOF;

// Rule substring_FunctionalOperator
rulesubstring_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSubstring_FunctionalOperatorAccess().getSubstring_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.substring'
		{
			newLeafNode(otherlv_1, grammarAccess.getSubstring_FunctionalOperatorAccess().getSubstringKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getSubstring_FunctionalOperatorAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubstring_FunctionalOperatorAccess().getStartIndexInteger_FunctionalParameterParserRuleCall_3_0());
				}
				lv_startIndex_3_0=ruleInteger_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubstring_FunctionalOperatorRule());
					}
					set(
						$current,
						"startIndex",
						lv_startIndex_3_0,
						"org.xtext.MQL.Integer_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getSubstring_FunctionalOperatorAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubstring_FunctionalOperatorAccess().getEndIndexInteger_FunctionalParameterParserRuleCall_5_0());
				}
				lv_endIndex_5_0=ruleInteger_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubstring_FunctionalOperatorRule());
					}
					set(
						$current,
						"endIndex",
						lv_endIndex_5_0,
						"org.xtext.MQL.Integer_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getSubstring_FunctionalOperatorAccess().getRightParenthesisKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubstring_FunctionalOperatorAccess().getOperatorString_FunctionalOperatorParserRuleCall_7_0());
				}
				lv_operator_7_0=ruleString_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubstring_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_7_0,
						"org.xtext.MQL.String_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleconcat_FunctionalOperator
entryRuleconcat_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConcat_FunctionalOperatorRule()); }
	iv_ruleconcat_FunctionalOperator=ruleconcat_FunctionalOperator
	{ $current=$iv_ruleconcat_FunctionalOperator.current; }
	EOF;

// Rule concat_FunctionalOperator
ruleconcat_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConcat_FunctionalOperatorAccess().getConcat_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.concat'
		{
			newLeafNode(otherlv_1, grammarAccess.getConcat_FunctionalOperatorAccess().getConcatKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getConcat_FunctionalOperatorAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConcat_FunctionalOperatorAccess().getStrString_FunctionalParameterParserRuleCall_3_0());
				}
				lv_str_3_0=ruleString_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConcat_FunctionalOperatorRule());
					}
					set(
						$current,
						"str",
						lv_str_3_0,
						"org.xtext.MQL.String_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getConcat_FunctionalOperatorAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConcat_FunctionalOperatorAccess().getOperatorString_FunctionalOperatorParserRuleCall_5_0());
				}
				lv_operator_5_0=ruleString_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConcat_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_5_0,
						"org.xtext.MQL.String_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleendsWith_FunctionalOperator
entryRuleendsWith_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEndsWith_FunctionalOperatorRule()); }
	iv_ruleendsWith_FunctionalOperator=ruleendsWith_FunctionalOperator
	{ $current=$iv_ruleendsWith_FunctionalOperator.current; }
	EOF;

// Rule endsWith_FunctionalOperator
ruleendsWith_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEndsWith_FunctionalOperatorAccess().getEndsWith_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.endsWith'
		{
			newLeafNode(otherlv_1, grammarAccess.getEndsWith_FunctionalOperatorAccess().getEndsWithKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getEndsWith_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEndsWith_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getEndsWith_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEndsWith_FunctionalOperatorAccess().getSuffixString_FunctionalParameterParserRuleCall_4_0());
				}
				lv_suffix_4_0=ruleString_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEndsWith_FunctionalOperatorRule());
					}
					set(
						$current,
						"suffix",
						lv_suffix_4_0,
						"org.xtext.MQL.String_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getEndsWith_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEndsWith_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEndsWith_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleequalsIgnoreCase_FunctionalOperator
entryRuleequalsIgnoreCase_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualsIgnoreCase_FunctionalOperatorRule()); }
	iv_ruleequalsIgnoreCase_FunctionalOperator=ruleequalsIgnoreCase_FunctionalOperator
	{ $current=$iv_ruleequalsIgnoreCase_FunctionalOperator.current; }
	EOF;

// Rule equalsIgnoreCase_FunctionalOperator
ruleequalsIgnoreCase_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEqualsIgnoreCase_FunctionalOperatorAccess().getEqualsIgnoreCase_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.equalsIgnoreCase'
		{
			newLeafNode(otherlv_1, grammarAccess.getEqualsIgnoreCase_FunctionalOperatorAccess().getEqualsIgnoreCaseKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getEqualsIgnoreCase_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEqualsIgnoreCase_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getEqualsIgnoreCase_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualsIgnoreCase_FunctionalOperatorAccess().getAnotherStringString_FunctionalParameterParserRuleCall_4_0());
				}
				lv_anotherString_4_0=ruleString_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualsIgnoreCase_FunctionalOperatorRule());
					}
					set(
						$current,
						"anotherString",
						lv_anotherString_4_0,
						"org.xtext.MQL.String_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getEqualsIgnoreCase_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualsIgnoreCase_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualsIgnoreCase_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleindexOfString_FunctionalOperator
entryRuleindexOfString_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndexOfString_FunctionalOperatorRule()); }
	iv_ruleindexOfString_FunctionalOperator=ruleindexOfString_FunctionalOperator
	{ $current=$iv_ruleindexOfString_FunctionalOperator.current; }
	EOF;

// Rule indexOfString_FunctionalOperator
ruleindexOfString_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIndexOfString_FunctionalOperatorAccess().getIndexOfString_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.indexOfString'
		{
			newLeafNode(otherlv_1, grammarAccess.getIndexOfString_FunctionalOperatorAccess().getIndexOfStringKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getIndexOfString_FunctionalOperatorAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexOfString_FunctionalOperatorAccess().getStrString_FunctionalParameterParserRuleCall_3_0());
				}
				lv_str_3_0=ruleString_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexOfString_FunctionalOperatorRule());
					}
					set(
						$current,
						"str",
						lv_str_3_0,
						"org.xtext.MQL.String_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getIndexOfString_FunctionalOperatorAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexOfString_FunctionalOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_5_0());
				}
				lv_operator_5_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexOfString_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_5_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleindexOfChar_FunctionalOperator
entryRuleindexOfChar_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndexOfChar_FunctionalOperatorRule()); }
	iv_ruleindexOfChar_FunctionalOperator=ruleindexOfChar_FunctionalOperator
	{ $current=$iv_ruleindexOfChar_FunctionalOperator.current; }
	EOF;

// Rule indexOfChar_FunctionalOperator
ruleindexOfChar_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIndexOfChar_FunctionalOperatorAccess().getIndexOfChar_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.indexOfChar'
		{
			newLeafNode(otherlv_1, grammarAccess.getIndexOfChar_FunctionalOperatorAccess().getIndexOfCharKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getIndexOfChar_FunctionalOperatorAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexOfChar_FunctionalOperatorAccess().getChInteger_FunctionalParameterParserRuleCall_3_0());
				}
				lv_ch_3_0=ruleInteger_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexOfChar_FunctionalOperatorRule());
					}
					set(
						$current,
						"ch",
						lv_ch_3_0,
						"org.xtext.MQL.Integer_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getIndexOfChar_FunctionalOperatorAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexOfChar_FunctionalOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_5_0());
				}
				lv_operator_5_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexOfChar_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_5_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleindexOfCharFromIndex_FunctionalOperator
entryRuleindexOfCharFromIndex_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndexOfCharFromIndex_FunctionalOperatorRule()); }
	iv_ruleindexOfCharFromIndex_FunctionalOperator=ruleindexOfCharFromIndex_FunctionalOperator
	{ $current=$iv_ruleindexOfCharFromIndex_FunctionalOperator.current; }
	EOF;

// Rule indexOfCharFromIndex_FunctionalOperator
ruleindexOfCharFromIndex_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIndexOfCharFromIndex_FunctionalOperatorAccess().getIndexOfCharFromIndex_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.indexOfCharFromIndex'
		{
			newLeafNode(otherlv_1, grammarAccess.getIndexOfCharFromIndex_FunctionalOperatorAccess().getIndexOfCharFromIndexKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getIndexOfCharFromIndex_FunctionalOperatorAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexOfCharFromIndex_FunctionalOperatorAccess().getChInteger_FunctionalParameterParserRuleCall_3_0());
				}
				lv_ch_3_0=ruleInteger_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexOfCharFromIndex_FunctionalOperatorRule());
					}
					set(
						$current,
						"ch",
						lv_ch_3_0,
						"org.xtext.MQL.Integer_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getIndexOfCharFromIndex_FunctionalOperatorAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexOfCharFromIndex_FunctionalOperatorAccess().getFromIndexInteger_FunctionalParameterParserRuleCall_5_0());
				}
				lv_fromIndex_5_0=ruleInteger_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexOfCharFromIndex_FunctionalOperatorRule());
					}
					set(
						$current,
						"fromIndex",
						lv_fromIndex_5_0,
						"org.xtext.MQL.Integer_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getIndexOfCharFromIndex_FunctionalOperatorAccess().getRightParenthesisKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexOfCharFromIndex_FunctionalOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_7_0());
				}
				lv_operator_7_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexOfCharFromIndex_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_7_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleisEmpty_FunctionalOperator
entryRuleisEmpty_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsEmpty_FunctionalOperatorRule()); }
	iv_ruleisEmpty_FunctionalOperator=ruleisEmpty_FunctionalOperator
	{ $current=$iv_ruleisEmpty_FunctionalOperator.current; }
	EOF;

// Rule isEmpty_FunctionalOperator
ruleisEmpty_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIsEmpty_FunctionalOperatorAccess().getIsEmpty_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.isEmpty'
		{
			newLeafNode(otherlv_1, grammarAccess.getIsEmpty_FunctionalOperatorAccess().getIsEmptyKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getIsEmpty_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIsEmpty_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='()'
		{
			newLeafNode(otherlv_3, grammarAccess.getIsEmpty_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIsEmpty_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_4_0());
				}
				lv_operator_4_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIsEmpty_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_4_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleoffsetByCodePoints_FunctionalOperator
entryRuleoffsetByCodePoints_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOffsetByCodePoints_FunctionalOperatorRule()); }
	iv_ruleoffsetByCodePoints_FunctionalOperator=ruleoffsetByCodePoints_FunctionalOperator
	{ $current=$iv_ruleoffsetByCodePoints_FunctionalOperator.current; }
	EOF;

// Rule offsetByCodePoints_FunctionalOperator
ruleoffsetByCodePoints_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOffsetByCodePoints_FunctionalOperatorAccess().getOffsetByCodePoints_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.offsetByCodePoints'
		{
			newLeafNode(otherlv_1, grammarAccess.getOffsetByCodePoints_FunctionalOperatorAccess().getOffsetByCodePointsKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getOffsetByCodePoints_FunctionalOperatorAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOffsetByCodePoints_FunctionalOperatorAccess().getIndexInteger_FunctionalParameterParserRuleCall_3_0());
				}
				lv_index_3_0=ruleInteger_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOffsetByCodePoints_FunctionalOperatorRule());
					}
					set(
						$current,
						"index",
						lv_index_3_0,
						"org.xtext.MQL.Integer_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getOffsetByCodePoints_FunctionalOperatorAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOffsetByCodePoints_FunctionalOperatorAccess().getCodePointOffsetInteger_FunctionalParameterParserRuleCall_5_0());
				}
				lv_codePointOffset_5_0=ruleInteger_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOffsetByCodePoints_FunctionalOperatorRule());
					}
					set(
						$current,
						"codePointOffset",
						lv_codePointOffset_5_0,
						"org.xtext.MQL.Integer_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getOffsetByCodePoints_FunctionalOperatorAccess().getRightParenthesisKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOffsetByCodePoints_FunctionalOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_7_0());
				}
				lv_operator_7_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOffsetByCodePoints_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_7_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulestartsWith_FunctionalOperator
entryRulestartsWith_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartsWith_FunctionalOperatorRule()); }
	iv_rulestartsWith_FunctionalOperator=rulestartsWith_FunctionalOperator
	{ $current=$iv_rulestartsWith_FunctionalOperator.current; }
	EOF;

// Rule startsWith_FunctionalOperator
rulestartsWith_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStartsWith_FunctionalOperatorAccess().getStartsWith_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.startsWith'
		{
			newLeafNode(otherlv_1, grammarAccess.getStartsWith_FunctionalOperatorAccess().getStartsWithKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getStartsWith_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStartsWith_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getStartsWith_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStartsWith_FunctionalOperatorAccess().getPrefixString_FunctionalParameterParserRuleCall_4_0());
				}
				lv_prefix_4_0=ruleString_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartsWith_FunctionalOperatorRule());
					}
					set(
						$current,
						"prefix",
						lv_prefix_4_0,
						"org.xtext.MQL.String_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getStartsWith_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStartsWith_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartsWith_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulestartsWithOffset_FunctionalOperator
entryRulestartsWithOffset_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartsWithOffset_FunctionalOperatorRule()); }
	iv_rulestartsWithOffset_FunctionalOperator=rulestartsWithOffset_FunctionalOperator
	{ $current=$iv_rulestartsWithOffset_FunctionalOperator.current; }
	EOF;

// Rule startsWithOffset_FunctionalOperator
rulestartsWithOffset_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStartsWithOffset_FunctionalOperatorAccess().getStartsWithOffset_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.startsWithOffset'
		{
			newLeafNode(otherlv_1, grammarAccess.getStartsWithOffset_FunctionalOperatorAccess().getStartsWithOffsetKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getStartsWithOffset_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStartsWithOffset_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getStartsWithOffset_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStartsWithOffset_FunctionalOperatorAccess().getPrefixString_FunctionalParameterParserRuleCall_4_0());
				}
				lv_prefix_4_0=ruleString_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartsWithOffset_FunctionalOperatorRule());
					}
					set(
						$current,
						"prefix",
						lv_prefix_4_0,
						"org.xtext.MQL.String_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getStartsWithOffset_FunctionalOperatorAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStartsWithOffset_FunctionalOperatorAccess().getToffsetInteger_FunctionalParameterParserRuleCall_6_0());
				}
				lv_toffset_6_0=ruleInteger_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartsWithOffset_FunctionalOperatorRule());
					}
					set(
						$current,
						"toffset",
						lv_toffset_6_0,
						"org.xtext.MQL.Integer_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getStartsWithOffset_FunctionalOperatorAccess().getRightParenthesisKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStartsWithOffset_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_8_0());
				}
				lv_operator_8_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartsWithOffset_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_8_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuletoLowerCase_FunctionalOperator
entryRuletoLowerCase_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getToLowerCase_FunctionalOperatorRule()); }
	iv_ruletoLowerCase_FunctionalOperator=ruletoLowerCase_FunctionalOperator
	{ $current=$iv_ruletoLowerCase_FunctionalOperator.current; }
	EOF;

// Rule toLowerCase_FunctionalOperator
ruletoLowerCase_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getToLowerCase_FunctionalOperatorAccess().getToLowerCase_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.toLowerCase'
		{
			newLeafNode(otherlv_1, grammarAccess.getToLowerCase_FunctionalOperatorAccess().getToLowerCaseKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getToLowerCase_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getToLowerCase_FunctionalOperatorAccess().getOperatorString_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleString_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getToLowerCase_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.String_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuletoUpperCase_FunctionalOperator
entryRuletoUpperCase_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getToUpperCase_FunctionalOperatorRule()); }
	iv_ruletoUpperCase_FunctionalOperator=ruletoUpperCase_FunctionalOperator
	{ $current=$iv_ruletoUpperCase_FunctionalOperator.current; }
	EOF;

// Rule toUpperCase_FunctionalOperator
ruletoUpperCase_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getToUpperCase_FunctionalOperatorAccess().getToUpperCase_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.toUpperCase'
		{
			newLeafNode(otherlv_1, grammarAccess.getToUpperCase_FunctionalOperatorAccess().getToUpperCaseKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getToUpperCase_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getToUpperCase_FunctionalOperatorAccess().getOperatorString_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleString_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getToUpperCase_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.String_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuletrim_FunctionalOperator
entryRuletrim_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTrim_FunctionalOperatorRule()); }
	iv_ruletrim_FunctionalOperator=ruletrim_FunctionalOperator
	{ $current=$iv_ruletrim_FunctionalOperator.current; }
	EOF;

// Rule trim_FunctionalOperator
ruletrim_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTrim_FunctionalOperatorAccess().getTrim_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.trim'
		{
			newLeafNode(otherlv_1, grammarAccess.getTrim_FunctionalOperatorAccess().getTrimKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getTrim_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTrim_FunctionalOperatorAccess().getOperatorString_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleString_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTrim_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.String_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleCharSequence_String_length_FunctionalOperator
entryRuleCharSequence_String_length_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharSequence_String_length_FunctionalOperatorRule()); }
	iv_ruleCharSequence_String_length_FunctionalOperator=ruleCharSequence_String_length_FunctionalOperator
	{ $current=$iv_ruleCharSequence_String_length_FunctionalOperator.current; }
	EOF;

// Rule CharSequence_String_length_FunctionalOperator
ruleCharSequence_String_length_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCharSequence_String_length_FunctionalOperatorAccess().getCharSequence_String_length_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.length'
		{
			newLeafNode(otherlv_1, grammarAccess.getCharSequence_String_length_FunctionalOperatorAccess().getLengthKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getCharSequence_String_length_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCharSequence_String_length_FunctionalOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCharSequence_String_length_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleCharSequence_String_Object_CharSequence_equals_FunctionalOperator
entryRuleCharSequence_String_Object_CharSequence_equals_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharSequence_String_Object_CharSequence_equals_FunctionalOperatorRule()); }
	iv_ruleCharSequence_String_Object_CharSequence_equals_FunctionalOperator=ruleCharSequence_String_Object_CharSequence_equals_FunctionalOperator
	{ $current=$iv_ruleCharSequence_String_Object_CharSequence_equals_FunctionalOperator.current; }
	EOF;

// Rule CharSequence_String_Object_CharSequence_equals_FunctionalOperator
ruleCharSequence_String_Object_CharSequence_equals_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCharSequence_String_Object_CharSequence_equals_FunctionalOperatorAccess().getCharSequence_String_Object_CharSequence_equals_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.equals'
		{
			newLeafNode(otherlv_1, grammarAccess.getCharSequence_String_Object_CharSequence_equals_FunctionalOperatorAccess().getEqualsKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getCharSequence_String_Object_CharSequence_equals_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCharSequence_String_Object_CharSequence_equals_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getCharSequence_String_Object_CharSequence_equals_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCharSequence_String_Object_CharSequence_equals_FunctionalOperatorAccess().getObjObject_FunctionalParameterParserRuleCall_4_0());
				}
				lv_obj_4_0=ruleObject_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCharSequence_String_Object_CharSequence_equals_FunctionalOperatorRule());
					}
					set(
						$current,
						"obj",
						lv_obj_4_0,
						"org.xtext.MQL.Object_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getCharSequence_String_Object_CharSequence_equals_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCharSequence_String_Object_CharSequence_equals_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCharSequence_String_Object_CharSequence_equals_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleCharSequence_String_Object_CharSequence_toString_FunctionalOperator
entryRuleCharSequence_String_Object_CharSequence_toString_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharSequence_String_Object_CharSequence_toString_FunctionalOperatorRule()); }
	iv_ruleCharSequence_String_Object_CharSequence_toString_FunctionalOperator=ruleCharSequence_String_Object_CharSequence_toString_FunctionalOperator
	{ $current=$iv_ruleCharSequence_String_Object_CharSequence_toString_FunctionalOperator.current; }
	EOF;

// Rule CharSequence_String_Object_CharSequence_toString_FunctionalOperator
ruleCharSequence_String_Object_CharSequence_toString_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCharSequence_String_Object_CharSequence_toString_FunctionalOperatorAccess().getCharSequence_String_Object_CharSequence_toString_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.toString'
		{
			newLeafNode(otherlv_1, grammarAccess.getCharSequence_String_Object_CharSequence_toString_FunctionalOperatorAccess().getToStringKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getCharSequence_String_Object_CharSequence_toString_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCharSequence_String_Object_CharSequence_toString_FunctionalOperatorAccess().getOperatorString_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleString_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCharSequence_String_Object_CharSequence_toString_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.String_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleCharSequence_String_Object_CharSequence_hashCode_FunctionalOperator
entryRuleCharSequence_String_Object_CharSequence_hashCode_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorRule()); }
	iv_ruleCharSequence_String_Object_CharSequence_hashCode_FunctionalOperator=ruleCharSequence_String_Object_CharSequence_hashCode_FunctionalOperator
	{ $current=$iv_ruleCharSequence_String_Object_CharSequence_hashCode_FunctionalOperator.current; }
	EOF;

// Rule CharSequence_String_Object_CharSequence_hashCode_FunctionalOperator
ruleCharSequence_String_Object_CharSequence_hashCode_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorAccess().getCharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.hashCode'
		{
			newLeafNode(otherlv_1, grammarAccess.getCharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorAccess().getHashCodeKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getCharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCharSequence_String_Object_CharSequence_hashCode_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleparseBoolean_FunctionalOperator
entryRuleparseBoolean_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParseBoolean_FunctionalOperatorRule()); }
	iv_ruleparseBoolean_FunctionalOperator=ruleparseBoolean_FunctionalOperator
	{ $current=$iv_ruleparseBoolean_FunctionalOperator.current; }
	EOF;

// Rule parseBoolean_FunctionalOperator
ruleparseBoolean_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParseBoolean_FunctionalOperatorAccess().getParseBoolean_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.parseBoolean'
		{
			newLeafNode(otherlv_1, grammarAccess.getParseBoolean_FunctionalOperatorAccess().getParseBooleanKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getParseBoolean_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParseBoolean_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getParseBoolean_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParseBoolean_FunctionalOperatorAccess().getSString_FunctionalParameterParserRuleCall_4_0());
				}
				lv_s_4_0=ruleString_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParseBoolean_FunctionalOperatorRule());
					}
					set(
						$current,
						"s",
						lv_s_4_0,
						"org.xtext.MQL.String_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getParseBoolean_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParseBoolean_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParseBoolean_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulecompareToBoolean_FunctionalOperator
entryRulecompareToBoolean_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompareToBoolean_FunctionalOperatorRule()); }
	iv_rulecompareToBoolean_FunctionalOperator=rulecompareToBoolean_FunctionalOperator
	{ $current=$iv_rulecompareToBoolean_FunctionalOperator.current; }
	EOF;

// Rule compareToBoolean_FunctionalOperator
rulecompareToBoolean_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCompareToBoolean_FunctionalOperatorAccess().getCompareToBoolean_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.compareToBoolean'
		{
			newLeafNode(otherlv_1, grammarAccess.getCompareToBoolean_FunctionalOperatorAccess().getCompareToBooleanKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getCompareToBoolean_FunctionalOperatorAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompareToBoolean_FunctionalOperatorAccess().getBBoolean_FunctionalParameterParserRuleCall_3_0());
				}
				lv_b_3_0=ruleBoolean_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompareToBoolean_FunctionalOperatorRule());
					}
					set(
						$current,
						"b",
						lv_b_3_0,
						"org.xtext.MQL.Boolean_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getCompareToBoolean_FunctionalOperatorAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompareToBoolean_FunctionalOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_5_0());
				}
				lv_operator_5_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompareToBoolean_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_5_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleObject_Boolean_equals_FunctionalOperator
entryRuleObject_Boolean_equals_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObject_Boolean_equals_FunctionalOperatorRule()); }
	iv_ruleObject_Boolean_equals_FunctionalOperator=ruleObject_Boolean_equals_FunctionalOperator
	{ $current=$iv_ruleObject_Boolean_equals_FunctionalOperator.current; }
	EOF;

// Rule Object_Boolean_equals_FunctionalOperator
ruleObject_Boolean_equals_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObject_Boolean_equals_FunctionalOperatorAccess().getObject_Boolean_equals_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.equals'
		{
			newLeafNode(otherlv_1, grammarAccess.getObject_Boolean_equals_FunctionalOperatorAccess().getEqualsKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getObject_Boolean_equals_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObject_Boolean_equals_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getObject_Boolean_equals_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObject_Boolean_equals_FunctionalOperatorAccess().getObjObject_FunctionalParameterParserRuleCall_4_0());
				}
				lv_obj_4_0=ruleObject_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObject_Boolean_equals_FunctionalOperatorRule());
					}
					set(
						$current,
						"obj",
						lv_obj_4_0,
						"org.xtext.MQL.Object_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getObject_Boolean_equals_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObject_Boolean_equals_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObject_Boolean_equals_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleObject_Boolean_toString_FunctionalOperator
entryRuleObject_Boolean_toString_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObject_Boolean_toString_FunctionalOperatorRule()); }
	iv_ruleObject_Boolean_toString_FunctionalOperator=ruleObject_Boolean_toString_FunctionalOperator
	{ $current=$iv_ruleObject_Boolean_toString_FunctionalOperator.current; }
	EOF;

// Rule Object_Boolean_toString_FunctionalOperator
ruleObject_Boolean_toString_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObject_Boolean_toString_FunctionalOperatorAccess().getObject_Boolean_toString_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.toString'
		{
			newLeafNode(otherlv_1, grammarAccess.getObject_Boolean_toString_FunctionalOperatorAccess().getToStringKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getObject_Boolean_toString_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObject_Boolean_toString_FunctionalOperatorAccess().getOperatorString_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleString_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObject_Boolean_toString_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.String_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleObject_Boolean_hashCode_FunctionalOperator
entryRuleObject_Boolean_hashCode_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObject_Boolean_hashCode_FunctionalOperatorRule()); }
	iv_ruleObject_Boolean_hashCode_FunctionalOperator=ruleObject_Boolean_hashCode_FunctionalOperator
	{ $current=$iv_ruleObject_Boolean_hashCode_FunctionalOperator.current; }
	EOF;

// Rule Object_Boolean_hashCode_FunctionalOperator
ruleObject_Boolean_hashCode_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObject_Boolean_hashCode_FunctionalOperatorAccess().getObject_Boolean_hashCode_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.hashCode'
		{
			newLeafNode(otherlv_1, grammarAccess.getObject_Boolean_hashCode_FunctionalOperatorAccess().getHashCodeKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getObject_Boolean_hashCode_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObject_Boolean_hashCode_FunctionalOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObject_Boolean_hashCode_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleNumber_Double_greaterThan_FunctionalOperator
entryRuleNumber_Double_greaterThan_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_Double_greaterThan_FunctionalOperatorRule()); }
	iv_ruleNumber_Double_greaterThan_FunctionalOperator=ruleNumber_Double_greaterThan_FunctionalOperator
	{ $current=$iv_ruleNumber_Double_greaterThan_FunctionalOperator.current; }
	EOF;

// Rule Number_Double_greaterThan_FunctionalOperator
ruleNumber_Double_greaterThan_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumber_Double_greaterThan_FunctionalOperatorAccess().getNumber_Double_greaterThan_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.greaterThan'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumber_Double_greaterThan_FunctionalOperatorAccess().getGreaterThanKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getNumber_Double_greaterThan_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumber_Double_greaterThan_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getNumber_Double_greaterThan_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Double_greaterThan_FunctionalOperatorAccess().getINumber_FunctionalParameterParserRuleCall_4_0());
				}
				lv_i_4_0=ruleNumber_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Double_greaterThan_FunctionalOperatorRule());
					}
					set(
						$current,
						"i",
						lv_i_4_0,
						"org.xtext.MQL.Number_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getNumber_Double_greaterThan_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Double_greaterThan_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Double_greaterThan_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleNumber_Double_greaterEquals_FunctionalOperator
entryRuleNumber_Double_greaterEquals_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_Double_greaterEquals_FunctionalOperatorRule()); }
	iv_ruleNumber_Double_greaterEquals_FunctionalOperator=ruleNumber_Double_greaterEquals_FunctionalOperator
	{ $current=$iv_ruleNumber_Double_greaterEquals_FunctionalOperator.current; }
	EOF;

// Rule Number_Double_greaterEquals_FunctionalOperator
ruleNumber_Double_greaterEquals_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumber_Double_greaterEquals_FunctionalOperatorAccess().getNumber_Double_greaterEquals_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.greaterEquals'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumber_Double_greaterEquals_FunctionalOperatorAccess().getGreaterEqualsKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getNumber_Double_greaterEquals_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumber_Double_greaterEquals_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getNumber_Double_greaterEquals_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Double_greaterEquals_FunctionalOperatorAccess().getINumber_FunctionalParameterParserRuleCall_4_0());
				}
				lv_i_4_0=ruleNumber_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Double_greaterEquals_FunctionalOperatorRule());
					}
					set(
						$current,
						"i",
						lv_i_4_0,
						"org.xtext.MQL.Number_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getNumber_Double_greaterEquals_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Double_greaterEquals_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Double_greaterEquals_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleNumber_Double_smallerThan_FunctionalOperator
entryRuleNumber_Double_smallerThan_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_Double_smallerThan_FunctionalOperatorRule()); }
	iv_ruleNumber_Double_smallerThan_FunctionalOperator=ruleNumber_Double_smallerThan_FunctionalOperator
	{ $current=$iv_ruleNumber_Double_smallerThan_FunctionalOperator.current; }
	EOF;

// Rule Number_Double_smallerThan_FunctionalOperator
ruleNumber_Double_smallerThan_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumber_Double_smallerThan_FunctionalOperatorAccess().getNumber_Double_smallerThan_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.smallerThan'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumber_Double_smallerThan_FunctionalOperatorAccess().getSmallerThanKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getNumber_Double_smallerThan_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumber_Double_smallerThan_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getNumber_Double_smallerThan_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Double_smallerThan_FunctionalOperatorAccess().getINumber_FunctionalParameterParserRuleCall_4_0());
				}
				lv_i_4_0=ruleNumber_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Double_smallerThan_FunctionalOperatorRule());
					}
					set(
						$current,
						"i",
						lv_i_4_0,
						"org.xtext.MQL.Number_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getNumber_Double_smallerThan_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Double_smallerThan_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Double_smallerThan_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleNumber_Double_smallerEquals_FunctionalOperator
entryRuleNumber_Double_smallerEquals_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_Double_smallerEquals_FunctionalOperatorRule()); }
	iv_ruleNumber_Double_smallerEquals_FunctionalOperator=ruleNumber_Double_smallerEquals_FunctionalOperator
	{ $current=$iv_ruleNumber_Double_smallerEquals_FunctionalOperator.current; }
	EOF;

// Rule Number_Double_smallerEquals_FunctionalOperator
ruleNumber_Double_smallerEquals_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumber_Double_smallerEquals_FunctionalOperatorAccess().getNumber_Double_smallerEquals_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.smallerEquals'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumber_Double_smallerEquals_FunctionalOperatorAccess().getSmallerEqualsKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getNumber_Double_smallerEquals_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumber_Double_smallerEquals_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getNumber_Double_smallerEquals_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Double_smallerEquals_FunctionalOperatorAccess().getINumber_FunctionalParameterParserRuleCall_4_0());
				}
				lv_i_4_0=ruleNumber_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Double_smallerEquals_FunctionalOperatorRule());
					}
					set(
						$current,
						"i",
						lv_i_4_0,
						"org.xtext.MQL.Number_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getNumber_Double_smallerEquals_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Double_smallerEquals_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Double_smallerEquals_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleNumber_Double_Object_Number_equals_FunctionalOperator
entryRuleNumber_Double_Object_Number_equals_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_Double_Object_Number_equals_FunctionalOperatorRule()); }
	iv_ruleNumber_Double_Object_Number_equals_FunctionalOperator=ruleNumber_Double_Object_Number_equals_FunctionalOperator
	{ $current=$iv_ruleNumber_Double_Object_Number_equals_FunctionalOperator.current; }
	EOF;

// Rule Number_Double_Object_Number_equals_FunctionalOperator
ruleNumber_Double_Object_Number_equals_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumber_Double_Object_Number_equals_FunctionalOperatorAccess().getNumber_Double_Object_Number_equals_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.equals'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumber_Double_Object_Number_equals_FunctionalOperatorAccess().getEqualsKeyword_1());
		}
		(
			(
				lv_negated_2_0='!'
				{
					newLeafNode(lv_negated_2_0, grammarAccess.getNumber_Double_Object_Number_equals_FunctionalOperatorAccess().getNegatedExclamationMarkKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumber_Double_Object_Number_equals_FunctionalOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getNumber_Double_Object_Number_equals_FunctionalOperatorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Double_Object_Number_equals_FunctionalOperatorAccess().getObjObject_FunctionalParameterParserRuleCall_4_0());
				}
				lv_obj_4_0=ruleObject_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Double_Object_Number_equals_FunctionalOperatorRule());
					}
					set(
						$current,
						"obj",
						lv_obj_4_0,
						"org.xtext.MQL.Object_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getNumber_Double_Object_Number_equals_FunctionalOperatorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Double_Object_Number_equals_FunctionalOperatorAccess().getOperatorBoolean_FunctionalOperatorParserRuleCall_6_0());
				}
				lv_operator_6_0=ruleBoolean_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Double_Object_Number_equals_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_6_0,
						"org.xtext.MQL.Boolean_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleNumber_Double_Object_Number_toString_FunctionalOperator
entryRuleNumber_Double_Object_Number_toString_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_Double_Object_Number_toString_FunctionalOperatorRule()); }
	iv_ruleNumber_Double_Object_Number_toString_FunctionalOperator=ruleNumber_Double_Object_Number_toString_FunctionalOperator
	{ $current=$iv_ruleNumber_Double_Object_Number_toString_FunctionalOperator.current; }
	EOF;

// Rule Number_Double_Object_Number_toString_FunctionalOperator
ruleNumber_Double_Object_Number_toString_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumber_Double_Object_Number_toString_FunctionalOperatorAccess().getNumber_Double_Object_Number_toString_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.toString'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumber_Double_Object_Number_toString_FunctionalOperatorAccess().getToStringKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getNumber_Double_Object_Number_toString_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Double_Object_Number_toString_FunctionalOperatorAccess().getOperatorString_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleString_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Double_Object_Number_toString_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.String_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleNumber_Double_Object_Number_hashCode_FunctionalOperator
entryRuleNumber_Double_Object_Number_hashCode_FunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumber_Double_Object_Number_hashCode_FunctionalOperatorRule()); }
	iv_ruleNumber_Double_Object_Number_hashCode_FunctionalOperator=ruleNumber_Double_Object_Number_hashCode_FunctionalOperator
	{ $current=$iv_ruleNumber_Double_Object_Number_hashCode_FunctionalOperator.current; }
	EOF;

// Rule Number_Double_Object_Number_hashCode_FunctionalOperator
ruleNumber_Double_Object_Number_hashCode_FunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumber_Double_Object_Number_hashCode_FunctionalOperatorAccess().getNumber_Double_Object_Number_hashCode_FunctionalOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='.hashCode'
		{
			newLeafNode(otherlv_1, grammarAccess.getNumber_Double_Object_Number_hashCode_FunctionalOperatorAccess().getHashCodeKeyword_1());
		}
		otherlv_2='()'
		{
			newLeafNode(otherlv_2, grammarAccess.getNumber_Double_Object_Number_hashCode_FunctionalOperatorAccess().getLeftParenthesisRightParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumber_Double_Object_Number_hashCode_FunctionalOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_3_0());
				}
				lv_operator_3_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumber_Double_Object_Number_hashCode_FunctionalOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleEvaluationOperator
entryRuleEvaluationOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvaluationOperatorRule()); }
	iv_ruleEvaluationOperator=ruleEvaluationOperator
	{ $current=$iv_ruleEvaluationOperator.current; }
	EOF;

// Rule EvaluationOperator
ruleEvaluationOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEvaluationOperatorAccess().getEvaluationBitOperatorParserRuleCall_0());
		}
		this_EvaluationBitOperator_0=ruleEvaluationBitOperator
		{
			$current = $this_EvaluationBitOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEvaluationOperatorAccess().getEvaluationFunctionalOperatorParserRuleCall_1());
		}
		this_EvaluationFunctionalOperator_1=ruleEvaluationFunctionalOperator
		{
			$current = $this_EvaluationFunctionalOperator_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEvaluationBitOperator
entryRuleEvaluationBitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvaluationBitOperatorRule()); }
	iv_ruleEvaluationBitOperator=ruleEvaluationBitOperator
	{ $current=$iv_ruleEvaluationBitOperator.current; }
	EOF;

// Rule EvaluationBitOperator
ruleEvaluationBitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEvaluationBitOperatorAccess().getAnd_EvaluationBitOperatorParserRuleCall_0());
		}
		this_And_EvaluationBitOperator_0=ruleAnd_EvaluationBitOperator
		{
			$current = $this_And_EvaluationBitOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEvaluationBitOperatorAccess().getOr_EvaluationBitOperatorParserRuleCall_1());
		}
		this_Or_EvaluationBitOperator_1=ruleOr_EvaluationBitOperator
		{
			$current = $this_Or_EvaluationBitOperator_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAnd_EvaluationBitOperator
entryRuleAnd_EvaluationBitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnd_EvaluationBitOperatorRule()); }
	iv_ruleAnd_EvaluationBitOperator=ruleAnd_EvaluationBitOperator
	{ $current=$iv_ruleAnd_EvaluationBitOperator.current; }
	EOF;

// Rule And_EvaluationBitOperator
ruleAnd_EvaluationBitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='And'
		{
			newLeafNode(otherlv_0, grammarAccess.getAnd_EvaluationBitOperatorAccess().getAndKeyword_0());
		}
		(
			(
				lv_negated_1_0='!'
				{
					newLeafNode(lv_negated_1_0, grammarAccess.getAnd_EvaluationBitOperatorAccess().getNegatedExclamationMarkKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAnd_EvaluationBitOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getAnd_EvaluationBitOperatorAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAnd_EvaluationBitOperatorAccess().getConnectsEvaluationOperatorParserRuleCall_3_0());
				}
				lv_connects_3_0=ruleEvaluationOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnd_EvaluationBitOperatorRule());
					}
					add(
						$current,
						"connects",
						lv_connects_3_0,
						"org.xtext.MQL.EvaluationOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getAnd_EvaluationBitOperatorAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAnd_EvaluationBitOperatorAccess().getConnectsEvaluationOperatorParserRuleCall_4_1_0());
					}
					lv_connects_5_0=ruleEvaluationOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAnd_EvaluationBitOperatorRule());
						}
						add(
							$current,
							"connects",
							lv_connects_5_0,
							"org.xtext.MQL.EvaluationOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getAnd_EvaluationBitOperatorAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleOr_EvaluationBitOperator
entryRuleOr_EvaluationBitOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOr_EvaluationBitOperatorRule()); }
	iv_ruleOr_EvaluationBitOperator=ruleOr_EvaluationBitOperator
	{ $current=$iv_ruleOr_EvaluationBitOperator.current; }
	EOF;

// Rule Or_EvaluationBitOperator
ruleOr_EvaluationBitOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Or'
		{
			newLeafNode(otherlv_0, grammarAccess.getOr_EvaluationBitOperatorAccess().getOrKeyword_0());
		}
		(
			(
				lv_negated_1_0='!'
				{
					newLeafNode(lv_negated_1_0, grammarAccess.getOr_EvaluationBitOperatorAccess().getNegatedExclamationMarkKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOr_EvaluationBitOperatorRule());
					}
					setWithLastConsumed($current, "negated", true, "!");
				}
			)
		)?
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getOr_EvaluationBitOperatorAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOr_EvaluationBitOperatorAccess().getConnectsEvaluationOperatorParserRuleCall_3_0());
				}
				lv_connects_3_0=ruleEvaluationOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOr_EvaluationBitOperatorRule());
					}
					add(
						$current,
						"connects",
						lv_connects_3_0,
						"org.xtext.MQL.EvaluationOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getOr_EvaluationBitOperatorAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOr_EvaluationBitOperatorAccess().getConnectsEvaluationOperatorParserRuleCall_4_1_0());
					}
					lv_connects_5_0=ruleEvaluationOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOr_EvaluationBitOperatorRule());
						}
						add(
							$current,
							"connects",
							lv_connects_5_0,
							"org.xtext.MQL.EvaluationOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getOr_EvaluationBitOperatorAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleEvaluationFunctionalOperator
entryRuleEvaluationFunctionalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvaluationFunctionalOperatorRule()); }
	iv_ruleEvaluationFunctionalOperator=ruleEvaluationFunctionalOperator
	{ $current=$iv_ruleEvaluationFunctionalOperator.current; }
	EOF;

// Rule EvaluationFunctionalOperator
ruleEvaluationFunctionalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getEvaluationFunctionalOperatorAccess().getAggregationOperatorParserRuleCall());
	}
	this_AggregationOperator_0=ruleAggregationOperator
	{
		$current = $this_AggregationOperator_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAggregationOperator
entryRuleAggregationOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAggregationOperatorRule()); }
	iv_ruleAggregationOperator=ruleAggregationOperator
	{ $current=$iv_ruleAggregationOperator.current; }
	EOF;

// Rule AggregationOperator
ruleAggregationOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAggregationOperatorAccess().getCalculatingAggregationOperatorParserRuleCall_0());
		}
		this_CalculatingAggregationOperator_0=ruleCalculatingAggregationOperator
		{
			$current = $this_CalculatingAggregationOperator_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAggregationOperatorAccess().getCountingAggregationOperatorParserRuleCall_1());
		}
		this_CountingAggregationOperator_1=ruleCountingAggregationOperator
		{
			$current = $this_CountingAggregationOperator_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCountingAggregationOperator
entryRuleCountingAggregationOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCountingAggregationOperatorRule()); }
	iv_ruleCountingAggregationOperator=ruleCountingAggregationOperator
	{ $current=$iv_ruleCountingAggregationOperator.current; }
	EOF;

// Rule CountingAggregationOperator
ruleCountingAggregationOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getCountingAggregationOperatorAccess().getCount_AggregationOperatorParserRuleCall());
	}
	this_Count_AggregationOperator_0=ruleCount_AggregationOperator
	{
		$current = $this_Count_AggregationOperator_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleCalculatingAggregationOperator
entryRuleCalculatingAggregationOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCalculatingAggregationOperatorRule()); }
	iv_ruleCalculatingAggregationOperator=ruleCalculatingAggregationOperator
	{ $current=$iv_ruleCalculatingAggregationOperator.current; }
	EOF;

// Rule CalculatingAggregationOperator
ruleCalculatingAggregationOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCalculatingAggregationOperatorAccess().getSum_AggregationOperator_IntegerParserRuleCall_0());
		}
		this_Sum_AggregationOperator_Integer_0=ruleSum_AggregationOperator_Integer
		{
			$current = $this_Sum_AggregationOperator_Integer_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCalculatingAggregationOperatorAccess().getMin_AggregationOperator_IntegerParserRuleCall_1());
		}
		this_Min_AggregationOperator_Integer_1=ruleMin_AggregationOperator_Integer
		{
			$current = $this_Min_AggregationOperator_Integer_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCalculatingAggregationOperatorAccess().getMax_AggregationOperator_IntegerParserRuleCall_2());
		}
		this_Max_AggregationOperator_Integer_2=ruleMax_AggregationOperator_Integer
		{
			$current = $this_Max_AggregationOperator_Integer_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCalculatingAggregationOperatorAccess().getSum_AggregationOperator_DoubleParserRuleCall_3());
		}
		this_Sum_AggregationOperator_Double_3=ruleSum_AggregationOperator_Double
		{
			$current = $this_Sum_AggregationOperator_Double_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCalculatingAggregationOperatorAccess().getMin_AggregationOperator_DoubleParserRuleCall_4());
		}
		this_Min_AggregationOperator_Double_4=ruleMin_AggregationOperator_Double
		{
			$current = $this_Min_AggregationOperator_Double_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCalculatingAggregationOperatorAccess().getMax_AggregationOperator_DoubleParserRuleCall_5());
		}
		this_Max_AggregationOperator_Double_5=ruleMax_AggregationOperator_Double
		{
			$current = $this_Max_AggregationOperator_Double_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCount_AggregationOperator
entryRuleCount_AggregationOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCount_AggregationOperatorRule()); }
	iv_ruleCount_AggregationOperator=ruleCount_AggregationOperator
	{ $current=$iv_ruleCount_AggregationOperator.current; }
	EOF;

// Rule Count_AggregationOperator
ruleCount_AggregationOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCount_AggregationOperatorAccess().getCount_AggregationOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='count('
		{
			newLeafNode(otherlv_1, grammarAccess.getCount_AggregationOperatorAccess().getCountKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCount_AggregationOperatorAccess().getCountableCountableReferenceParameterParserRuleCall_2_0());
				}
				lv_countable_2_0=ruleCountableReferenceParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCount_AggregationOperatorRule());
					}
					set(
						$current,
						"countable",
						lv_countable_2_0,
						"org.xtext.MQL.CountableReferenceParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getCount_AggregationOperatorAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCount_AggregationOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_4_0());
				}
				lv_operator_4_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCount_AggregationOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_4_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleSum_AggregationOperator_Integer
entryRuleSum_AggregationOperator_Integer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSum_AggregationOperator_IntegerRule()); }
	iv_ruleSum_AggregationOperator_Integer=ruleSum_AggregationOperator_Integer
	{ $current=$iv_ruleSum_AggregationOperator_Integer.current; }
	EOF;

// Rule Sum_AggregationOperator_Integer
ruleSum_AggregationOperator_Integer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSum_AggregationOperator_IntegerAccess().getSum_AggregationOperator_IntegerAction_0(),
					$current);
			}
		)
		otherlv_1='sum_Integer('
		{
			newLeafNode(otherlv_1, grammarAccess.getSum_AggregationOperator_IntegerAccess().getSum_IntegerKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSum_AggregationOperator_IntegerAccess().getCalculateableInteger_CalculateableParameterParserRuleCall_2_0());
				}
				lv_calculateable_2_0=ruleInteger_CalculateableParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSum_AggregationOperator_IntegerRule());
					}
					set(
						$current,
						"calculateable",
						lv_calculateable_2_0,
						"org.xtext.MQL.Integer_CalculateableParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getSum_AggregationOperator_IntegerAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSum_AggregationOperator_IntegerAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_4_0());
				}
				lv_operator_4_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSum_AggregationOperator_IntegerRule());
					}
					set(
						$current,
						"operator",
						lv_operator_4_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleMin_AggregationOperator_Integer
entryRuleMin_AggregationOperator_Integer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMin_AggregationOperator_IntegerRule()); }
	iv_ruleMin_AggregationOperator_Integer=ruleMin_AggregationOperator_Integer
	{ $current=$iv_ruleMin_AggregationOperator_Integer.current; }
	EOF;

// Rule Min_AggregationOperator_Integer
ruleMin_AggregationOperator_Integer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMin_AggregationOperator_IntegerAccess().getMin_AggregationOperator_IntegerAction_0(),
					$current);
			}
		)
		otherlv_1='min_Integer('
		{
			newLeafNode(otherlv_1, grammarAccess.getMin_AggregationOperator_IntegerAccess().getMin_IntegerKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMin_AggregationOperator_IntegerAccess().getCalculateableInteger_CalculateableParameterParserRuleCall_2_0());
				}
				lv_calculateable_2_0=ruleInteger_CalculateableParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMin_AggregationOperator_IntegerRule());
					}
					set(
						$current,
						"calculateable",
						lv_calculateable_2_0,
						"org.xtext.MQL.Integer_CalculateableParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getMin_AggregationOperator_IntegerAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMin_AggregationOperator_IntegerAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_4_0());
				}
				lv_operator_4_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMin_AggregationOperator_IntegerRule());
					}
					set(
						$current,
						"operator",
						lv_operator_4_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleMax_AggregationOperator_Integer
entryRuleMax_AggregationOperator_Integer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMax_AggregationOperator_IntegerRule()); }
	iv_ruleMax_AggregationOperator_Integer=ruleMax_AggregationOperator_Integer
	{ $current=$iv_ruleMax_AggregationOperator_Integer.current; }
	EOF;

// Rule Max_AggregationOperator_Integer
ruleMax_AggregationOperator_Integer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMax_AggregationOperator_IntegerAccess().getMax_AggregationOperator_IntegerAction_0(),
					$current);
			}
		)
		otherlv_1='max_Integer('
		{
			newLeafNode(otherlv_1, grammarAccess.getMax_AggregationOperator_IntegerAccess().getMax_IntegerKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMax_AggregationOperator_IntegerAccess().getCalculateableInteger_CalculateableParameterParserRuleCall_2_0());
				}
				lv_calculateable_2_0=ruleInteger_CalculateableParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMax_AggregationOperator_IntegerRule());
					}
					set(
						$current,
						"calculateable",
						lv_calculateable_2_0,
						"org.xtext.MQL.Integer_CalculateableParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getMax_AggregationOperator_IntegerAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMax_AggregationOperator_IntegerAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_4_0());
				}
				lv_operator_4_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMax_AggregationOperator_IntegerRule());
					}
					set(
						$current,
						"operator",
						lv_operator_4_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleIntegerParseInt_ClassOperator
entryRuleIntegerParseInt_ClassOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerParseInt_ClassOperatorRule()); }
	iv_ruleIntegerParseInt_ClassOperator=ruleIntegerParseInt_ClassOperator
	{ $current=$iv_ruleIntegerParseInt_ClassOperator.current; }
	EOF;

// Rule IntegerParseInt_ClassOperator
ruleIntegerParseInt_ClassOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntegerParseInt_ClassOperatorAccess().getIntegerParseInt_ClassOperatorAction_0(),
					$current);
			}
		)
		otherlv_1='Integer.parseInt('
		{
			newLeafNode(otherlv_1, grammarAccess.getIntegerParseInt_ClassOperatorAccess().getIntegerParseIntKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntegerParseInt_ClassOperatorAccess().getCalculateableString_FunctionalParameterParserRuleCall_2_0());
				}
				lv_calculateable_2_0=ruleString_FunctionalParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntegerParseInt_ClassOperatorRule());
					}
					set(
						$current,
						"calculateable",
						lv_calculateable_2_0,
						"org.xtext.MQL.String_FunctionalParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getIntegerParseInt_ClassOperatorAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntegerParseInt_ClassOperatorAccess().getOperatorInteger_FunctionalOperatorParserRuleCall_4_0());
				}
				lv_operator_4_0=ruleInteger_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntegerParseInt_ClassOperatorRule());
					}
					set(
						$current,
						"operator",
						lv_operator_4_0,
						"org.xtext.MQL.Integer_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleSum_AggregationOperator_Double
entryRuleSum_AggregationOperator_Double returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSum_AggregationOperator_DoubleRule()); }
	iv_ruleSum_AggregationOperator_Double=ruleSum_AggregationOperator_Double
	{ $current=$iv_ruleSum_AggregationOperator_Double.current; }
	EOF;

// Rule Sum_AggregationOperator_Double
ruleSum_AggregationOperator_Double returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSum_AggregationOperator_DoubleAccess().getSum_AggregationOperator_DoubleAction_0(),
					$current);
			}
		)
		otherlv_1='sum_Double('
		{
			newLeafNode(otherlv_1, grammarAccess.getSum_AggregationOperator_DoubleAccess().getSum_DoubleKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSum_AggregationOperator_DoubleAccess().getCalculateableDouble_CalculateableParameterParserRuleCall_2_0());
				}
				lv_calculateable_2_0=ruleDouble_CalculateableParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSum_AggregationOperator_DoubleRule());
					}
					set(
						$current,
						"calculateable",
						lv_calculateable_2_0,
						"org.xtext.MQL.Double_CalculateableParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getSum_AggregationOperator_DoubleAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSum_AggregationOperator_DoubleAccess().getOperatorDouble_FunctionalOperatorParserRuleCall_4_0());
				}
				lv_operator_4_0=ruleDouble_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSum_AggregationOperator_DoubleRule());
					}
					set(
						$current,
						"operator",
						lv_operator_4_0,
						"org.xtext.MQL.Double_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleMin_AggregationOperator_Double
entryRuleMin_AggregationOperator_Double returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMin_AggregationOperator_DoubleRule()); }
	iv_ruleMin_AggregationOperator_Double=ruleMin_AggregationOperator_Double
	{ $current=$iv_ruleMin_AggregationOperator_Double.current; }
	EOF;

// Rule Min_AggregationOperator_Double
ruleMin_AggregationOperator_Double returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMin_AggregationOperator_DoubleAccess().getMin_AggregationOperator_DoubleAction_0(),
					$current);
			}
		)
		otherlv_1='min_Double('
		{
			newLeafNode(otherlv_1, grammarAccess.getMin_AggregationOperator_DoubleAccess().getMin_DoubleKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMin_AggregationOperator_DoubleAccess().getCalculateableDouble_CalculateableParameterParserRuleCall_2_0());
				}
				lv_calculateable_2_0=ruleDouble_CalculateableParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMin_AggregationOperator_DoubleRule());
					}
					set(
						$current,
						"calculateable",
						lv_calculateable_2_0,
						"org.xtext.MQL.Double_CalculateableParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getMin_AggregationOperator_DoubleAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMin_AggregationOperator_DoubleAccess().getOperatorDouble_FunctionalOperatorParserRuleCall_4_0());
				}
				lv_operator_4_0=ruleDouble_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMin_AggregationOperator_DoubleRule());
					}
					set(
						$current,
						"operator",
						lv_operator_4_0,
						"org.xtext.MQL.Double_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleMax_AggregationOperator_Double
entryRuleMax_AggregationOperator_Double returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMax_AggregationOperator_DoubleRule()); }
	iv_ruleMax_AggregationOperator_Double=ruleMax_AggregationOperator_Double
	{ $current=$iv_ruleMax_AggregationOperator_Double.current; }
	EOF;

// Rule Max_AggregationOperator_Double
ruleMax_AggregationOperator_Double returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMax_AggregationOperator_DoubleAccess().getMax_AggregationOperator_DoubleAction_0(),
					$current);
			}
		)
		otherlv_1='max_Double('
		{
			newLeafNode(otherlv_1, grammarAccess.getMax_AggregationOperator_DoubleAccess().getMax_DoubleKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMax_AggregationOperator_DoubleAccess().getCalculateableDouble_CalculateableParameterParserRuleCall_2_0());
				}
				lv_calculateable_2_0=ruleDouble_CalculateableParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMax_AggregationOperator_DoubleRule());
					}
					set(
						$current,
						"calculateable",
						lv_calculateable_2_0,
						"org.xtext.MQL.Double_CalculateableParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getMax_AggregationOperator_DoubleAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMax_AggregationOperator_DoubleAccess().getOperatorDouble_FunctionalOperatorParserRuleCall_4_0());
				}
				lv_operator_4_0=ruleDouble_FunctionalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMax_AggregationOperator_DoubleRule());
					}
					set(
						$current,
						"operator",
						lv_operator_4_0,
						"org.xtext.MQL.Double_FunctionalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Rule CourseType
ruleCourseType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='VO'
			{
				$current = grammarAccess.getCourseTypeAccess().getVOEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCourseTypeAccess().getVOEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='UE'
			{
				$current = grammarAccess.getCourseTypeAccess().getUEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCourseTypeAccess().getUEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='SEM'
			{
				$current = grammarAccess.getCourseTypeAccess().getSEMEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCourseTypeAccess().getSEMEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='PR'
			{
				$current = grammarAccess.getCourseTypeAccess().getPREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCourseTypeAccess().getPREnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
