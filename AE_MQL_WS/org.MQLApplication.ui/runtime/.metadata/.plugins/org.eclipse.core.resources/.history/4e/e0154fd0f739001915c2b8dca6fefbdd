// Find all persons

Find
Person p; 
  
union     

//Find professors that have an email that ends with „gmail.com“

Find
Professor p2{ 
	email e2: self.endsWith("gmail.com");
};

union

//Find persons that don't have an email that ends with „myuni.at“.  

Find 
Person p3{
	email! e3: self.endsWith("myuni.at");
};
 
union

//Find students that attend to courses that are lectured by the professor named „Peter Parker“.
 
Find
 
Course c;

Professor p4 {
	name n: self.equals("Peter Parker");
	lectures l: c; 
};

Student s {
	attends a: c;
};

Select s;

union

//Find courses that have at least 2 exams.

Find
Course c2 {
	exam ex;
	eval:count(ex).greaterEquals(2);
};

union

//Find all courses that are transitively mandatory for the course „Masters Defense Exam“.

Find

Course c3 {
	mandatoryFor+ m : mastersDefense;
};

Course mastersDefense {
	name nm : self.equals("Masters Defense Exam");
};

Select c3;

union 

//Find all courses that are NOT transitively mandatory for the course „Masters Defense Exam“.

Find

Course c4 {
	mandatoryFor!+ mn : mastersDefenseEx;
};

Course mastersDefenseEx {
	name nme : self.equals("Masters Defense Exam");
};

Select c4;

union

//Find all students who visit courses that …. or visit courses that …. or ...

Find

Student sxy{
	attends aRef: cx OR cy;
};

Course cx {
	//...
};

Course cy {
	//...
};

Select sxy;